
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001ffc  00002090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080008c  0080008c  000020bc  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  000020bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000136e  00000000  00000000  0000415c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000054ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000577a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000073c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000082ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000905c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000091bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009449  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <main>
      8a:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Eep_init>:
 * [Description]: initializes the I2C interface for the EEPROM
 * [Args]: None
 * [Return]: None
 ------------------------------------------------*/
void Eep_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TWI_init(&s_Twi_Config);
     b4e:	86 e7       	ldi	r24, 0x76	; 118
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_init>

}
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <Eep_Read>:
 * [Return]:
 * 		E_OK: success
 * 		E_NOT_OK: failure
 ------------------------------------------------*/
uint8 Eep_Read(Eep_AddressType EepromAddress, uint8 *DataBufferPtr, Eep_LengthType Length)
{
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	27 97       	sbiw	r28, 0x07	; 7
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	9b 83       	std	Y+3, r25	; 0x03
     b76:	8a 83       	std	Y+2, r24	; 0x02
     b78:	7d 83       	std	Y+5, r23	; 0x05
     b7a:	6c 83       	std	Y+4, r22	; 0x04
     b7c:	5f 83       	std	Y+7, r21	; 0x07
     b7e:	4e 83       	std	Y+6, r20	; 0x06
	uint8 DataBufferIndex = 0;
     b80:	19 82       	std	Y+1, r1	; 0x01

	TWI_start();
     b82:	0e 94 9a 06 	call	0xd34	; 0xd34 <TWI_start>
	 *										     +                   0 (WRITE)
	 *										     = 0000 0000 0000 XXX0
	 *										     |           1010 0000 (DEVICE_TYPE_IDENTIFIER<<4)
	 *										     = 0000 0000 1010 XXX0
	 */
	TWI_write( (DEVICE_TYPE_IDENTIFIER<<4) | ( ( (EepromAddress & 0x0700) >>7 ) + WRITE) );
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	80 70       	andi	r24, 0x00	; 0
     b8c:	97 70       	andi	r25, 0x07	; 7
     b8e:	88 0f       	add	r24, r24
     b90:	89 2f       	mov	r24, r25
     b92:	88 1f       	adc	r24, r24
     b94:	99 0b       	sbc	r25, r25
     b96:	91 95       	neg	r25
     b98:	80 6a       	ori	r24, 0xA0	; 160
     b9a:	0e 94 aa 06 	call	0xd54	; 0xd54 <TWI_write>
		return TWI_STATUS;
	}
	*/

	/*Send a memory location to read from (A7:A0)*/
	TWI_write( (uint8)EepromAddress );
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	0e 94 aa 06 	call	0xd54	; 0xd54 <TWI_write>
		return TWI_STATUS;
	}
	*/

	/*Repeated start*/
	TWI_start();
     ba4:	0e 94 9a 06 	call	0xd34	; 0xd34 <TWI_start>
		return TWI_STATUS;
	}
	*/

	/*send the device select code to read from the EEPROM*/
	TWI_write( (DEVICE_TYPE_IDENTIFIER<<4) | ( ( (EepromAddress & 0x0700) >>7 ) + READ) );
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	9b 81       	ldd	r25, Y+3	; 0x03
     bac:	80 70       	andi	r24, 0x00	; 0
     bae:	97 70       	andi	r25, 0x07	; 7
     bb0:	88 0f       	add	r24, r24
     bb2:	89 2f       	mov	r24, r25
     bb4:	88 1f       	adc	r24, r24
     bb6:	99 0b       	sbc	r25, r25
     bb8:	91 95       	neg	r25
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	80 6a       	ori	r24, 0xA0	; 160
     bbe:	0e 94 aa 06 	call	0xd54	; 0xd54 <TWI_write>
		return TWI_STATUS;
	}
	*/

	/*Read the specified number of bytes, and store them in the data buffer*/
	for(DataBufferIndex = 0; DataBufferIndex <Length-1; DataBufferIndex++ )
     bc2:	19 82       	std	Y+1, r1	; 0x01
     bc4:	0f c0       	rjmp	.+30     	; 0xbe4 <Eep_Read+0x88>
	{
		DataBufferPtr[DataBufferIndex] = TWI_readWithACK();
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	9d 81       	ldd	r25, Y+5	; 0x05
     bd0:	8c 01       	movw	r16, r24
     bd2:	02 0f       	add	r16, r18
     bd4:	13 1f       	adc	r17, r19
     bd6:	0e 94 c1 06 	call	0xd82	; 0xd82 <TWI_readWithACK>
     bda:	f8 01       	movw	r30, r16
     bdc:	80 83       	st	Z, r24
		return TWI_STATUS;
	}
	*/

	/*Read the specified number of bytes, and store them in the data buffer*/
	for(DataBufferIndex = 0; DataBufferIndex <Length-1; DataBufferIndex++ )
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	8e 81       	ldd	r24, Y+6	; 0x06
     bec:	9f 81       	ldd	r25, Y+7	; 0x07
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	28 17       	cp	r18, r24
     bf2:	39 07       	cpc	r19, r25
     bf4:	40 f3       	brcs	.-48     	; 0xbc6 <Eep_Read+0x6a>
		*/
	}
	/*the last byte is received without returning ACK, so the EEPROM stops sending.
	 * receiving the last byte with ACK generated the following warning in Proteus:"Stop condition whilst memory is transmitting data is unreliable"
	 */
	DataBufferPtr[DataBufferIndex] = TWI_readWithNACK();
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	9d 81       	ldd	r25, Y+5	; 0x05
     c00:	8c 01       	movw	r16, r24
     c02:	02 0f       	add	r16, r18
     c04:	13 1f       	adc	r17, r19
     c06:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_readWithNACK>
     c0a:	f8 01       	movw	r30, r16
     c0c:	80 83       	st	Z, r24
	//LCD_displayString(" NA"); //debug

	TWI_stop();
     c0e:	0e 94 e7 06 	call	0xdce	; 0xdce <TWI_stop>
	//LCD_displayString(" P"); //debug

	return E_OK;		//<<<<<<<<<<<<<<<<<<<<<<<<<
     c12:	81 e0       	ldi	r24, 0x01	; 1
}
     c14:	27 96       	adiw	r28, 0x07	; 7
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <Eep_Write>:
 * [Return]:
 * 		E_OK: success
 * 		E_NOT_OK: failure
 ------------------------------------------------*/
uint8 Eep_Write(Eep_AddressType EepromAddress, uint8 *DataBufferPtr, Eep_LengthType Length)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	27 97       	sbiw	r28, 0x07	; 7
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	9b 83       	std	Y+3, r25	; 0x03
     c40:	8a 83       	std	Y+2, r24	; 0x02
     c42:	7d 83       	std	Y+5, r23	; 0x05
     c44:	6c 83       	std	Y+4, r22	; 0x04
     c46:	5f 83       	std	Y+7, r21	; 0x07
     c48:	4e 83       	std	Y+6, r20	; 0x06
	uint8 DataBufferIndex = 0;
     c4a:	19 82       	std	Y+1, r1	; 0x01

	TWI_start();
     c4c:	0e 94 9a 06 	call	0xd34	; 0xd34 <TWI_start>
	//LCD_goToRowCol(0,0);		//debug
	//LCD_displayString("Start ");	//debug

	TWI_write( (DEVICE_TYPE_IDENTIFIER<<4) | ( ( (EepromAddress & 0x0700) >>7 ) + WRITE) );
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	9b 81       	ldd	r25, Y+3	; 0x03
     c54:	80 70       	andi	r24, 0x00	; 0
     c56:	97 70       	andi	r25, 0x07	; 7
     c58:	88 0f       	add	r24, r24
     c5a:	89 2f       	mov	r24, r25
     c5c:	88 1f       	adc	r24, r24
     c5e:	99 0b       	sbc	r25, r25
     c60:	91 95       	neg	r25
     c62:	80 6a       	ori	r24, 0xA0	; 160
     c64:	0e 94 aa 06 	call	0xd54	; 0xd54 <TWI_write>
	//LCD_displayString("Sel ");	//debug

	TWI_write( (uint8)EepromAddress );
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	0e 94 aa 06 	call	0xd54	; 0xd54 <TWI_write>
	//LCD_displayString("Loc");	//debug

	for(DataBufferIndex = 0; DataBufferIndex <Length; DataBufferIndex++ )
     c6e:	19 82       	std	Y+1, r1	; 0x01
     c70:	0e c0       	rjmp	.+28     	; 0xc8e <Eep_Write+0x64>
	{
		TWI_write( DataBufferPtr[DataBufferIndex] );
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	8c 81       	ldd	r24, Y+4	; 0x04
     c7a:	9d 81       	ldd	r25, Y+5	; 0x05
     c7c:	fc 01       	movw	r30, r24
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	80 81       	ld	r24, Z
     c84:	0e 94 aa 06 	call	0xd54	; 0xd54 <TWI_write>
	//LCD_displayString("Sel ");	//debug

	TWI_write( (uint8)EepromAddress );
	//LCD_displayString("Loc");	//debug

	for(DataBufferIndex = 0; DataBufferIndex <Length; DataBufferIndex++ )
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	8e 81       	ldd	r24, Y+6	; 0x06
     c96:	9f 81       	ldd	r25, Y+7	; 0x07
     c98:	28 17       	cp	r18, r24
     c9a:	39 07       	cpc	r19, r25
     c9c:	50 f3       	brcs	.-44     	; 0xc72 <Eep_Write+0x48>
	{
		TWI_write( DataBufferPtr[DataBufferIndex] );
		//LCD_displayInt(DataBufferIndex);	//debug
	}
	//LCD_displayInt(TWI_STATUS);		//debug
	TWI_stop();
     c9e:	0e 94 e7 06 	call	0xdce	; 0xdce <TWI_stop>
	//LCD_displayString("stop");	//debug --> not displayed --> reason: polling

	return E_OK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1

}
     ca4:	27 96       	adiw	r28, 0x07	; 7
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <TWI_init>:


#include "I2C.h"

void TWI_init(const Twi_ConfigType* config_ptr)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	00 d0       	rcall	.+0      	; 0xcbc <TWI_init+0x6>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
	 * - clear TWINT
	 * ****************************************
	 */

	/*Enable TWI interface, Acknowledge*/
	TWCR |= (1<<TWEN) | (1<<TWEA);
     cc4:	a6 e5       	ldi	r26, 0x56	; 86
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e6 e5       	ldi	r30, 0x56	; 86
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	84 64       	ori	r24, 0x44	; 68
     cd0:	8c 93       	st	X, r24

	/*Set the address*/
	TWAR = (TWAR & 0x01) | (config_ptr->twi_address << 1);
     cd2:	a2 e2       	ldi	r26, 0x22	; 34
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e2 e2       	ldi	r30, 0x22	; 34
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	28 2f       	mov	r18, r24
     cde:	21 70       	andi	r18, 0x01	; 1
     ce0:	e9 81       	ldd	r30, Y+1	; 0x01
     ce2:	fa 81       	ldd	r31, Y+2	; 0x02
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	82 2b       	or	r24, r18
     cf0:	8c 93       	st	X, r24

	/*configure the behavior on general calls*/
	TWAR |= config_ptr->e_twi_general_call_recognition;
     cf2:	a2 e2       	ldi	r26, 0x22	; 34
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e2 e2       	ldi	r30, 0x22	; 34
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	90 81       	ld	r25, Z
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	81 81       	ldd	r24, Z+1	; 0x01
     d02:	89 2b       	or	r24, r25
     d04:	8c 93       	st	X, r24

	/*set the prescaler*/
	TWSR = (TWSR & 0xFC) | (config_ptr->e_twi_prescaler);
     d06:	a1 e2       	ldi	r26, 0x21	; 33
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e2       	ldi	r30, 0x21	; 33
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	98 2f       	mov	r25, r24
     d12:	9c 7f       	andi	r25, 0xFC	; 252
     d14:	e9 81       	ldd	r30, Y+1	; 0x01
     d16:	fa 81       	ldd	r31, Y+2	; 0x02
     d18:	80 81       	ld	r24, Z
     d1a:	89 2b       	or	r24, r25
     d1c:	8c 93       	st	X, r24

	/*set the bit rate register*/
	TWBR = config_ptr->twi_bit_rate;
     d1e:	a0 e2       	ldi	r26, 0x20	; 32
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e9 81       	ldd	r30, Y+1	; 0x01
     d24:	fa 81       	ldd	r31, Y+2	; 0x02
     d26:	83 81       	ldd	r24, Z+3	; 0x03
     d28:	8c 93       	st	X, r24
}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <TWI_start>:


void TWI_start()
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 1		 0		 X		 1		0	 X
	 *************************/

	/*generate the START condition to claim the bus*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     d3c:	e6 e5       	ldi	r30, 0x56	; 86
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	84 ea       	ldi	r24, 0xA4	; 164
     d42:	80 83       	st	Z, r24

	/*TWINT will be set after successful transmission of the START condition*/
	while(BIT_IS_CLEAR(TWCR, TWINT));
     d44:	e6 e5       	ldi	r30, 0x56	; 86
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 23       	and	r24, r24
     d4c:	dc f7       	brge	.-10     	; 0xd44 <TWI_start+0x10>

	/*TWSTA would be cleared at the beginning of the other functions (it should be cleared after transmission of START condition and it is not cleared automatically),
	 *  so there is no need to clear it here.
	 */
	//TWCR &= ~(1<<TWSTA);
}
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <TWI_write>:



void TWI_write(const uint8 byte_to_write) /*made it const since the function shouldn't try to edit the value*/
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	0f 92       	push	r0
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	89 83       	std	Y+1, r24	; 0x01
	/*write the data/slave address to the data register TWDR*/
	TWDR = byte_to_write;
     d60:	e3 e2       	ldi	r30, 0x23	; 35
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	80 83       	st	Z, r24
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 0		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);
     d68:	e6 e5       	ldi	r30, 0x56	; 86
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	84 e8       	ldi	r24, 0x84	; 132
     d6e:	80 83       	st	Z, r24



	/*wait until TWINT indicates the transmission of SLA+W*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     d70:	e6 e5       	ldi	r30, 0x56	; 86
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	dc f7       	brge	.-10     	; 0xd70 <TWI_write+0x1c>
}
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <TWI_readWithACK>:

uint8 TWI_readWithACK()
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	 * 	1		 1		 0		 0		 X		 1		0	 X
	 *
	 * 	setting TWINT will clear the flag
	 * 	setting TWEA will generate the ACK pulse when data is received
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     d8a:	e6 e5       	ldi	r30, 0x56	; 86
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	84 ec       	ldi	r24, 0xC4	; 196
     d90:	80 83       	st	Z, r24

	/*wait until the byte is received, then send ACK*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     d92:	e6 e5       	ldi	r30, 0x56	; 86
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	dc f7       	brge	.-10     	; 0xd92 <TWI_readWithACK+0x10>

	/*return the received byte*/
	return TWDR;
     d9c:	e3 e2       	ldi	r30, 0x23	; 35
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <TWI_readWithNACK>:

uint8 TWI_readWithNACK()
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	 * 	1		 0		 0		 0		 X		 1		0	 X
	 *
	 * 	setting TWINT will clear the flag
	 * 	clearing TWEA will prevent the generation of the ACK pulse when data is received
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);
     db0:	e6 e5       	ldi	r30, 0x56	; 86
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	84 e8       	ldi	r24, 0x84	; 132
     db6:	80 83       	st	Z, r24

	/*wait until the byte is received, and no ACK would be sent*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     db8:	e6 e5       	ldi	r30, 0x56	; 86
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	dc f7       	brge	.-10     	; 0xdb8 <TWI_readWithNACK+0x10>

	/*return the received byte*/
	return TWDR;
     dc2:	e3 e2       	ldi	r30, 0x23	; 35
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <TWI_stop>:


void TWI_stop()
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 1		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     dd6:	e6 e5       	ldi	r30, 0x56	; 86
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	84 e9       	ldi	r24, 0x94	; 148
     ddc:	80 83       	st	Z, r24

	/*wait until the STOP condition is transmitted*/
	//while( BIT_IS_CLEAR(TWCR, TWINT) );
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <LCD_sendCommand>:
 * [Args]:
 * 		command: command to be sent
 * [Return]: -
 -----------------------------------------*/
void LCD_sendCommand(uint8 command)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	e9 97       	sbiw	r28, 0x39	; 57
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	89 af       	std	Y+57, r24	; 0x39
	/*clear RS to transfer instruction data*/
	CLEAR_BIT(CTRL_PORT_OUT, RS);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	8c 93       	st	X, r24

	/*Select write mode*/
	CLEAR_BIT(CTRL_PORT_OUT, R_W);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	8c 93       	st	X, r24
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e8       	ldi	r26, 0x80	; 128
     e1c:	bf e3       	ldi	r27, 0x3F	; 63
     e1e:	8d ab       	std	Y+53, r24	; 0x35
     e20:	9e ab       	std	Y+54, r25	; 0x36
     e22:	af ab       	std	Y+55, r26	; 0x37
     e24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e26:	6d a9       	ldd	r22, Y+53	; 0x35
     e28:	7e a9       	ldd	r23, Y+54	; 0x36
     e2a:	8f a9       	ldd	r24, Y+55	; 0x37
     e2c:	98 ad       	ldd	r25, Y+56	; 0x38
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	4a ef       	ldi	r20, 0xFA	; 250
     e34:	54 e4       	ldi	r21, 0x44	; 68
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	89 ab       	std	Y+49, r24	; 0x31
     e40:	9a ab       	std	Y+50, r25	; 0x32
     e42:	ab ab       	std	Y+51, r26	; 0x33
     e44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e46:	69 a9       	ldd	r22, Y+49	; 0x31
     e48:	7a a9       	ldd	r23, Y+50	; 0x32
     e4a:	8b a9       	ldd	r24, Y+51	; 0x33
     e4c:	9c a9       	ldd	r25, Y+52	; 0x34
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	2c f4       	brge	.+10     	; 0xe68 <LCD_sendCommand+0x84>
		__ticks = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	98 ab       	std	Y+48, r25	; 0x30
     e64:	8f a7       	std	Y+47, r24	; 0x2f
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     e68:	69 a9       	ldd	r22, Y+49	; 0x31
     e6a:	7a a9       	ldd	r23, Y+50	; 0x32
     e6c:	8b a9       	ldd	r24, Y+51	; 0x33
     e6e:	9c a9       	ldd	r25, Y+52	; 0x34
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	4f e7       	ldi	r20, 0x7F	; 127
     e76:	57 e4       	ldi	r21, 0x47	; 71
     e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	4c f5       	brge	.+82     	; 0xed2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e80:	6d a9       	ldd	r22, Y+53	; 0x35
     e82:	7e a9       	ldd	r23, Y+54	; 0x36
     e84:	8f a9       	ldd	r24, Y+55	; 0x37
     e86:	98 ad       	ldd	r25, Y+56	; 0x38
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e2       	ldi	r20, 0x20	; 32
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	98 ab       	std	Y+48, r25	; 0x30
     ea6:	8f a7       	std	Y+47, r24	; 0x2f
     ea8:	0f c0       	rjmp	.+30     	; 0xec8 <LCD_sendCommand+0xe4>
     eaa:	88 ec       	ldi	r24, 0xC8	; 200
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9e a7       	std	Y+46, r25	; 0x2e
     eb0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb2:	8d a5       	ldd	r24, Y+45	; 0x2d
     eb4:	9e a5       	ldd	r25, Y+46	; 0x2e
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <LCD_sendCommand+0xd2>
     eba:	9e a7       	std	Y+46, r25	; 0x2e
     ebc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec0:	98 a9       	ldd	r25, Y+48	; 0x30
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	98 ab       	std	Y+48, r25	; 0x30
     ec6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eca:	98 a9       	ldd	r25, Y+48	; 0x30
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	69 f7       	brne	.-38     	; 0xeaa <LCD_sendCommand+0xc6>
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed2:	69 a9       	ldd	r22, Y+49	; 0x31
     ed4:	7a a9       	ldd	r23, Y+50	; 0x32
     ed6:	8b a9       	ldd	r24, Y+51	; 0x33
     ed8:	9c a9       	ldd	r25, Y+52	; 0x34
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	98 ab       	std	Y+48, r25	; 0x30
     ee4:	8f a7       	std	Y+47, r24	; 0x2f
     ee6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee8:	98 a9       	ldd	r25, Y+48	; 0x30
     eea:	9c a7       	std	Y+44, r25	; 0x2c
     eec:	8b a7       	std	Y+43, r24	; 0x2b
     eee:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <LCD_sendCommand+0x10e>
     ef6:	9c a7       	std	Y+44, r25	; 0x2c
     ef8:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait at least 50ns (address setup time)*/
	_delay_ms(1);

	/*enable the LCD*/
	SET_BIT(CTRL_PORT_OUT, EN);
     efa:	a8 e3       	ldi	r26, 0x38	; 56
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e8 e3       	ldi	r30, 0x38	; 56
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	8c 93       	st	X, r24
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e8       	ldi	r26, 0x80	; 128
     f0e:	bf e3       	ldi	r27, 0x3F	; 63
     f10:	8f a3       	std	Y+39, r24	; 0x27
     f12:	98 a7       	std	Y+40, r25	; 0x28
     f14:	a9 a7       	std	Y+41, r26	; 0x29
     f16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f18:	6f a1       	ldd	r22, Y+39	; 0x27
     f1a:	78 a5       	ldd	r23, Y+40	; 0x28
     f1c:	89 a5       	ldd	r24, Y+41	; 0x29
     f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	4a ef       	ldi	r20, 0xFA	; 250
     f26:	54 e4       	ldi	r21, 0x44	; 68
     f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	8b a3       	std	Y+35, r24	; 0x23
     f32:	9c a3       	std	Y+36, r25	; 0x24
     f34:	ad a3       	std	Y+37, r26	; 0x25
     f36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f38:	6b a1       	ldd	r22, Y+35	; 0x23
     f3a:	7c a1       	ldd	r23, Y+36	; 0x24
     f3c:	8d a1       	ldd	r24, Y+37	; 0x25
     f3e:	9e a1       	ldd	r25, Y+38	; 0x26
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e8       	ldi	r20, 0x80	; 128
     f46:	5f e3       	ldi	r21, 0x3F	; 63
     f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f4c:	88 23       	and	r24, r24
     f4e:	2c f4       	brge	.+10     	; 0xf5a <LCD_sendCommand+0x176>
		__ticks = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9a a3       	std	Y+34, r25	; 0x22
     f56:	89 a3       	std	Y+33, r24	; 0x21
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     f5a:	6b a1       	ldd	r22, Y+35	; 0x23
     f5c:	7c a1       	ldd	r23, Y+36	; 0x24
     f5e:	8d a1       	ldd	r24, Y+37	; 0x25
     f60:	9e a1       	ldd	r25, Y+38	; 0x26
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	3f ef       	ldi	r19, 0xFF	; 255
     f66:	4f e7       	ldi	r20, 0x7F	; 127
     f68:	57 e4       	ldi	r21, 0x47	; 71
     f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f6e:	18 16       	cp	r1, r24
     f70:	4c f5       	brge	.+82     	; 0xfc4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f72:	6f a1       	ldd	r22, Y+39	; 0x27
     f74:	78 a5       	ldd	r23, Y+40	; 0x28
     f76:	89 a5       	ldd	r24, Y+41	; 0x29
     f78:	9a a5       	ldd	r25, Y+42	; 0x2a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9a a3       	std	Y+34, r25	; 0x22
     f98:	89 a3       	std	Y+33, r24	; 0x21
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <LCD_sendCommand+0x1d6>
     f9c:	88 ec       	ldi	r24, 0xC8	; 200
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	98 a3       	std	Y+32, r25	; 0x20
     fa2:	8f 8f       	std	Y+31, r24	; 0x1f
     fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa6:	98 a1       	ldd	r25, Y+32	; 0x20
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <LCD_sendCommand+0x1c4>
     fac:	98 a3       	std	Y+32, r25	; 0x20
     fae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb0:	89 a1       	ldd	r24, Y+33	; 0x21
     fb2:	9a a1       	ldd	r25, Y+34	; 0x22
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	9a a3       	std	Y+34, r25	; 0x22
     fb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fba:	89 a1       	ldd	r24, Y+33	; 0x21
     fbc:	9a a1       	ldd	r25, Y+34	; 0x22
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f7       	brne	.-38     	; 0xf9c <LCD_sendCommand+0x1b8>
     fc2:	14 c0       	rjmp	.+40     	; 0xfec <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc4:	6b a1       	ldd	r22, Y+35	; 0x23
     fc6:	7c a1       	ldd	r23, Y+36	; 0x24
     fc8:	8d a1       	ldd	r24, Y+37	; 0x25
     fca:	9e a1       	ldd	r25, Y+38	; 0x26
     fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9a a3       	std	Y+34, r25	; 0x22
     fd6:	89 a3       	std	Y+33, r24	; 0x21
     fd8:	89 a1       	ldd	r24, Y+33	; 0x21
     fda:	9a a1       	ldd	r25, Y+34	; 0x22
     fdc:	9e 8f       	std	Y+30, r25	; 0x1e
     fde:	8d 8f       	std	Y+29, r24	; 0x1d
     fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <LCD_sendCommand+0x200>
     fe8:	9e 8f       	std	Y+30, r25	; 0x1e
     fea:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait at least (tpw - tdsw)ns before sending the command*/
	_delay_ms(1);

#if N_BIT_INTERFACE == 8
	/*send the command*/
	DATA_PORT_OUT = command;
     fec:	eb e3       	ldi	r30, 0x3B	; 59
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	89 ad       	ldd	r24, Y+57	; 0x39
     ff2:	80 83       	st	Z, r24
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a0 e8       	ldi	r26, 0x80	; 128
     ffa:	bf e3       	ldi	r27, 0x3F	; 63
     ffc:	89 8f       	std	Y+25, r24	; 0x19
     ffe:	9a 8f       	std	Y+26, r25	; 0x1a
    1000:	ab 8f       	std	Y+27, r26	; 0x1b
    1002:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1004:	69 8d       	ldd	r22, Y+25	; 0x19
    1006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4a ef       	ldi	r20, 0xFA	; 250
    1012:	54 e4       	ldi	r21, 0x44	; 68
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8d 8b       	std	Y+21, r24	; 0x15
    101e:	9e 8b       	std	Y+22, r25	; 0x16
    1020:	af 8b       	std	Y+23, r26	; 0x17
    1022:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	2c f4       	brge	.+10     	; 0x1046 <LCD_sendCommand+0x262>
		__ticks = 1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9c 8b       	std	Y+20, r25	; 0x14
    1042:	8b 8b       	std	Y+19, r24	; 0x13
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1046:	6d 89       	ldd	r22, Y+21	; 0x15
    1048:	7e 89       	ldd	r23, Y+22	; 0x16
    104a:	8f 89       	ldd	r24, Y+23	; 0x17
    104c:	98 8d       	ldd	r25, Y+24	; 0x18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105a:	18 16       	cp	r1, r24
    105c:	4c f5       	brge	.+82     	; 0x10b0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e2       	ldi	r20, 0x20	; 32
    106c:	51 e4       	ldi	r21, 0x41	; 65
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9c 8b       	std	Y+20, r25	; 0x14
    1084:	8b 8b       	std	Y+19, r24	; 0x13
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <LCD_sendCommand+0x2c2>
    1088:	88 ec       	ldi	r24, 0xC8	; 200
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9a 8b       	std	Y+18, r25	; 0x12
    108e:	89 8b       	std	Y+17, r24	; 0x11
    1090:	89 89       	ldd	r24, Y+17	; 0x11
    1092:	9a 89       	ldd	r25, Y+18	; 0x12
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <LCD_sendCommand+0x2b0>
    1098:	9a 8b       	std	Y+18, r25	; 0x12
    109a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	9c 8b       	std	Y+20, r25	; 0x14
    10a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	8b 89       	ldd	r24, Y+19	; 0x13
    10a8:	9c 89       	ldd	r25, Y+20	; 0x14
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	69 f7       	brne	.-38     	; 0x1088 <LCD_sendCommand+0x2a4>
    10ae:	14 c0       	rjmp	.+40     	; 0x10d8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b0:	6d 89       	ldd	r22, Y+21	; 0x15
    10b2:	7e 89       	ldd	r23, Y+22	; 0x16
    10b4:	8f 89       	ldd	r24, Y+23	; 0x17
    10b6:	98 8d       	ldd	r25, Y+24	; 0x18
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9c 8b       	std	Y+20, r25	; 0x14
    10c2:	8b 8b       	std	Y+19, r24	; 0x13
    10c4:	8b 89       	ldd	r24, Y+19	; 0x13
    10c6:	9c 89       	ldd	r25, Y+20	; 0x14
    10c8:	98 8b       	std	Y+16, r25	; 0x10
    10ca:	8f 87       	std	Y+15, r24	; 0x0f
    10cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ce:	98 89       	ldd	r25, Y+16	; 0x10
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <LCD_sendCommand+0x2ec>
    10d4:	98 8b       	std	Y+16, r25	; 0x10
    10d6:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);

	/*disable the LCD*/
	CLEAR_BIT(CTRL_PORT_OUT, EN);
    10d8:	a8 e3       	ldi	r26, 0x38	; 56
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e8 e3       	ldi	r30, 0x38	; 56
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	8c 93       	st	X, r24
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e8       	ldi	r26, 0x80	; 128
    10ec:	bf e3       	ldi	r27, 0x3F	; 63
    10ee:	8b 87       	std	Y+11, r24	; 0x0b
    10f0:	9c 87       	std	Y+12, r25	; 0x0c
    10f2:	ad 87       	std	Y+13, r26	; 0x0d
    10f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	4a ef       	ldi	r20, 0xFA	; 250
    1104:	54 e4       	ldi	r21, 0x44	; 68
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8f 83       	std	Y+7, r24	; 0x07
    1110:	98 87       	std	Y+8, r25	; 0x08
    1112:	a9 87       	std	Y+9, r26	; 0x09
    1114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	78 85       	ldd	r23, Y+8	; 0x08
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	2c f4       	brge	.+10     	; 0x1138 <LCD_sendCommand+0x354>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
    1136:	3f c0       	rjmp	.+126    	; 0x11b6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	4c f5       	brge	.+82     	; 0x11a2 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	6b 85       	ldd	r22, Y+11	; 0x0b
    1152:	7c 85       	ldd	r23, Y+12	; 0x0c
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e2       	ldi	r20, 0x20	; 32
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <LCD_sendCommand+0x3b4>
    117a:	88 ec       	ldi	r24, 0xC8	; 200
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_sendCommand+0x3a2>
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	69 f7       	brne	.-38     	; 0x117a <LCD_sendCommand+0x396>
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	6f 81       	ldd	r22, Y+7	; 0x07
    11a4:	78 85       	ldd	r23, Y+8	; 0x08
    11a6:	89 85       	ldd	r24, Y+9	; 0x09
    11a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <LCD_sendCommand+0x3de>
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    11ca:	e9 96       	adiw	r28, 0x39	; 57
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <LCD_displayCharacter>:
 * [Args]:
 * 		character: character to be displayed
 * [Return]: -
 -----------------------------------------*/
void LCD_displayCharacter(uint8 character)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	e9 97       	sbiw	r28, 0x39	; 57
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS to transfer display data*/
	SET_BIT(CTRL_PORT_OUT, RS);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	8c 93       	st	X, r24

	/*Select write mode*/
	CLEAR_BIT(CTRL_PORT_OUT, R_W);
    1200:	a8 e3       	ldi	r26, 0x38	; 56
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e8 e3       	ldi	r30, 0x38	; 56
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8d 7f       	andi	r24, 0xFD	; 253
    120c:	8c 93       	st	X, r24
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 e8       	ldi	r26, 0x80	; 128
    1214:	bf e3       	ldi	r27, 0x3F	; 63
    1216:	8d ab       	std	Y+53, r24	; 0x35
    1218:	9e ab       	std	Y+54, r25	; 0x36
    121a:	af ab       	std	Y+55, r26	; 0x37
    121c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	6d a9       	ldd	r22, Y+53	; 0x35
    1220:	7e a9       	ldd	r23, Y+54	; 0x36
    1222:	8f a9       	ldd	r24, Y+55	; 0x37
    1224:	98 ad       	ldd	r25, Y+56	; 0x38
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	89 ab       	std	Y+49, r24	; 0x31
    1238:	9a ab       	std	Y+50, r25	; 0x32
    123a:	ab ab       	std	Y+51, r26	; 0x33
    123c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    123e:	69 a9       	ldd	r22, Y+49	; 0x31
    1240:	7a a9       	ldd	r23, Y+50	; 0x32
    1242:	8b a9       	ldd	r24, Y+51	; 0x33
    1244:	9c a9       	ldd	r25, Y+52	; 0x34
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	98 ab       	std	Y+48, r25	; 0x30
    125c:	8f a7       	std	Y+47, r24	; 0x2f
    125e:	3f c0       	rjmp	.+126    	; 0x12de <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1260:	69 a9       	ldd	r22, Y+49	; 0x31
    1262:	7a a9       	ldd	r23, Y+50	; 0x32
    1264:	8b a9       	ldd	r24, Y+51	; 0x33
    1266:	9c a9       	ldd	r25, Y+52	; 0x34
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	6d a9       	ldd	r22, Y+53	; 0x35
    127a:	7e a9       	ldd	r23, Y+54	; 0x36
    127c:	8f a9       	ldd	r24, Y+55	; 0x37
    127e:	98 ad       	ldd	r25, Y+56	; 0x38
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	98 ab       	std	Y+48, r25	; 0x30
    129e:	8f a7       	std	Y+47, r24	; 0x2f
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <LCD_displayCharacter+0xe4>
    12a2:	88 ec       	ldi	r24, 0xC8	; 200
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9e a7       	std	Y+46, r25	; 0x2e
    12a8:	8d a7       	std	Y+45, r24	; 0x2d
    12aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <LCD_displayCharacter+0xd2>
    12b2:	9e a7       	std	Y+46, r25	; 0x2e
    12b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b8:	98 a9       	ldd	r25, Y+48	; 0x30
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	98 ab       	std	Y+48, r25	; 0x30
    12be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c2:	98 a9       	ldd	r25, Y+48	; 0x30
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <LCD_displayCharacter+0xc6>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	69 a9       	ldd	r22, Y+49	; 0x31
    12cc:	7a a9       	ldd	r23, Y+50	; 0x32
    12ce:	8b a9       	ldd	r24, Y+51	; 0x33
    12d0:	9c a9       	ldd	r25, Y+52	; 0x34
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	98 ab       	std	Y+48, r25	; 0x30
    12dc:	8f a7       	std	Y+47, r24	; 0x2f
    12de:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e0:	98 a9       	ldd	r25, Y+48	; 0x30
    12e2:	9c a7       	std	Y+44, r25	; 0x2c
    12e4:	8b a7       	std	Y+43, r24	; 0x2b
    12e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <LCD_displayCharacter+0x10e>
    12ee:	9c a7       	std	Y+44, r25	; 0x2c
    12f0:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait at least 50ns (address setup time)*/
	_delay_ms(1);

	/*enable the LCD*/
	SET_BIT(CTRL_PORT_OUT, EN);
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	84 60       	ori	r24, 0x04	; 4
    12fe:	8c 93       	st	X, r24
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e8       	ldi	r26, 0x80	; 128
    1306:	bf e3       	ldi	r27, 0x3F	; 63
    1308:	8f a3       	std	Y+39, r24	; 0x27
    130a:	98 a7       	std	Y+40, r25	; 0x28
    130c:	a9 a7       	std	Y+41, r26	; 0x29
    130e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	6f a1       	ldd	r22, Y+39	; 0x27
    1312:	78 a5       	ldd	r23, Y+40	; 0x28
    1314:	89 a5       	ldd	r24, Y+41	; 0x29
    1316:	9a a5       	ldd	r25, Y+42	; 0x2a
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a ef       	ldi	r20, 0xFA	; 250
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8b a3       	std	Y+35, r24	; 0x23
    132a:	9c a3       	std	Y+36, r25	; 0x24
    132c:	ad a3       	std	Y+37, r26	; 0x25
    132e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1330:	6b a1       	ldd	r22, Y+35	; 0x23
    1332:	7c a1       	ldd	r23, Y+36	; 0x24
    1334:	8d a1       	ldd	r24, Y+37	; 0x25
    1336:	9e a1       	ldd	r25, Y+38	; 0x26
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	2c f4       	brge	.+10     	; 0x1352 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9a a3       	std	Y+34, r25	; 0x22
    134e:	89 a3       	std	Y+33, r24	; 0x21
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1352:	6b a1       	ldd	r22, Y+35	; 0x23
    1354:	7c a1       	ldd	r23, Y+36	; 0x24
    1356:	8d a1       	ldd	r24, Y+37	; 0x25
    1358:	9e a1       	ldd	r25, Y+38	; 0x26
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1366:	18 16       	cp	r1, r24
    1368:	4c f5       	brge	.+82     	; 0x13bc <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	6f a1       	ldd	r22, Y+39	; 0x27
    136c:	78 a5       	ldd	r23, Y+40	; 0x28
    136e:	89 a5       	ldd	r24, Y+41	; 0x29
    1370:	9a a5       	ldd	r25, Y+42	; 0x2a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e2       	ldi	r20, 0x20	; 32
    1378:	51 e4       	ldi	r21, 0x41	; 65
    137a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9a a3       	std	Y+34, r25	; 0x22
    1390:	89 a3       	std	Y+33, r24	; 0x21
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <LCD_displayCharacter+0x1d6>
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	98 a3       	std	Y+32, r25	; 0x20
    139a:	8f 8f       	std	Y+31, r24	; 0x1f
    139c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    139e:	98 a1       	ldd	r25, Y+32	; 0x20
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <LCD_displayCharacter+0x1c4>
    13a4:	98 a3       	std	Y+32, r25	; 0x20
    13a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	89 a1       	ldd	r24, Y+33	; 0x21
    13aa:	9a a1       	ldd	r25, Y+34	; 0x22
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9a a3       	std	Y+34, r25	; 0x22
    13b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	89 a1       	ldd	r24, Y+33	; 0x21
    13b4:	9a a1       	ldd	r25, Y+34	; 0x22
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	69 f7       	brne	.-38     	; 0x1394 <LCD_displayCharacter+0x1b8>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	6b a1       	ldd	r22, Y+35	; 0x23
    13be:	7c a1       	ldd	r23, Y+36	; 0x24
    13c0:	8d a1       	ldd	r24, Y+37	; 0x25
    13c2:	9e a1       	ldd	r25, Y+38	; 0x26
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9a a3       	std	Y+34, r25	; 0x22
    13ce:	89 a3       	std	Y+33, r24	; 0x21
    13d0:	89 a1       	ldd	r24, Y+33	; 0x21
    13d2:	9a a1       	ldd	r25, Y+34	; 0x22
    13d4:	9e 8f       	std	Y+30, r25	; 0x1e
    13d6:	8d 8f       	std	Y+29, r24	; 0x1d
    13d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LCD_displayCharacter+0x200>
    13e0:	9e 8f       	std	Y+30, r25	; 0x1e
    13e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if N_BIT_INTERFACE == 8
	/*send the command*/
	DATA_PORT_OUT = character;
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	89 ad       	ldd	r24, Y+57	; 0x39
    13ea:	80 83       	st	Z, r24
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e8       	ldi	r26, 0x80	; 128
    13f2:	bf e3       	ldi	r27, 0x3F	; 63
    13f4:	89 8f       	std	Y+25, r24	; 0x19
    13f6:	9a 8f       	std	Y+26, r25	; 0x1a
    13f8:	ab 8f       	std	Y+27, r26	; 0x1b
    13fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	69 8d       	ldd	r22, Y+25	; 0x19
    13fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8d 8b       	std	Y+21, r24	; 0x15
    1416:	9e 8b       	std	Y+22, r25	; 0x16
    1418:	af 8b       	std	Y+23, r26	; 0x17
    141a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    141c:	6d 89       	ldd	r22, Y+21	; 0x15
    141e:	7e 89       	ldd	r23, Y+22	; 0x16
    1420:	8f 89       	ldd	r24, Y+23	; 0x17
    1422:	98 8d       	ldd	r25, Y+24	; 0x18
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    143e:	6d 89       	ldd	r22, Y+21	; 0x15
    1440:	7e 89       	ldd	r23, Y+22	; 0x16
    1442:	8f 89       	ldd	r24, Y+23	; 0x17
    1444:	98 8d       	ldd	r25, Y+24	; 0x18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	69 8d       	ldd	r22, Y+25	; 0x19
    1458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
    147e:	0f c0       	rjmp	.+30     	; 0x149e <LCD_displayCharacter+0x2c2>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9a 8b       	std	Y+18, r25	; 0x12
    1486:	89 8b       	std	Y+17, r24	; 0x11
    1488:	89 89       	ldd	r24, Y+17	; 0x11
    148a:	9a 89       	ldd	r25, Y+18	; 0x12
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_displayCharacter+0x2b0>
    1490:	9a 8b       	std	Y+18, r25	; 0x12
    1492:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8b 89       	ldd	r24, Y+19	; 0x13
    1496:	9c 89       	ldd	r25, Y+20	; 0x14
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9c 8b       	std	Y+20, r25	; 0x14
    149c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8b 89       	ldd	r24, Y+19	; 0x13
    14a0:	9c 89       	ldd	r25, Y+20	; 0x14
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <LCD_displayCharacter+0x2a4>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9c 8b       	std	Y+20, r25	; 0x14
    14ba:	8b 8b       	std	Y+19, r24	; 0x13
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	98 8b       	std	Y+16, r25	; 0x10
    14c2:	8f 87       	std	Y+15, r24	; 0x0f
    14c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c6:	98 89       	ldd	r25, Y+16	; 0x10
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_displayCharacter+0x2ec>
    14cc:	98 8b       	std	Y+16, r25	; 0x10
    14ce:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);

	/*disable the LCD*/
	CLEAR_BIT(CTRL_PORT_OUT, EN);
    14d0:	a8 e3       	ldi	r26, 0x38	; 56
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8b 7f       	andi	r24, 0xFB	; 251
    14dc:	8c 93       	st	X, r24
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e8       	ldi	r26, 0x80	; 128
    14e4:	bf e3       	ldi	r27, 0x3F	; 63
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	9c 87       	std	Y+12, r25	; 0x0c
    14ea:	ad 87       	std	Y+13, r26	; 0x0d
    14ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	4a ef       	ldi	r20, 0xFA	; 250
    14fc:	54 e4       	ldi	r21, 0x44	; 68
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	8f 83       	std	Y+7, r24	; 0x07
    1508:	98 87       	std	Y+8, r25	; 0x08
    150a:	a9 87       	std	Y+9, r26	; 0x09
    150c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	3f c0       	rjmp	.+126    	; 0x15ae <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1530:	6f 81       	ldd	r22, Y+7	; 0x07
    1532:	78 85       	ldd	r23, Y+8	; 0x08
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	57 e4       	ldi	r21, 0x47	; 71
    1540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	4c f5       	brge	.+82     	; 0x159a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1548:	6b 85       	ldd	r22, Y+11	; 0x0b
    154a:	7c 85       	ldd	r23, Y+12	; 0x0c
    154c:	8d 85       	ldd	r24, Y+13	; 0x0d
    154e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e2       	ldi	r20, 0x20	; 32
    1556:	51 e4       	ldi	r21, 0x41	; 65
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <LCD_displayCharacter+0x3b4>
    1572:	88 ec       	ldi	r24, 0xC8	; 200
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_displayCharacter+0x3a2>
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	69 f7       	brne	.-38     	; 0x1572 <LCD_displayCharacter+0x396>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <LCD_displayCharacter+0x3de>
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    15c2:	e9 96       	adiw	r28, 0x39	; 57
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <LCD_displayString>:
 * [Args]:
 * 		character_ptr: pointer to the first character of the string to be displayed
 * [Return]: -
 -----------------------------------------*/
void LCD_displayString(uint8 *character_ptr)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	00 d0       	rcall	.+0      	; 0x15da <LCD_displayString+0x6>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	0a c0       	rjmp	.+20     	; 0x15f8 <LCD_displayString+0x24>
	/*display the characters until the null terminator is encountered*/
	while(*character_ptr != '\0')
	{
		LCD_displayCharacter(*character_ptr);
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	80 81       	ld	r24, Z
    15ea:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_displayCharacter>
		character_ptr++;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
 * [Return]: -
 -----------------------------------------*/
void LCD_displayString(uint8 *character_ptr)
{
	/*display the characters until the null terminator is encountered*/
	while(*character_ptr != '\0')
    15f8:	e9 81       	ldd	r30, Y+1	; 0x01
    15fa:	fa 81       	ldd	r31, Y+2	; 0x02
    15fc:	80 81       	ld	r24, Z
    15fe:	88 23       	and	r24, r24
    1600:	89 f7       	brne	.-30     	; 0x15e4 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*character_ptr);
		character_ptr++;
	}
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <LCD_displayInt>:
 * [Args]:
 * 		int_num: a signed 32-bit integer number to be displayed
 * [Return]: -
 -----------------------------------------*/
void LCD_displayInt(sint32 int_num)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	a4 97       	sbiw	r28, 0x24	; 36
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	69 a3       	std	Y+33, r22	; 0x21
    1622:	7a a3       	std	Y+34, r23	; 0x22
    1624:	8b a3       	std	Y+35, r24	; 0x23
    1626:	9c a3       	std	Y+36, r25	; 0x24
	uint8 str_of_int[LCD_N_COL]= {0};
    1628:	80 e2       	ldi	r24, 0x20	; 32
    162a:	fe 01       	movw	r30, r28
    162c:	31 96       	adiw	r30, 0x01	; 1
    162e:	df 01       	movw	r26, r30
    1630:	98 2f       	mov	r25, r24
    1632:	1d 92       	st	X+, r1
    1634:	9a 95       	dec	r25
    1636:	e9 f7       	brne	.-6      	; 0x1632 <LCD_displayInt+0x26>
	if (int_num < 0)
    1638:	89 a1       	ldd	r24, Y+33	; 0x21
    163a:	9a a1       	ldd	r25, Y+34	; 0x22
    163c:	ab a1       	ldd	r26, Y+35	; 0x23
    163e:	bc a1       	ldd	r27, Y+36	; 0x24
    1640:	bb 23       	and	r27, r27
    1642:	94 f4       	brge	.+36     	; 0x1668 <LCD_displayInt+0x5c>
	{
		LCD_displayCharacter('-');
    1644:	8d e2       	ldi	r24, 0x2D	; 45
    1646:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_displayCharacter>

		/*convert into a positive number*/
		int_num = -1 * int_num;
    164a:	89 a1       	ldd	r24, Y+33	; 0x21
    164c:	9a a1       	ldd	r25, Y+34	; 0x22
    164e:	ab a1       	ldd	r26, Y+35	; 0x23
    1650:	bc a1       	ldd	r27, Y+36	; 0x24
    1652:	b0 95       	com	r27
    1654:	a0 95       	com	r26
    1656:	90 95       	com	r25
    1658:	81 95       	neg	r24
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	af 4f       	sbci	r26, 0xFF	; 255
    165e:	bf 4f       	sbci	r27, 0xFF	; 255
    1660:	89 a3       	std	Y+33, r24	; 0x21
    1662:	9a a3       	std	Y+34, r25	; 0x22
    1664:	ab a3       	std	Y+35, r26	; 0x23
    1666:	bc a3       	std	Y+36, r27	; 0x24

	}
	/*convert the positive number (int_num) into a string (str_of_int)*/
	convertIntToString(int_num, str_of_int);
    1668:	89 a1       	ldd	r24, Y+33	; 0x21
    166a:	9a a1       	ldd	r25, Y+34	; 0x22
    166c:	ab a1       	ldd	r26, Y+35	; 0x23
    166e:	bc a1       	ldd	r27, Y+36	; 0x24
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	9e 01       	movw	r18, r28
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	a9 01       	movw	r20, r18
    167c:	0e 94 4d 0b 	call	0x169a	; 0x169a <convertIntToString>

	/*display the number*/
	LCD_displayString(str_of_int);
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_displayString>
}
    1688:	a4 96       	adiw	r28, 0x24	; 36
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <convertIntToString>:
 * 		int_num: a signed 32-bit integer number to be converted
 * 		*str_of_int_ptr: pointer to the string that represents the integer number -->>>>>>>
 * [Return]: -
 -----------------------------------------*/
void convertIntToString(uint32 int_num, uint8 *str_of_int_ptr)
{
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	e7 97       	sbiw	r28, 0x37	; 55
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	6d a7       	std	Y+45, r22	; 0x2d
    16b4:	7e a7       	std	Y+46, r23	; 0x2e
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
    16b8:	98 ab       	std	Y+48, r25	; 0x30
    16ba:	5a ab       	std	Y+50, r21	; 0x32
    16bc:	49 ab       	std	Y+49, r20	; 0x31
	/*temporary array that stores the string of int_num in reverse.
	 * the first item is NULL so that it is the last item stored in str_of_int to fit
	 *  LCD_displayString().
	 */
	uint8 temp[LCD_N_COL]={'\0'};
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	fe 01       	movw	r30, r28
    16c2:	33 96       	adiw	r30, 0x03	; 3
    16c4:	df 01       	movw	r26, r30
    16c6:	48 2f       	mov	r20, r24
    16c8:	1d 92       	st	X+, r1
    16ca:	4a 95       	dec	r20
    16cc:	e9 f7       	brne	.-6      	; 0x16c8 <convertIntToString+0x2e>

	/*a reference array that stores the ASCII corresponding to each decimal digit*/
	uint8 ASCII_reference[10] = {'0','1','2', '3', '4', '5', '6', '7', '8', '9'};
    16ce:	ce 01       	movw	r24, r28
    16d0:	83 96       	adiw	r24, 0x23	; 35
    16d2:	9c ab       	std	Y+52, r25	; 0x34
    16d4:	8b ab       	std	Y+51, r24	; 0x33
    16d6:	aa e7       	ldi	r26, 0x7A	; 122
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	be ab       	std	Y+54, r27	; 0x36
    16dc:	ad ab       	std	Y+53, r26	; 0x35
    16de:	ba e0       	ldi	r27, 0x0A	; 10
    16e0:	bf ab       	std	Y+55, r27	; 0x37
    16e2:	ed a9       	ldd	r30, Y+53	; 0x35
    16e4:	fe a9       	ldd	r31, Y+54	; 0x36
    16e6:	00 80       	ld	r0, Z
    16e8:	4d a9       	ldd	r20, Y+53	; 0x35
    16ea:	5e a9       	ldd	r21, Y+54	; 0x36
    16ec:	4f 5f       	subi	r20, 0xFF	; 255
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255
    16f0:	5e ab       	std	Y+54, r21	; 0x36
    16f2:	4d ab       	std	Y+53, r20	; 0x35
    16f4:	ab a9       	ldd	r26, Y+51	; 0x33
    16f6:	bc a9       	ldd	r27, Y+52	; 0x34
    16f8:	0c 92       	st	X, r0
    16fa:	eb a9       	ldd	r30, Y+51	; 0x33
    16fc:	fc a9       	ldd	r31, Y+52	; 0x34
    16fe:	31 96       	adiw	r30, 0x01	; 1
    1700:	fc ab       	std	Y+52, r31	; 0x34
    1702:	eb ab       	std	Y+51, r30	; 0x33
    1704:	ff a9       	ldd	r31, Y+55	; 0x37
    1706:	f1 50       	subi	r31, 0x01	; 1
    1708:	ff ab       	std	Y+55, r31	; 0x37
    170a:	4f a9       	ldd	r20, Y+55	; 0x37
    170c:	44 23       	and	r20, r20
    170e:	49 f7       	brne	.-46     	; 0x16e2 <convertIntToString+0x48>

	uint8 index = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	8a 83       	std	Y+2, r24	; 0x02

	if(int_num == 0)
    1714:	8d a5       	ldd	r24, Y+45	; 0x2d
    1716:	9e a5       	ldd	r25, Y+46	; 0x2e
    1718:	af a5       	ldd	r26, Y+47	; 0x2f
    171a:	b8 a9       	ldd	r27, Y+48	; 0x30
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	a1 05       	cpc	r26, r1
    1720:	b1 05       	cpc	r27, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <convertIntToString+0x8c>
    1724:	41 c0       	rjmp	.+130    	; 0x17a8 <convertIntToString+0x10e>
	{
		temp[index] = ASCII_reference[0];
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4b a1       	ldd	r20, Y+35	; 0x23
    172e:	ce 01       	movw	r24, r28
    1730:	03 96       	adiw	r24, 0x03	; 3
    1732:	fc 01       	movw	r30, r24
    1734:	e2 0f       	add	r30, r18
    1736:	f3 1f       	adc	r31, r19
    1738:	40 83       	st	Z, r20
		index++;
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	3b c0       	rjmp	.+118    	; 0x17b8 <convertIntToString+0x11e>
	}
	else
	{
		while(int_num != 0)
		{
			temp[index] = ASCII_reference[int_num % 10];
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	08 2f       	mov	r16, r24
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	8d a5       	ldd	r24, Y+45	; 0x2d
    174a:	9e a5       	ldd	r25, Y+46	; 0x2e
    174c:	af a5       	ldd	r26, Y+47	; 0x2f
    174e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1750:	2a e0       	ldi	r18, 0x0A	; 10
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodsi4>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9e 01       	movw	r18, r28
    1766:	2d 5d       	subi	r18, 0xDD	; 221
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	f9 01       	movw	r30, r18
    176c:	e8 0f       	add	r30, r24
    176e:	f9 1f       	adc	r31, r25
    1770:	20 81       	ld	r18, Z
    1772:	ce 01       	movw	r24, r28
    1774:	03 96       	adiw	r24, 0x03	; 3
    1776:	fc 01       	movw	r30, r24
    1778:	e0 0f       	add	r30, r16
    177a:	f1 1f       	adc	r31, r17
    177c:	20 83       	st	Z, r18
			int_num /= 10;
    177e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1780:	9e a5       	ldd	r25, Y+46	; 0x2e
    1782:	af a5       	ldd	r26, Y+47	; 0x2f
    1784:	b8 a9       	ldd	r27, Y+48	; 0x30
    1786:	2a e0       	ldi	r18, 0x0A	; 10
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodsi4>
    1796:	da 01       	movw	r26, r20
    1798:	c9 01       	movw	r24, r18
    179a:	8d a7       	std	Y+45, r24	; 0x2d
    179c:	9e a7       	std	Y+46, r25	; 0x2e
    179e:	af a7       	std	Y+47, r26	; 0x2f
    17a0:	b8 ab       	std	Y+48, r27	; 0x30
			index++;
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	8a 83       	std	Y+2, r24	; 0x02
		temp[index] = ASCII_reference[0];
		index++;
	}
	else
	{
		while(int_num != 0)
    17a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    17aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    17ac:	af a5       	ldd	r26, Y+47	; 0x2f
    17ae:	b8 a9       	ldd	r27, Y+48	; 0x30
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	a1 05       	cpc	r26, r1
    17b4:	b1 05       	cpc	r27, r1
    17b6:	29 f6       	brne	.-118    	; 0x1742 <convertIntToString+0xa8>
		}

	}

	/*store the converted number in str_of_int in the right order*/
	for (uint8 i = 0; i < index; i++)
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <convertIntToString+0x160>
	{
		str_of_int_ptr[i] = temp[index - i -1];
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	89 a9       	ldd	r24, Y+49	; 0x31
    17c4:	9a a9       	ldd	r25, Y+50	; 0x32
    17c6:	dc 01       	movw	r26, r24
    17c8:	a2 0f       	add	r26, r18
    17ca:	b3 1f       	adc	r27, r19
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	f9 01       	movw	r30, r18
    17da:	e8 1b       	sub	r30, r24
    17dc:	f9 0b       	sbc	r31, r25
    17de:	cf 01       	movw	r24, r30
    17e0:	9c 01       	movw	r18, r24
    17e2:	21 50       	subi	r18, 0x01	; 1
    17e4:	30 40       	sbci	r19, 0x00	; 0
    17e6:	ce 01       	movw	r24, r28
    17e8:	03 96       	adiw	r24, 0x03	; 3
    17ea:	fc 01       	movw	r30, r24
    17ec:	e2 0f       	add	r30, r18
    17ee:	f3 1f       	adc	r31, r19
    17f0:	80 81       	ld	r24, Z
    17f2:	8c 93       	st	X, r24
		}

	}

	/*store the converted number in str_of_int in the right order*/
	for (uint8 i = 0; i < index; i++)
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	99 81       	ldd	r25, Y+1	; 0x01
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	98 17       	cp	r25, r24
    1800:	e8 f2       	brcs	.-70     	; 0x17bc <convertIntToString+0x122>
	{
		str_of_int_ptr[i] = temp[index - i -1];
	}
}
    1802:	e7 96       	adiw	r28, 0x37	; 55
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <LCD_init>:
 * [Description]: initializes the LCD
 * [Args]: -
 * [Return]: -
 -----------------------------------------*/
void LCD_init()
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	CTRL_PORT_DIR |= (1<<RS) | (1<<R_W) | (1<<EN);
    1820:	a7 e3       	ldi	r26, 0x37	; 55
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e7 e3       	ldi	r30, 0x37	; 55
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	87 60       	ori	r24, 0x07	; 7
    182c:	8c 93       	st	X, r24

#if N_BIT_INTERFACE == 8
	//set to o/p
	DATA_PORT_DIR = 0xFF;
    182e:	ea e3       	ldi	r30, 0x3A	; 58
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	80 83       	st	Z, r24



	LCD_sendCommand(TWO_LINE_8BIT_MODE);
    1836:	88 e3       	ldi	r24, 0x38	; 56
    1838:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
	LCD_sendCommand(0x02);
	LCD_sendCommand(TWO_LINE_4BIT_MODE);

#endif

	LCD_sendCommand(CLEAR_DISPLAY_CLEAR_DDRAM);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    1842:	8c e0       	ldi	r24, 0x0C	; 12
    1844:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <LCD_clear>:
 * [Description]: clears the display
 * [Args]: -
 * [Return]: -
 -----------------------------------------*/
void LCD_clear()
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <LCD_goToRowCol>:
 * 		row: the desired row number, starting from 0
 * 		col: the desired column number, starting from 0
 * [Return]: -
 -----------------------------------------*/
void LCD_goToRowCol(uint8 row, uint8 col)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <LCD_goToRowCol+0x6>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <LCD_goToRowCol+0x8>
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	3c 83       	std	Y+4, r19	; 0x04
    1880:	2b 83       	std	Y+3, r18	; 0x03
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	31 f0       	breq	.+12     	; 0x1896 <LCD_goToRowCol+0x2e>
    188a:	2b 81       	ldd	r18, Y+3	; 0x03
    188c:	3c 81       	ldd	r19, Y+4	; 0x04
    188e:	21 30       	cpi	r18, 0x01	; 1
    1890:	31 05       	cpc	r19, r1
    1892:	31 f0       	breq	.+12     	; 0x18a0 <LCD_goToRowCol+0x38>
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <LCD_goToRowCol+0x40>
	{
	case 0:
		LCD_sendCommand( 0x80 + (FIRST_LINE_BASE_ADDRESS + col) );
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 58       	subi	r24, 0x80	; 128
    189a:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <LCD_goToRowCol+0x40>
		break;
	case 1:
		LCD_sendCommand( 0x80 + (SECOND_LINE_BASE_ADDRESS + col) );
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 54       	subi	r24, 0x40	; 64
    18a4:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_sendCommand>
		break;
	default:
		break;
	}
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <Ocu_setCbk>:
uint8 g_ticksCounter = 0;

void (*g_Ocu_cbkPtr)() = NULL_PTR;

void Ocu_setCbk( void (*cbkPtr)(void) )
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <Ocu_setCbk+0x6>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
	g_Ocu_cbkPtr = cbkPtr;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	90 93 8f 00 	sts	0x008F, r25
    18cc:	80 93 8e 00 	sts	0x008E, r24
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <Ocu_init>:
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_init(const Ocu_ConfigType *ConfigPtr)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <Ocu_init+0x6>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
	/*Set FOC1 for non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    18e8:	af e4       	ldi	r26, 0x4F	; 79
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ef e4       	ldi	r30, 0x4F	; 79
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 60       	ori	r24, 0x08	; 8
    18f4:	8c 93       	st	X, r24
	//SET_BIT(TCCR1A, FOC1B);

	/*set OC1A behavior on compare match*/
	TCCR1A = (TCCR1A & 0x3F) | (ConfigPtr->e_ocu_pinAction << 6);
    18f6:	af e4       	ldi	r26, 0x4F	; 79
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ef e4       	ldi	r30, 0x4F	; 79
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	28 2f       	mov	r18, r24
    1902:	2f 73       	andi	r18, 0x3F	; 63
    1904:	e9 81       	ldd	r30, Y+1	; 0x01
    1906:	fa 81       	ldd	r31, Y+2	; 0x02
    1908:	80 81       	ld	r24, Z
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	00 24       	eor	r0, r0
    1910:	96 95       	lsr	r25
    1912:	87 95       	ror	r24
    1914:	07 94       	ror	r0
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	07 94       	ror	r0
    191c:	98 2f       	mov	r25, r24
    191e:	80 2d       	mov	r24, r0
    1920:	82 2b       	or	r24, r18
    1922:	8c 93       	st	X, r24
	//TCCR1A = (TCCR1A & 0xCF) | (ConfigPtr->e_ocu_pinAction << 4);	/*set OC1B behavior*/

	/*set the source for max counter value to be OCR1A register: WGM13:0 -> 0 1 0 0 */
	TCCR1B |= (1<<WGM12);
    1924:	ae e4       	ldi	r26, 0x4E	; 78
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ee e4       	ldi	r30, 0x4E	; 78
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	88 60       	ori	r24, 0x08	; 8
    1930:	8c 93       	st	X, r24

	/*set the prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | (ConfigPtr->e_ocu_prescaler);
    1932:	ae e4       	ldi	r26, 0x4E	; 78
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ee e4       	ldi	r30, 0x4E	; 78
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	98 2f       	mov	r25, r24
    193e:	98 7f       	andi	r25, 0xF8	; 248
    1940:	e9 81       	ldd	r30, Y+1	; 0x01
    1942:	fa 81       	ldd	r31, Y+2	; 0x02
    1944:	81 81       	ldd	r24, Z+1	; 0x01
    1946:	89 2b       	or	r24, r25
    1948:	8c 93       	st	X, r24
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <Ocu_start>:
 * 		counterTop: TOP value to be compared with the counter value.
 * 		n_ticksRequired: Number of ticks required to count the required time, given the specified counterTop.
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_start(uint16 counterTop, uint8 n_ticksRequired)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <Ocu_start+0x6>
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	6b 83       	std	Y+3, r22	; 0x03
	/*set the number of ticks required before notifying the callback. this value will be used by the ISR*/
	g_n_ticksRequired = n_ticksRequired;
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	80 93 8c 00 	sts	0x008C, r24

	/*enable module interrupt*/
	SET_BIT(TIMSK, OCIE1A);
    196c:	a9 e5       	ldi	r26, 0x59	; 89
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e9 e5       	ldi	r30, 0x59	; 89
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 61       	ori	r24, 0x10	; 16
    1978:	8c 93       	st	X, r24

	/*counter starts from 0*/
	TCNT1 = 0;
    197a:	ec e4       	ldi	r30, 0x4C	; 76
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	11 82       	std	Z+1, r1	; 0x01
    1980:	10 82       	st	Z, r1

	/*counts to counterTop*/
	OCR1A = counterTop;
    1982:	ea e4       	ldi	r30, 0x4A	; 74
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <Ocu_stop>:
 * [Description]: Stops the timer
 * [Args]: None
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_stop(void)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	/*Disable module interrupt*/
	CLEAR_BIT(TIMSK, OCIE1A);
    19a2:	a9 e5       	ldi	r26, 0x59	; 89
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e9 e5       	ldi	r30, 0x59	; 89
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7e       	andi	r24, 0xEF	; 239
    19ae:	8c 93       	st	X, r24
}
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <Ocu_deInit>:
 * [Description]: De-initializes the output compare unit
 * [Args]: None
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_deInit(void)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1A, FOC1A);
    19be:	af e4       	ldi	r26, 0x4F	; 79
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ef e4       	ldi	r30, 0x4F	; 79
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	87 7f       	andi	r24, 0xF7	; 247
    19ca:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR1A, FOC1B);
	TCCR1A = (TCCR1A & 0x3F) | (0);
    19cc:	af e4       	ldi	r26, 0x4F	; 79
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ef e4       	ldi	r30, 0x4F	; 79
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 73       	andi	r24, 0x3F	; 63
    19d8:	8c 93       	st	X, r24
	TCCR1B &= ~(1<<WGM12);
    19da:	ae e4       	ldi	r26, 0x4E	; 78
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ee e4       	ldi	r30, 0x4E	; 78
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	87 7f       	andi	r24, 0xF7	; 247
    19e6:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (0);		/*no clock source*/
    19e8:	ae e4       	ldi	r26, 0x4E	; 78
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ee e4       	ldi	r30, 0x4E	; 78
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 7f       	andi	r24, 0xF8	; 248
    19f4:	8c 93       	st	X, r24
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <ISR>:



/*~~~~~~~~~~~~~~~~~~~ ISR ~~~~~~~~~~~~~~~~~~~~~*/
ISR(TIMER1_COMPA_vect)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <ISR+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <ISR+0x8>
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	g_ticksCounter++;
    1a0c:	80 91 8d 00 	lds	r24, 0x008D
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 8d 00 	sts	0x008D, r24
	PORTD = g_ticksCounter;
    1a16:	e2 e3       	ldi	r30, 0x32	; 50
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 91 8d 00 	lds	r24, 0x008D
    1a1e:	80 83       	st	Z, r24
	//LCD_displayInt(g_n_ticksRequired);
	if(g_ticksCounter == g_n_ticksRequired)
    1a20:	90 91 8d 00 	lds	r25, 0x008D
    1a24:	80 91 8c 00 	lds	r24, 0x008C
    1a28:	98 17       	cp	r25, r24
    1a2a:	69 f4       	brne	.+26     	; 0x1a46 <ISR+0x4a>
	{
		if(g_Ocu_cbkPtr != NULL_PTR)
    1a2c:	80 91 8e 00 	lds	r24, 0x008E
    1a30:	90 91 8f 00 	lds	r25, 0x008F
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	39 f0       	breq	.+14     	; 0x1a46 <ISR+0x4a>
		{
			g_Ocu_cbkPtr();
    1a38:	e0 91 8e 00 	lds	r30, 0x008E
    1a3c:	f0 91 8f 00 	lds	r31, 0x008F
    1a40:	09 95       	icall
			g_ticksCounter = 0;
    1a42:	10 92 8d 00 	sts	0x008D, r1
		}

	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <UART_init>:
 * [Args]:
 * 		config_ptr: pointer to the configuration set
 * [Return]: None
 -----------------------------------------*/
void UART_init(const Uart_ConfigType *config_ptr)
{
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <UART_init+0xa>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	 * - set the character size
	 * - set the baud rate
	 *********************************************/

	/*Enable the USART transmitter & receiver */
	SET_BIT(UCSRB, RXEN);
    1a66:	aa e2       	ldi	r26, 0x2A	; 42
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ea e2       	ldi	r30, 0x2A	; 42
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 61       	ori	r24, 0x10	; 16
    1a72:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    1a74:	aa e2       	ldi	r26, 0x2A	; 42
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	ea e2       	ldi	r30, 0x2A	; 42
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	88 60       	ori	r24, 0x08	; 8
    1a80:	8c 93       	st	X, r24

#ifdef DOUBLE_SPEED
	/*Enable double speed*/
	SET_BIT(UCSRA, U2X);
    1a82:	ab e2       	ldi	r26, 0x2B	; 43
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	eb e2       	ldi	r30, 0x2B	; 43
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	82 60       	ori	r24, 0x02	; 2
    1a8e:	8c 93       	st	X, r24
#endif

	/*to access UCSRC, URSEL needs to be set*/
	SET_BIT(UCSRC, URSEL);
    1a90:	a0 e4       	ldi	r26, 0x40	; 64
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e0 e4       	ldi	r30, 0x40	; 64
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	8c 93       	st	X, r24
	/*set the mode to synchronous or asynchronous*/
	UCSRC = (UCSRC & 0xBF) | (UART_MODE<<UMSEL);
    1a9e:	a0 e4       	ldi	r26, 0x40	; 64
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e0 e4       	ldi	r30, 0x40	; 64
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8f 7b       	andi	r24, 0xBF	; 191
    1aaa:	8c 93       	st	X, r24
	/*~~~~~~~~~ frame ~~~~~~~*/
	UCSRC = (UCSRC & 0xCF) | (config_ptr->e_Uart_parityMode << UPM0);
    1aac:	a0 e4       	ldi	r26, 0x40	; 64
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e0 e4       	ldi	r30, 0x40	; 64
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	2f 7c       	andi	r18, 0xCF	; 207
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	82 95       	swap	r24
    1ac6:	92 95       	swap	r25
    1ac8:	90 7f       	andi	r25, 0xF0	; 240
    1aca:	98 27       	eor	r25, r24
    1acc:	80 7f       	andi	r24, 0xF0	; 240
    1ace:	98 27       	eor	r25, r24
    1ad0:	82 2b       	or	r24, r18
    1ad2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (config_ptr->e_Uart_stopBit << USBS);
    1ad4:	a0 e4       	ldi	r26, 0x40	; 64
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e0 e4       	ldi	r30, 0x40	; 64
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	27 7f       	andi	r18, 0xF7	; 247
    1ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae6:	81 81       	ldd	r24, Z+1	; 0x01
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	82 2b       	or	r24, r18
    1afa:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->e_Uart_charSize & 0x03) << UCSZ0);
    1afc:	a0 e4       	ldi	r26, 0x40	; 64
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e0 e4       	ldi	r30, 0x40	; 64
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	28 2f       	mov	r18, r24
    1b08:	29 7f       	andi	r18, 0xF9	; 249
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	83 70       	andi	r24, 0x03	; 3
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	82 2b       	or	r24, r18
    1b1e:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (config_ptr->e_Uart_charSize & 0x04);
    1b20:	aa e2       	ldi	r26, 0x2A	; 42
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ea e2       	ldi	r30, 0x2A	; 42
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	9b 7f       	andi	r25, 0xFB	; 251
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	84 70       	andi	r24, 0x04	; 4
    1b36:	89 2b       	or	r24, r25
    1b38:	8c 93       	st	X, r24
	/*Clear URSEL to access UBRRH*/
	CLEAR_BIT(UBRRH, URSEL);
    1b3a:	a0 e4       	ldi	r26, 0x40	; 64
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e0 e4       	ldi	r30, 0x40	; 64
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 77       	andi	r24, 0x7F	; 127
    1b46:	8c 93       	st	X, r24
	/*Baud rate*/
	UBRRH = BAUD_RATE_GENERATOR(config_ptr->Uart_baudRate) >> 8;
    1b48:	00 e4       	ldi	r16, 0x40	; 64
    1b4a:	10 e0       	ldi	r17, 0x00	; 0
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	83 81       	ldd	r24, Z+3	; 0x03
    1b52:	94 81       	ldd	r25, Z+4	; 0x04
    1b54:	cc 01       	movw	r24, r24
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	aa 1f       	adc	r26, r26
    1b60:	bb 1f       	adc	r27, r27
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	aa 1f       	adc	r26, r26
    1b68:	bb 1f       	adc	r27, r27
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	aa 1f       	adc	r26, r26
    1b70:	bb 1f       	adc	r27, r27
    1b72:	9c 01       	movw	r18, r24
    1b74:	ad 01       	movw	r20, r26
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	92 e1       	ldi	r25, 0x12	; 18
    1b7a:	aa e7       	ldi	r26, 0x7A	; 122
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodsi4>
    1b86:	da 01       	movw	r26, r20
    1b88:	c9 01       	movw	r24, r18
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	a1 09       	sbc	r26, r1
    1b8e:	b1 09       	sbc	r27, r1
    1b90:	89 2f       	mov	r24, r25
    1b92:	9a 2f       	mov	r25, r26
    1b94:	ab 2f       	mov	r26, r27
    1b96:	bb 27       	eor	r27, r27
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 83       	st	Z, r24
	UBRRL = BAUD_RATE_GENERATOR(config_ptr->Uart_baudRate);
    1b9c:	09 e2       	ldi	r16, 0x29	; 41
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
    1ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba4:	83 81       	ldd	r24, Z+3	; 0x03
    1ba6:	94 81       	ldd	r25, Z+4	; 0x04
    1ba8:	cc 01       	movw	r24, r24
    1baa:	a0 e0       	ldi	r26, 0x00	; 0
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	aa 1f       	adc	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	aa 1f       	adc	r26, r26
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	aa 1f       	adc	r26, r26
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	9c 01       	movw	r18, r24
    1bc8:	ad 01       	movw	r20, r26
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	92 e1       	ldi	r25, 0x12	; 18
    1bce:	aa e7       	ldi	r26, 0x7A	; 122
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodsi4>
    1bda:	da 01       	movw	r26, r20
    1bdc:	c9 01       	movw	r24, r18
    1bde:	81 50       	subi	r24, 0x01	; 1
    1be0:	f8 01       	movw	r30, r16
    1be2:	80 83       	st	Z, r24

}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

00001bf2 <UART_sendByte>:
 * [Args]:
 * 		data: byte to be sent
 * [Return]: None
 -----------------------------------------*/
void UART_sendByte(uint8 data)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	/*wait until the transmit buffer is empty*/
	while( BIT_IS_CLEAR(UCSRA, UDRE));
    1bfe:	eb e2       	ldi	r30, 0x2B	; 43
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	80 72       	andi	r24, 0x20	; 32
    1c0a:	90 70       	andi	r25, 0x00	; 0
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	b9 f3       	breq	.-18     	; 0x1bfe <UART_sendByte+0xc>

	/*start transmission*/
	UDR = data;
    1c10:	ec e2       	ldi	r30, 0x2C	; 44
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	80 83       	st	Z, r24
}
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <UART_receiveByte>:
 * [Description]: receives a byte of data
 * [Args]: None
 * [Return]: the received byte
 -----------------------------------------*/
uint8 UART_receiveByte()
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	/*wait until the whole byte is received*/
	while( BIT_IS_CLEAR(UCSRA, RXC));
    1c28:	eb e2       	ldi	r30, 0x2B	; 43
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 23       	and	r24, r24
    1c30:	dc f7       	brge	.-10     	; 0x1c28 <UART_receiveByte+0x8>

	/*read the buffer, clear the flag*/
	return UDR;
    1c32:	ec e2       	ldi	r30, 0x2C	; 44
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <UART_receiveString>:
 * [Args]:
 * 		str_ptr: pointer to an array of characters, where the received string will be stored
 * [Return]: None
 -----------------------------------------*/
void UART_receiveString(uint8 *str_ptr)
{
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <UART_receiveString+0xa>
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	9b 83       	std	Y+3, r25	; 0x03
    1c50:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * the string will terminate with a special character '#' followed by the null terminator.
	 * the function loops until it detects the special character and replaces it with the null terminator
	 */
	uint8 index = 0;
    1c52:	19 82       	std	Y+1, r1	; 0x01
	str_ptr[index] = UART_receiveByte();
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5e:	8c 01       	movw	r16, r24
    1c60:	02 0f       	add	r16, r18
    1c62:	13 1f       	adc	r17, r19
    1c64:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UART_receiveByte>
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 83       	st	Z, r24
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <UART_receiveString+0x4e>
	while (str_ptr[index] != '#')
	{
		index++;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	89 83       	std	Y+1, r24	; 0x01
		str_ptr[index] = UART_receiveByte();
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	8c 01       	movw	r16, r24
    1c80:	02 0f       	add	r16, r18
    1c82:	13 1f       	adc	r17, r19
    1c84:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UART_receiveByte>
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
	 * the string will terminate with a special character '#' followed by the null terminator.
	 * the function loops until it detects the special character and replaces it with the null terminator
	 */
	uint8 index = 0;
	str_ptr[index] = UART_receiveByte();
	while (str_ptr[index] != '#')
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	fc 01       	movw	r30, r24
    1c98:	e2 0f       	add	r30, r18
    1c9a:	f3 1f       	adc	r31, r19
    1c9c:	80 81       	ld	r24, Z
    1c9e:	83 32       	cpi	r24, 0x23	; 35
    1ca0:	31 f7       	brne	.-52     	; 0x1c6e <UART_receiveString+0x30>
	{
		index++;
		str_ptr[index] = UART_receiveByte();
	}
	str_ptr[index] = '\0';
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	fc 01       	movw	r30, r24
    1cae:	e2 0f       	add	r30, r18
    1cb0:	f3 1f       	adc	r31, r19
    1cb2:	10 82       	st	Z, r1
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <UART_sendString>:
 * [Args]:
 * 		str_ptr: pointer to the string that will be sent
 * [Return]: None
 -----------------------------------------*/
void UART_sendString(uint8 *str_ptr)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <UART_sendString+0x6>
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9b 83       	std	Y+3, r25	; 0x03
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = 0;
    1cd4:	19 82       	std	Y+1, r1	; 0x01
    1cd6:	0e c0       	rjmp	.+28     	; 0x1cf4 <UART_sendString+0x30>
	while(str_ptr[index] != '\0')
	{
		UART_sendByte(str_ptr[index]);
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	e2 0f       	add	r30, r18
    1ce6:	f3 1f       	adc	r31, r19
    1ce8:	80 81       	ld	r24, Z
    1cea:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <UART_sendByte>
		index++;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	89 83       	std	Y+1, r24	; 0x01
 * [Return]: None
 -----------------------------------------*/
void UART_sendString(uint8 *str_ptr)
{
	uint8 index = 0;
	while(str_ptr[index] != '\0')
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	fc 01       	movw	r30, r24
    1d00:	e2 0f       	add	r30, r18
    1d02:	f3 1f       	adc	r31, r19
    1d04:	80 81       	ld	r24, Z
    1d06:	88 23       	and	r24, r24
    1d08:	39 f7       	brne	.-50     	; 0x1cd8 <UART_sendString+0x14>
	{
		UART_sendByte(str_ptr[index]);
		index++;
	}
	/*append the special character and the null terminator, to fit UART_receiveString*/
	UART_sendByte('#');
    1d0a:	83 e2       	ldi	r24, 0x23	; 35
    1d0c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <UART_sendByte>
	UART_sendByte('\0');
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <UART_sendByte>
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <saveNewPass>:
uint8 confirm_buffer[PASSWORD_LENGTH] = {0};
uint8 key = 0;
uint8 wrongPassCounter = 0;

void saveNewPass()
{
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	1b c0       	rjmp	.+54     	; 0x1d6a <saveNewPass+0x48>
	{
		data_buffer[i] = UART_receiveByte();
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	08 2f       	mov	r16, r24
    1d38:	10 e0       	ldi	r17, 0x00	; 0
    1d3a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UART_receiveByte>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	e0 57       	subi	r30, 0x70	; 112
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 83       	st	Z, r24
		LCD_displayInt(data_buffer[i]);
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	e0 57       	subi	r30, 0x70	; 112
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 06 0b 	call	0x160c	; 0x160c <LCD_displayInt>
uint8 key = 0;
uint8 wrongPassCounter = 0;

void saveNewPass()
{
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	85 30       	cpi	r24, 0x05	; 5
    1d6e:	10 f3       	brcs	.-60     	; 0x1d34 <saveNewPass+0x12>
	{
		data_buffer[i] = UART_receiveByte();
		LCD_displayInt(data_buffer[i]);
	}

	Eep_Write(0, data_buffer, PASSWORD_LENGTH);
    1d70:	20 e9       	ldi	r18, 0x90	; 144
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	b9 01       	movw	r22, r18
    1d7a:	45 e0       	ldi	r20, 0x05	; 5
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	0e 94 15 06 	call	0xc2a	; 0xc2a <Eep_Write>
	//LCD_displayInt(8888); //debug

}
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	08 95       	ret

00001d8e <confirmPass>:

uint8 confirmPass()
{
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <confirmPass+0xa>
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	/*receive the confirmation password entered by the user*/

	//LCD_displayString("Ctrl ECU.."); //debug
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
    1d9e:	1a 82       	std	Y+2, r1	; 0x02
    1da0:	0c c0       	rjmp	.+24     	; 0x1dba <confirmPass+0x2c>
	{
		confirm_buffer[i] = UART_receiveByte();
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	08 2f       	mov	r16, r24
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UART_receiveByte>
    1dac:	f8 01       	movw	r30, r16
    1dae:	eb 56       	subi	r30, 0x6B	; 107
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 83       	st	Z, r24
uint8 confirmPass()
{
	/*receive the confirmation password entered by the user*/

	//LCD_displayString("Ctrl ECU.."); //debug
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	8a 83       	std	Y+2, r24	; 0x02
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	85 30       	cpi	r24, 0x05	; 5
    1dbe:	88 f3       	brcs	.-30     	; 0x1da2 <confirmPass+0x14>
	{
		confirm_buffer[i] = UART_receiveByte();
	}

	/*compare it to the saved password*/
	LCD_goToRowCol(0,0);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_goToRowCol>
	//LCD_displayString("                 "); //debug
	//LCD_displayInt(Eep_Read(0, data_buffer, PASSWORD_LENGTH)); //debug
	//LCD_displayString("Reading.."); //debug
	Eep_Read(0, data_buffer, PASSWORD_LENGTH);
    1dc8:	20 e9       	ldi	r18, 0x90	; 144
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	b9 01       	movw	r22, r18
    1dd2:	45 e0       	ldi	r20, 0x05	; 5
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Eep_Read>

	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	21 c0       	rjmp	.+66     	; 0x1e20 <confirmPass+0x92>
	{
		if (confirm_buffer[i] != data_buffer[i])
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	fc 01       	movw	r30, r24
    1de6:	eb 56       	subi	r30, 0x6B	; 107
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	20 81       	ld	r18, Z
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	fc 01       	movw	r30, r24
    1df4:	e0 57       	subi	r30, 0x70	; 112
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	28 17       	cp	r18, r24
    1dfc:	71 f0       	breq	.+28     	; 0x1e1a <confirmPass+0x8c>
		{
			LCD_displayInt(i); //debug
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 06 0b 	call	0x160c	; 0x160c <LCD_displayInt>
			UART_sendByte(CONFIRMATION_FAILED);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <UART_sendByte>
			return CONFIRMATION_FAILED;
    1e16:	1b 82       	std	Y+3, r1	; 0x03
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <confirmPass+0xa2>
	//LCD_displayString("                 "); //debug
	//LCD_displayInt(Eep_Read(0, data_buffer, PASSWORD_LENGTH)); //debug
	//LCD_displayString("Reading.."); //debug
	Eep_Read(0, data_buffer, PASSWORD_LENGTH);

	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	85 30       	cpi	r24, 0x05	; 5
    1e24:	e0 f2       	brcs	.-72     	; 0x1dde <confirmPass+0x50>
			LCD_displayInt(i); //debug
			UART_sendByte(CONFIRMATION_FAILED);
			return CONFIRMATION_FAILED;
		}
	}
	UART_sendByte(CONFIRMATION_PASSED);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <UART_sendByte>
	return CONFIRMATION_PASSED;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	08 95       	ret

00001e42 <alarmStart>:


void alarmStart()
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTC, BUZZER);
    1e4a:	a5 e3       	ldi	r26, 0x35	; 53
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e5 e3       	ldi	r30, 0x35	; 53
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 77       	andi	r24, 0x7F	; 127
    1e56:	8c 93       	st	X, r24
	LCD_displayString("ALARM");
    1e58:	80 e6       	ldi	r24, 0x60	; 96
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_displayString>

	/*start the timer*/
	Ocu_start(46874, 10);
    1e60:	8a e1       	ldi	r24, 0x1A	; 26
    1e62:	97 eb       	ldi	r25, 0xB7	; 183
    1e64:	6a e0       	ldi	r22, 0x0A	; 10
    1e66:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Ocu_start>
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <alarmStop>:

void alarmStop()
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTC, BUZZER);
    1e78:	a5 e3       	ldi	r26, 0x35	; 53
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e3       	ldi	r30, 0x35	; 53
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	80 68       	ori	r24, 0x80	; 128
    1e84:	8c 93       	st	X, r24
	LCD_displayString("STOPPED");
    1e86:	86 e6       	ldi	r24, 0x66	; 102
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_displayString>

	/*terminate the timer*/
	Ocu_stop();
    1e8e:	0e 94 cd 0c 	call	0x199a	; 0x199a <Ocu_stop>
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <main>:
int main()
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1ea0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCD_init>
	UART_init(&s_UartConfig);
    1ea4:	84 e8       	ldi	r24, 0x84	; 132
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <UART_init>
	SET_BIT(SREG, 7);
    1eac:	af e5       	ldi	r26, 0x5F	; 95
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ef e5       	ldi	r30, 0x5F	; 95
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 68       	ori	r24, 0x80	; 128
    1eb8:	8c 93       	st	X, r24
	Ocu_init(&s_OcuConfig);
    1eba:	89 e8       	ldi	r24, 0x89	; 137
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 6d 0c 	call	0x18da	; 0x18da <Ocu_init>
	Ocu_setCbk(alarmStop);
    1ec2:	88 e3       	ldi	r24, 0x38	; 56
    1ec4:	9f e0       	ldi	r25, 0x0F	; 15
    1ec6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Ocu_setCbk>
	Eep_init();
    1eca:	0e 94 a3 05 	call	0xb46	; 0xb46 <Eep_init>

	SET_BIT(DDRC, BUZZER);
    1ece:	a4 e3       	ldi	r26, 0x34	; 52
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e4 e3       	ldi	r30, 0x34	; 52
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 68       	ori	r24, 0x80	; 128
    1eda:	8c 93       	st	X, r24
	SET_BIT(PORTC, BUZZER);		/*init*/
    1edc:	a5 e3       	ldi	r26, 0x35	; 53
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e3       	ldi	r30, 0x35	; 53
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 68       	ori	r24, 0x80	; 128
    1ee8:	8c 93       	st	X, r24
	DDRD |= (1<< MOTOR_IN1) | (1<< MOTOR_IN2) | (1<< MOTOR_EN1);
    1eea:	a1 e3       	ldi	r26, 0x31	; 49
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e1 e3       	ldi	r30, 0x31	; 49
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 6e       	ori	r24, 0xE0	; 224
    1ef6:	8c 93       	st	X, r24

	saveNewPass();
    1ef8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <saveNewPass>
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <main+0x6a>
	//confirmPass();

	while (confirmPass() == CONFIRMATION_FAILED)
	{
		saveNewPass();
    1efe:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <saveNewPass>
	DDRD |= (1<< MOTOR_IN1) | (1<< MOTOR_IN2) | (1<< MOTOR_EN1);

	saveNewPass();
	//confirmPass();

	while (confirmPass() == CONFIRMATION_FAILED)
    1f02:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <confirmPass>
    1f06:	88 23       	and	r24, r24
    1f08:	d1 f3       	breq	.-12     	; 0x1efe <main+0x66>
		//confirmPass();
	}

	while(1)
	{
		key = UART_receiveByte();
    1f0a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UART_receiveByte>
    1f0e:	80 93 9a 00 	sts	0x009A, r24
		if(key == '+')
    1f12:	80 91 9a 00 	lds	r24, 0x009A
    1f16:	8b 32       	cpi	r24, 0x2B	; 43
    1f18:	c1 f7       	brne	.-16     	; 0x1f0a <main+0x72>
    1f1a:	10 c0       	rjmp	.+32     	; 0x1f3c <main+0xa4>
		{
			while (confirmPass() == CONFIRMATION_FAILED)
			{
#if 1
				wrongPassCounter++;
    1f1c:	80 91 9b 00 	lds	r24, 0x009B
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	80 93 9b 00 	sts	0x009B, r24
				if(wrongPassCounter == WRONG_PASS_MAX)
    1f26:	80 91 9b 00 	lds	r24, 0x009B
    1f2a:	83 30       	cpi	r24, 0x03	; 3
    1f2c:	39 f4       	brne	.+14     	; 0x1f3c <main+0xa4>
				{
					if(UART_receiveByte() == 'A')
    1f2e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UART_receiveByte>
    1f32:	81 34       	cpi	r24, 0x41	; 65
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <main+0xa4>
					{
						alarmStart();
    1f36:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <alarmStart>
    1f3a:	ff cf       	rjmp	.-2      	; 0x1f3a <main+0xa2>
	while(1)
	{
		key = UART_receiveByte();
		if(key == '+')
		{
			while (confirmPass() == CONFIRMATION_FAILED)
    1f3c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <confirmPass>
    1f40:	88 23       	and	r24, r24
    1f42:	61 f3       	breq	.-40     	; 0x1f1c <main+0x84>
    1f44:	e2 cf       	rjmp	.-60     	; 0x1f0a <main+0x72>

00001f46 <__udivmodsi4>:
    1f46:	a1 e2       	ldi	r26, 0x21	; 33
    1f48:	1a 2e       	mov	r1, r26
    1f4a:	aa 1b       	sub	r26, r26
    1f4c:	bb 1b       	sub	r27, r27
    1f4e:	fd 01       	movw	r30, r26
    1f50:	0d c0       	rjmp	.+26     	; 0x1f6c <__udivmodsi4_ep>

00001f52 <__udivmodsi4_loop>:
    1f52:	aa 1f       	adc	r26, r26
    1f54:	bb 1f       	adc	r27, r27
    1f56:	ee 1f       	adc	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	a2 17       	cp	r26, r18
    1f5c:	b3 07       	cpc	r27, r19
    1f5e:	e4 07       	cpc	r30, r20
    1f60:	f5 07       	cpc	r31, r21
    1f62:	20 f0       	brcs	.+8      	; 0x1f6c <__udivmodsi4_ep>
    1f64:	a2 1b       	sub	r26, r18
    1f66:	b3 0b       	sbc	r27, r19
    1f68:	e4 0b       	sbc	r30, r20
    1f6a:	f5 0b       	sbc	r31, r21

00001f6c <__udivmodsi4_ep>:
    1f6c:	66 1f       	adc	r22, r22
    1f6e:	77 1f       	adc	r23, r23
    1f70:	88 1f       	adc	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	1a 94       	dec	r1
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <__udivmodsi4_loop>
    1f78:	60 95       	com	r22
    1f7a:	70 95       	com	r23
    1f7c:	80 95       	com	r24
    1f7e:	90 95       	com	r25
    1f80:	9b 01       	movw	r18, r22
    1f82:	ac 01       	movw	r20, r24
    1f84:	bd 01       	movw	r22, r26
    1f86:	cf 01       	movw	r24, r30
    1f88:	08 95       	ret

00001f8a <__prologue_saves__>:
    1f8a:	2f 92       	push	r2
    1f8c:	3f 92       	push	r3
    1f8e:	4f 92       	push	r4
    1f90:	5f 92       	push	r5
    1f92:	6f 92       	push	r6
    1f94:	7f 92       	push	r7
    1f96:	8f 92       	push	r8
    1f98:	9f 92       	push	r9
    1f9a:	af 92       	push	r10
    1f9c:	bf 92       	push	r11
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	ca 1b       	sub	r28, r26
    1fb4:	db 0b       	sbc	r29, r27
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	09 94       	ijmp

00001fc2 <__epilogue_restores__>:
    1fc2:	2a 88       	ldd	r2, Y+18	; 0x12
    1fc4:	39 88       	ldd	r3, Y+17	; 0x11
    1fc6:	48 88       	ldd	r4, Y+16	; 0x10
    1fc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fce:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fd4:	b9 84       	ldd	r11, Y+9	; 0x09
    1fd6:	c8 84       	ldd	r12, Y+8	; 0x08
    1fd8:	df 80       	ldd	r13, Y+7	; 0x07
    1fda:	ee 80       	ldd	r14, Y+6	; 0x06
    1fdc:	fd 80       	ldd	r15, Y+5	; 0x05
    1fde:	0c 81       	ldd	r16, Y+4	; 0x04
    1fe0:	1b 81       	ldd	r17, Y+3	; 0x03
    1fe2:	aa 81       	ldd	r26, Y+2	; 0x02
    1fe4:	b9 81       	ldd	r27, Y+1	; 0x01
    1fe6:	ce 0f       	add	r28, r30
    1fe8:	d1 1d       	adc	r29, r1
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	ed 01       	movw	r28, r26
    1ff6:	08 95       	ret

00001ff8 <_exit>:
    1ff8:	f8 94       	cli

00001ffa <__stop_program>:
    1ffa:	ff cf       	rjmp	.-2      	; 0x1ffa <__stop_program>
