/*
 * I2C.c
 *
 *  Created on: 26 Sep 2019
 *      Author: Home
 */


#include "I2C.h"

/*------------------------------------------
 * [Function Name]: TWI_init
 * [Description]: Initializes the TWI
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 -------------------------------------------*/
void TWI_init(const Twi_ConfigType* ConfigPtr)
{
	/*
	 * ****************************************
	 * - set SCL frequency: TWBR
	 *
	 * - enable acknowledge bit: TWEA
	 * - enable TWI interface: TWEN
	 * - enable module interrupt in case you are not using polling: TWIE
	 *
	 * - set the prescaler: TWPS
	 *
	 * - set its own slave address: TWA
	 * - enable/ disable recognition to general calls: TWGCE
	 * ****************************************
	 */

	/*Enable TWI interface, Acknowledge*/
	TWCR |= (1<<TWEN) | (1<<TWEA);

	/*Set the TWI own address*/
	TWAR = (TWAR & 0x01) | (ConfigPtr->twi_address << 1);

	/*Configure the behavior on general calls*/
	TWAR |= ConfigPtr->e_twi_general_call_recognition;

	/*Set the prescaler (writes to TWPS bits)*/
	TWSR = (TWSR & 0xFC) | (TWI_PRESCALER_BITS);

	/*Set SCL frequency (writes to TWBR register)*/
	SET_SCL(ConfigPtr->SCL_freq_Hz);
}


/*------------------------------------------
 * [Function Name]: TWI_start
 * [Description]: Transmits the start/ repeated start condition
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 -------------------------------------------*/
void TWI_start()
{
	/*************************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 1		 0		 X		 1		0	 X
	 *************************/

	/*generate the START condition to claim the bus*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);

	/*Wait until TWINT flag is set. TWINT will be set after successful transmission of the START condition*/
	while(BIT_IS_CLEAR(TWCR, TWINT));

	/*TWSTA would be cleared at the beginning of the other functions (it should be cleared after transmission of START condition since it is not cleared automatically),
	 *so there is no need to clear it here.
	 */
	//TWCR &= ~(1<<TWSTA);
}



/*------------------------------------------
 * [Function Name]: TWI_write
 * [Description]: Transmits a byte
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 -------------------------------------------*/
void TWI_write(const uint8 byte_to_write) /*const since the function shouldn't try to alter the value*/
{
	/*write the data/SLA to the data register TWDR to be transmitted*/
	TWDR = byte_to_write;

	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 0		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);

	/*wait until TWINT indicates successful transmission of SLA+W*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
}

/*------------------------------------------
 * [Function Name]: TWI_readWithACK
 * [Description]: Receives a byte and sends back an acknowledge bit
 * [Args]: None
 * [Return]: Received byte
 -------------------------------------------*/
uint8 TWI_readWithACK()
{
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 1		 0		 0		 X		 1		0	 X
	 *
	 * 	Setting TWINT clears the flag
	 * 	Setting TWEA generates the ACK pulse when data is received
	 * 	Setting TWEN enables TWI
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);

	/*wait until the byte is received (TWINT flag is set), then send ACK*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );

	/*return the received byte*/
	return TWDR;
}

/*------------------------------------------
 * [Function Name]: TWI_readWithNACK
 * [Description]: Receives a byte without sending back an acknowledge bit
 * [Args]: None
 * [Return]: Received byte
 -------------------------------------------*/
uint8 TWI_readWithNACK()
{
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 0		 0		 0		 X		 1		0	 X
	 *
	 *	Setting TWINT clears the flag
	 * 	Clearing TWEA suppresses the generation of the ACK pulse when data is received
	 * 	Setting TWEN enables TWI
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);

	/*Wait until the byte is received. No ACK would be sent*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );

	/*Return the received byte*/
	return TWDR;
}

/*------------------------------------------
 * [Function Name]: TWI_stop
 * [Description]: Transmits a STOP condition
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void TWI_stop()
{
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 1		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);

	/*TWINT flag is not set after the transmission of a STOP condition --> DON'T USE POLLING*/
}
