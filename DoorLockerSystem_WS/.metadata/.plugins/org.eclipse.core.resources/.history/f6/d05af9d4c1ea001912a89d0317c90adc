/*
 *
 *	Name		: control_ecu_functions.c
 *	Author		: Reem Muhammad
 *	Description	: Source file for the main application (Control ECU)
 *  Created on	: 6 Oct 2019
 *
 */


#include "control_ecu_functions.h"

/*------------------------------------------
 * [Function Name]: doorOpen
 * [Description]: rotates the motor CW to open the door for 15 seconds
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void doorOpen()
{
	/*rotate the motor CW*/
	SET_BIT(MOTOR_DRIVER_PORT, MOTOR_IN1);
	CLEAR_BIT(MOTOR_DRIVER_PORT, MOTOR_IN2);
	SET_BIT(MOTOR_DRIVER_PORT, MOTOR_EN1);
	_delay_ms(10000);
	/*stop the motor*/
	CLEAR_BIT(MOTOR_DRIVER_PORT, MOTOR_EN1);

}

/*------------------------------------------
 * [Function Name]: doorClose
 * [Description]: rotates the motor CCW to close the door for 15 seconds, then stops the motor
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void doorClose()
{
	/*rotate the motor CCW*/
	CLEAR_BIT(MOTOR_DRIVER_PORT, MOTOR_IN1);
	SET_BIT(MOTOR_DRIVER_PORT, MOTOR_IN2);
	SET_BIT(MOTOR_DRIVER_PORT, MOTOR_EN1);
	_delay_ms(10000);
	/*stop the motor*/
	CLEAR_BIT(MOTOR_DRIVER_PORT, MOTOR_EN1);
}

/*------------------------------------------
 * [Function Name]: saveNewPass
 * [Description]: saves a new password in the EEPROM
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void saveNewPass()
{
	/*============REMOVE===================*/
	LCD_goToRowCol(0,0);
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
	{
		data_buffer[i] = UART_receiveByte();
		LCD_displayInt(data_buffer[i]);
	}
	/*======================================*/

	Eep_Write(0, data_buffer, PASSWORD_LENGTH);
}


/*------------------------------------------
 * [Function Name]: confirmPass
 * [Description]: Sends the confirmation password to the control ECU to be compared with the saved one
 * [Args]: None
 * [Return]: None
--------------------------------------------*/
void confirmPass()
{

	/*receive the confirmation password entered by the user*/
	LCD_goToRowCol(1,0);
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
	{
		confirm_buffer[i] = UART_receiveByte();
		LCD_displayInt(confirm_buffer[i]);	//==========REMOVE===========
	}

	/*read the saved password from the EEPROM*/
	Eep_Read(0, data_buffer, PASSWORD_LENGTH);

	/*Compare the confirmation password to the saved one*/
	for(uint8 i = 0; i<PASSWORD_LENGTH; i++)
	{
		/*Send CONFIRMATION_FAILED to HMI ECU in case of password mismatch*/
		if (confirm_buffer[i] != data_buffer[i])
		{
			UART_sendByte(CONFIRMATION_FAILED);
			return;
		}
	}
	UART_sendByte(CONFIRMATION_PASSED);

}


/*------------------------------------------
 * [Function Name]: alarmStart
 * [Description]: Starts an alarm for the period specified by counterTop and n_ticksRequired
 * [Args]:
* 		counterTop: TOP value to be compared with the counter value.
 * 		n_ticksRequired: Number of ticks required to count the required time, given the specified counterTop.
 * [Return]: None
 -------------------------------------------*/
void alarmStart(uint16 counterTop, uint8 n_ticksRequired)
{
	/*Set the callback function*/
	Ocu_setCbk(alarmStop);

	/*Set the buzzer to ON state*/
	CLEAR_BIT(BUZZER_PORT, BUZZER);
	LCD_displayString("ALARM"); //=====================REMOVE===================

	/*start the timer*/
	Ocu_start(counterTop, n_ticksRequired);  //==========> [BUG#1]
}


/*------------------------------------------
 * [Function Name]: alarmStop
 * [Description]: a callback function that is executed when a specified time period has passed
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void alarmStop()
{
	/*Set the buzzer to OFF state*/
	SET_BIT(BUZZER_PORT, BUZZER);
	LCD_displayString("STOPPED");  //==============REMOVE=========================

	/*terminate the timer*/
	Ocu_stop();
}
