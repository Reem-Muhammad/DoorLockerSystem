/*
 *
 *	Name		: Ocu.c
 *	Author		: Reem Muhammad
 *	Description	: Source file for OCU driver
 *  Created on	: 4 Oct 2019
 *
 */
#include "Ocu.h"

//uint8 g_n_ticksRequired = 0;
//uint8 g_ticksCounter = 0;
Ocu_ValueType g_thresholdCounter = 0;
Ocu_ValueType g_Threshold = 0;


/*pointer to the callback function*/
void (*g_Ocu_cbkPtr)() = NULL_PTR;


/*-------------------------------------------------------------
 * [Function Name]: Ocu_init
 * [Description]: initializes the output compare unit
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_init(const Ocu_ConfigType *ConfigPtr)
{
	OCR1A = TICK;	/*Generates an interrupt every 1ms (sets the resolution)*/
	/*Set FOC1 for non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
	//SET_BIT(TCCR1A, FOC1B);

	/*set the source for max counter value to be OCR1A register: WGM13:0 -> 0 1 0 0 */
	TCCR1B |= (1<<WGM12);
}


/*-------------------------------------------------------------
 * [Function Name]: Ocu_setCbk
 * [Description]: Registers the callback function
 * [Args]:
 * 		cbkPtr: pointer to callback function
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_setCbk( void (*cbkPtr)(void) )
{
	g_Ocu_cbkPtr = cbkPtr;
}

/*-------------------------------------------------------------
 * [Function Name]: Ocu_SetPinAction
 * [Description]: Sets the automatic action to be performed on compare match
 * [Args]:
 * 		PinAction: action to be performed
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_SetPinAction(Ocu_PinActionType PinAction)
{
	/*set OC1A behavior on compare match*/
	TCCR1A = (TCCR1A & 0x3F) | (PinAction << 6);
	//TCCR1A = (TCCR1A & 0xCF) | (ConfigPtr->e_ocu_pinAction << 4);	/*set OC1B behavior*/
}

/*-------------------------------------------------------------
 * [Function Name]: Ocu_start
 * [Description]: Starts the timer
 * [Args]:
 * 		Threshold: time in ticks (tick: resolution of 1 count)
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_start(Ocu_ValueType Threshold)
{
	/*Store the threshold value in a global variable so it's accessible by the ISR*/
	g_Threshold = Threshold;

	/*Configure the prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | (OCU_PRESCALER_8);

	/*set the number of ticks required before notifying the callback. this value will be used by the ISR*/
	//g_n_ticksRequired = TimerSettingsPtr->n_ticksRequired;

	/*enable module interrupt*/
	SET_BIT(TIMSK, OCIE1A);

	/*counter starts from 0*/
	TCNT1 = 0;

	/*counts to counterTop*/
	//OCR1A = TimerSettingsPtr->counterTop; //--> set in init()


}

/*-------------------------------------------------------------
 * [Function Name]: Ocu_stop
 * [Description]: Stops the timer
 * [Args]: None
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_stop(void)
{
	/*Disable module interrupt*/
	CLEAR_BIT(TIMSK, OCIE1A);
}


/*-------------------------------------------------------------
 * [Function Name]: Ocu_DeInit
 * [Description]: De-initializes the output compare unit
 * [Args]: None
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_deInit(void)
{
	/*
	 * Restore the altered registers to their initial values
	 */

	CLEAR_BIT(TCCR1A, FOC1A);
	//CLEAR_BIT(TCCR1A, FOC1B);

	OCR1A = 0;
	//OCR1B = 0;

	/*OCU pins disconnected*/
	TCCR1A = (TCCR1A & 0x3F) | (0);

	/*No clock source*/
	TCCR1B &= ~(1<<WGM12);
	TCCR1B = (TCCR1B & 0xF8) | (0);

	/*Disable module interrupt*/
	CLEAR_BIT(TIMSK, OCIE1A);
	//CLEAR_BIT(TIMSK, OCIE1B);
}



/*~~~~~~~~~~~~~~~~~~~ ISR ~~~~~~~~~~~~~~~~~~~~~*/
ISR(TIMER1_COMPA_vect)
{
	g_thresholdCounter++;
	//LCD_goToRowCol(0,8);
	//LCD_displayInt(g_thresholdCounter);
	if(g_thresholdCounter == g_Threshold)
	{
		if(g_Ocu_cbkPtr != NULL_PTR)
		{
			g_Ocu_cbkPtr();
			g_thresholdCounter = 0;
		}
	}
}

#if 0
ISR(TIMER1_COMPB_vect)
{
	g_n_ticksRequired++;
		if(g_n_ticksRequired == 10)
		{
			if(g_Ocu_cbkPtr != NULL_PTR)
			{
				g_Ocu_cbkPtr();
				g_n_ticksRequired = 0;
			}

		}
}
#endif
