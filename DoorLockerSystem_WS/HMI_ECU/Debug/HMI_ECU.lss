
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000345a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  0000345a  000034ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800224  00800224  000036b2  2**0
                  ALLOC
  3 .stab         00002f34  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001282  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000786a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <main>
      8a:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_init>:
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 -------------------------------------------*/
void TWI_init(const Twi_ConfigType* ConfigPtr)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <TWI_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
	 * - enable/ disable recognition to general calls: TWGCE
	 * ****************************************
	 */

	/*Enable TWI interface, Acknowledge*/
	TWCR |= (1<<TWEN) | (1<<TWEA);
     b58:	a6 e5       	ldi	r26, 0x56	; 86
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e6 e5       	ldi	r30, 0x56	; 86
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	84 64       	ori	r24, 0x44	; 68
     b64:	8c 93       	st	X, r24

	/*Set the TWI own address*/
	TWAR = (TWAR & 0x01) | (ConfigPtr->twi_address << 1);
     b66:	a2 e2       	ldi	r26, 0x22	; 34
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e2 e2       	ldi	r30, 0x22	; 34
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	28 2f       	mov	r18, r24
     b72:	21 70       	andi	r18, 0x01	; 1
     b74:	e9 81       	ldd	r30, Y+1	; 0x01
     b76:	fa 81       	ldd	r31, Y+2	; 0x02
     b78:	81 81       	ldd	r24, Z+1	; 0x01
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	82 2b       	or	r24, r18
     b84:	8c 93       	st	X, r24

	/*Configure the behavior on general calls*/
	TWAR |= ConfigPtr->e_twi_general_call_recognition;
     b86:	a2 e2       	ldi	r26, 0x22	; 34
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e2 e2       	ldi	r30, 0x22	; 34
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	90 81       	ld	r25, Z
     b90:	e9 81       	ldd	r30, Y+1	; 0x01
     b92:	fa 81       	ldd	r31, Y+2	; 0x02
     b94:	80 81       	ld	r24, Z
     b96:	89 2b       	or	r24, r25
     b98:	8c 93       	st	X, r24

	/*Set the prescaler (writes to TWPS bits)*/
	TWSR = (TWSR & 0xFC) | (TWI_PRESCALER_BITS);
     b9a:	a1 e2       	ldi	r26, 0x21	; 33
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e1 e2       	ldi	r30, 0x21	; 33
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	8c 7f       	andi	r24, 0xFC	; 252
     ba6:	8c 93       	st	X, r24

	/*Set SCL frequency (writes to TWBR register)*/
	SET_SCL(ConfigPtr->SCL_freq_Hz);
     ba8:	00 e2       	ldi	r16, 0x20	; 32
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	22 81       	ldd	r18, Z+2	; 0x02
     bb2:	33 81       	ldd	r19, Z+3	; 0x03
     bb4:	44 81       	ldd	r20, Z+4	; 0x04
     bb6:	55 81       	ldd	r21, Z+5	; 0x05
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	92 e1       	ldi	r25, 0x12	; 18
     bbc:	aa e7       	ldi	r26, 0x7A	; 122
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__udivmodsi4>
     bc8:	da 01       	movw	r26, r20
     bca:	c9 01       	movw	r24, r18
     bcc:	40 97       	sbiw	r24, 0x10	; 16
     bce:	a1 09       	sbc	r26, r1
     bd0:	b1 09       	sbc	r27, r1
     bd2:	b6 95       	lsr	r27
     bd4:	a7 95       	ror	r26
     bd6:	97 95       	ror	r25
     bd8:	87 95       	ror	r24
     bda:	f8 01       	movw	r30, r16
     bdc:	80 83       	st	Z, r24
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <TWI_start>:
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 -------------------------------------------*/
void TWI_start()
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 1		 0		 X		 1		0	 X
	 *************************/

	/*generate the START condition to claim the bus*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     bf4:	e6 e5       	ldi	r30, 0x56	; 86
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	84 ea       	ldi	r24, 0xA4	; 164
     bfa:	80 83       	st	Z, r24

	/*Wait until TWINT flag is set. TWINT will be set after successful transmission of the START condition*/
	while(BIT_IS_CLEAR(TWCR, TWINT));
     bfc:	e6 e5       	ldi	r30, 0x56	; 86
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	88 23       	and	r24, r24
     c04:	dc f7       	brge	.-10     	; 0xbfc <TWI_start+0x10>

	/*TWSTA would be cleared at the beginning of the other functions (it should be cleared after transmission of START condition since it is not cleared automatically),
	 *so there is no need to clear it here.
	 */
	//TWCR &= ~(1<<TWSTA);
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TWI_write>:
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 -------------------------------------------*/
void TWI_write(const uint8 byte_to_write) /*const since the function shouldn't try to alter the value*/
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	89 83       	std	Y+1, r24	; 0x01
	/*write the data/SLA to the data register TWDR to be transmitted*/
	TWDR = byte_to_write;
     c18:	e3 e2       	ldi	r30, 0x23	; 35
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	80 83       	st	Z, r24
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 0		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);
     c20:	e6 e5       	ldi	r30, 0x56	; 86
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	84 e8       	ldi	r24, 0x84	; 132
     c26:	80 83       	st	Z, r24

	/*wait until TWINT indicates successful transmission of SLA+W*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c28:	e6 e5       	ldi	r30, 0x56	; 86
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	dc f7       	brge	.-10     	; 0xc28 <TWI_write+0x1c>
}
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <TWI_readWithACK>:
 * [Description]: Receives a byte and sends back an acknowledge bit
 * [Args]: None
 * [Return]: Received byte
 -------------------------------------------*/
uint8 TWI_readWithACK()
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	 *
	 * 	Setting TWINT clears the flag
	 * 	Setting TWEA generates the ACK pulse when data is received
	 * 	Setting TWEN enables TWI
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     c42:	e6 e5       	ldi	r30, 0x56	; 86
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	84 ec       	ldi	r24, 0xC4	; 196
     c48:	80 83       	st	Z, r24

	/*wait until the byte is received (TWINT flag is set), then send ACK*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c4a:	e6 e5       	ldi	r30, 0x56	; 86
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	88 23       	and	r24, r24
     c52:	dc f7       	brge	.-10     	; 0xc4a <TWI_readWithACK+0x10>

	/*return the received byte*/
	return TWDR;
     c54:	e3 e2       	ldi	r30, 0x23	; 35
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <TWI_readWithNACK>:
 * [Description]: Receives a byte without sending back an acknowledge bit
 * [Args]: None
 * [Return]: Received byte
 -------------------------------------------*/
uint8 TWI_readWithNACK()
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	 *
	 *	Setting TWINT clears the flag
	 * 	Clearing TWEA suppresses the generation of the ACK pulse when data is received
	 * 	Setting TWEN enables TWI
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);
     c68:	e6 e5       	ldi	r30, 0x56	; 86
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	84 e8       	ldi	r24, 0x84	; 132
     c6e:	80 83       	st	Z, r24

	/*Wait until the byte is received. No ACK would be sent*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c70:	e6 e5       	ldi	r30, 0x56	; 86
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	88 23       	and	r24, r24
     c78:	dc f7       	brge	.-10     	; 0xc70 <TWI_readWithNACK+0x10>

	/*Return the received byte*/
	return TWDR;
     c7a:	e3 e2       	ldi	r30, 0x23	; 35
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <TWI_stop>:
 * [Description]: Transmits a STOP condition
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void TWI_stop()
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 1		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     c8e:	e6 e5       	ldi	r30, 0x56	; 86
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	84 e9       	ldi	r24, 0x94	; 148
     c94:	80 83       	st	Z, r24

	/*TWINT flag is not set after the transmission of a STOP condition --> DON'T USE POLLING*/
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <LCD_sendCommand>:
 * [Args]:
 * 		command: command to be sent
 * [Return]: None
 -----------------------------------------*/
void LCD_sendCommand(uint8 command)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	e9 97       	sbiw	r28, 0x39	; 57
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	89 af       	std	Y+57, r24	; 0x39
	/*clear RS to transfer instruction data*/
	CLEAR_BIT(CTRL_PORT_OUT, RS);
     cb2:	a5 e3       	ldi	r26, 0x35	; 53
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e5 e3       	ldi	r30, 0x35	; 53
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	8c 93       	st	X, r24

	/*Select write mode*/
	CLEAR_BIT(CTRL_PORT_OUT, R_W);
     cc0:	a5 e3       	ldi	r26, 0x35	; 53
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e5 e3       	ldi	r30, 0x35	; 53
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	8c 93       	st	X, r24
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a0 e8       	ldi	r26, 0x80	; 128
     cd4:	bf e3       	ldi	r27, 0x3F	; 63
     cd6:	8d ab       	std	Y+53, r24	; 0x35
     cd8:	9e ab       	std	Y+54, r25	; 0x36
     cda:	af ab       	std	Y+55, r26	; 0x37
     cdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cde:	6d a9       	ldd	r22, Y+53	; 0x35
     ce0:	7e a9       	ldd	r23, Y+54	; 0x36
     ce2:	8f a9       	ldd	r24, Y+55	; 0x37
     ce4:	98 ad       	ldd	r25, Y+56	; 0x38
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a ef       	ldi	r20, 0xFA	; 250
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	89 ab       	std	Y+49, r24	; 0x31
     cf8:	9a ab       	std	Y+50, r25	; 0x32
     cfa:	ab ab       	std	Y+51, r26	; 0x33
     cfc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cfe:	69 a9       	ldd	r22, Y+49	; 0x31
     d00:	7a a9       	ldd	r23, Y+50	; 0x32
     d02:	8b a9       	ldd	r24, Y+51	; 0x33
     d04:	9c a9       	ldd	r25, Y+52	; 0x34
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d12:	88 23       	and	r24, r24
     d14:	2c f4       	brge	.+10     	; 0xd20 <LCD_sendCommand+0x84>
		__ticks = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	98 ab       	std	Y+48, r25	; 0x30
     d1c:	8f a7       	std	Y+47, r24	; 0x2f
     d1e:	3f c0       	rjmp	.+126    	; 0xd9e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     d20:	69 a9       	ldd	r22, Y+49	; 0x31
     d22:	7a a9       	ldd	r23, Y+50	; 0x32
     d24:	8b a9       	ldd	r24, Y+51	; 0x33
     d26:	9c a9       	ldd	r25, Y+52	; 0x34
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	4c f5       	brge	.+82     	; 0xd8a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d38:	6d a9       	ldd	r22, Y+53	; 0x35
     d3a:	7e a9       	ldd	r23, Y+54	; 0x36
     d3c:	8f a9       	ldd	r24, Y+55	; 0x37
     d3e:	98 ad       	ldd	r25, Y+56	; 0x38
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e2       	ldi	r20, 0x20	; 32
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	98 ab       	std	Y+48, r25	; 0x30
     d5e:	8f a7       	std	Y+47, r24	; 0x2f
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <LCD_sendCommand+0xe4>
     d62:	88 ec       	ldi	r24, 0xC8	; 200
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9e a7       	std	Y+46, r25	; 0x2e
     d68:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d6c:	9e a5       	ldd	r25, Y+46	; 0x2e
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <LCD_sendCommand+0xd2>
     d72:	9e a7       	std	Y+46, r25	; 0x2e
     d74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d76:	8f a5       	ldd	r24, Y+47	; 0x2f
     d78:	98 a9       	ldd	r25, Y+48	; 0x30
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	98 ab       	std	Y+48, r25	; 0x30
     d7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d80:	8f a5       	ldd	r24, Y+47	; 0x2f
     d82:	98 a9       	ldd	r25, Y+48	; 0x30
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	69 f7       	brne	.-38     	; 0xd62 <LCD_sendCommand+0xc6>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8a:	69 a9       	ldd	r22, Y+49	; 0x31
     d8c:	7a a9       	ldd	r23, Y+50	; 0x32
     d8e:	8b a9       	ldd	r24, Y+51	; 0x33
     d90:	9c a9       	ldd	r25, Y+52	; 0x34
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	98 ab       	std	Y+48, r25	; 0x30
     d9c:	8f a7       	std	Y+47, r24	; 0x2f
     d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     da0:	98 a9       	ldd	r25, Y+48	; 0x30
     da2:	9c a7       	std	Y+44, r25	; 0x2c
     da4:	8b a7       	std	Y+43, r24	; 0x2b
     da6:	8b a5       	ldd	r24, Y+43	; 0x2b
     da8:	9c a5       	ldd	r25, Y+44	; 0x2c
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <LCD_sendCommand+0x10e>
     dae:	9c a7       	std	Y+44, r25	; 0x2c
     db0:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait at least 50ns (tas)*/
	_delay_ms(1);

	/*enable the LCD*/
	SET_BIT(CTRL_PORT_OUT, EN);
     db2:	a5 e3       	ldi	r26, 0x35	; 53
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e5 e3       	ldi	r30, 0x35	; 53
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	84 60       	ori	r24, 0x04	; 4
     dbe:	8c 93       	st	X, r24
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e8       	ldi	r26, 0x80	; 128
     dc6:	bf e3       	ldi	r27, 0x3F	; 63
     dc8:	8f a3       	std	Y+39, r24	; 0x27
     dca:	98 a7       	std	Y+40, r25	; 0x28
     dcc:	a9 a7       	std	Y+41, r26	; 0x29
     dce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd0:	6f a1       	ldd	r22, Y+39	; 0x27
     dd2:	78 a5       	ldd	r23, Y+40	; 0x28
     dd4:	89 a5       	ldd	r24, Y+41	; 0x29
     dd6:	9a a5       	ldd	r25, Y+42	; 0x2a
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a ef       	ldi	r20, 0xFA	; 250
     dde:	54 e4       	ldi	r21, 0x44	; 68
     de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	8b a3       	std	Y+35, r24	; 0x23
     dea:	9c a3       	std	Y+36, r25	; 0x24
     dec:	ad a3       	std	Y+37, r26	; 0x25
     dee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     df0:	6b a1       	ldd	r22, Y+35	; 0x23
     df2:	7c a1       	ldd	r23, Y+36	; 0x24
     df4:	8d a1       	ldd	r24, Y+37	; 0x25
     df6:	9e a1       	ldd	r25, Y+38	; 0x26
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e04:	88 23       	and	r24, r24
     e06:	2c f4       	brge	.+10     	; 0xe12 <LCD_sendCommand+0x176>
		__ticks = 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	9a a3       	std	Y+34, r25	; 0x22
     e0e:	89 a3       	std	Y+33, r24	; 0x21
     e10:	3f c0       	rjmp	.+126    	; 0xe90 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     e12:	6b a1       	ldd	r22, Y+35	; 0x23
     e14:	7c a1       	ldd	r23, Y+36	; 0x24
     e16:	8d a1       	ldd	r24, Y+37	; 0x25
     e18:	9e a1       	ldd	r25, Y+38	; 0x26
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	3f ef       	ldi	r19, 0xFF	; 255
     e1e:	4f e7       	ldi	r20, 0x7F	; 127
     e20:	57 e4       	ldi	r21, 0x47	; 71
     e22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e26:	18 16       	cp	r1, r24
     e28:	4c f5       	brge	.+82     	; 0xe7c <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2a:	6f a1       	ldd	r22, Y+39	; 0x27
     e2c:	78 a5       	ldd	r23, Y+40	; 0x28
     e2e:	89 a5       	ldd	r24, Y+41	; 0x29
     e30:	9a a5       	ldd	r25, Y+42	; 0x2a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e2       	ldi	r20, 0x20	; 32
     e38:	51 e4       	ldi	r21, 0x41	; 65
     e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	bc 01       	movw	r22, r24
     e44:	cd 01       	movw	r24, r26
     e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	9a a3       	std	Y+34, r25	; 0x22
     e50:	89 a3       	std	Y+33, r24	; 0x21
     e52:	0f c0       	rjmp	.+30     	; 0xe72 <LCD_sendCommand+0x1d6>
     e54:	88 ec       	ldi	r24, 0xC8	; 200
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	98 a3       	std	Y+32, r25	; 0x20
     e5a:	8f 8f       	std	Y+31, r24	; 0x1f
     e5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e5e:	98 a1       	ldd	r25, Y+32	; 0x20
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <LCD_sendCommand+0x1c4>
     e64:	98 a3       	std	Y+32, r25	; 0x20
     e66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e68:	89 a1       	ldd	r24, Y+33	; 0x21
     e6a:	9a a1       	ldd	r25, Y+34	; 0x22
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	9a a3       	std	Y+34, r25	; 0x22
     e70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e72:	89 a1       	ldd	r24, Y+33	; 0x21
     e74:	9a a1       	ldd	r25, Y+34	; 0x22
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	69 f7       	brne	.-38     	; 0xe54 <LCD_sendCommand+0x1b8>
     e7a:	14 c0       	rjmp	.+40     	; 0xea4 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7c:	6b a1       	ldd	r22, Y+35	; 0x23
     e7e:	7c a1       	ldd	r23, Y+36	; 0x24
     e80:	8d a1       	ldd	r24, Y+37	; 0x25
     e82:	9e a1       	ldd	r25, Y+38	; 0x26
     e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	9a a3       	std	Y+34, r25	; 0x22
     e8e:	89 a3       	std	Y+33, r24	; 0x21
     e90:	89 a1       	ldd	r24, Y+33	; 0x21
     e92:	9a a1       	ldd	r25, Y+34	; 0x22
     e94:	9e 8f       	std	Y+30, r25	; 0x1e
     e96:	8d 8f       	std	Y+29, r24	; 0x1d
     e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <LCD_sendCommand+0x200>
     ea0:	9e 8f       	std	Y+30, r25	; 0x1e
     ea2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait at least (tpw - tdsw)ns before sending the command*/
	_delay_ms(1);

#if N_BIT_INTERFACE == 8
	/*send the command*/
	DATA_PORT_OUT = command;
     ea4:	eb e3       	ldi	r30, 0x3B	; 59
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	89 ad       	ldd	r24, Y+57	; 0x39
     eaa:	80 83       	st	Z, r24
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e8       	ldi	r26, 0x80	; 128
     eb2:	bf e3       	ldi	r27, 0x3F	; 63
     eb4:	89 8f       	std	Y+25, r24	; 0x19
     eb6:	9a 8f       	std	Y+26, r25	; 0x1a
     eb8:	ab 8f       	std	Y+27, r26	; 0x1b
     eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebc:	69 8d       	ldd	r22, Y+25	; 0x19
     ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a ef       	ldi	r20, 0xFA	; 250
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8d 8b       	std	Y+21, r24	; 0x15
     ed6:	9e 8b       	std	Y+22, r25	; 0x16
     ed8:	af 8b       	std	Y+23, r26	; 0x17
     eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     edc:	6d 89       	ldd	r22, Y+21	; 0x15
     ede:	7e 89       	ldd	r23, Y+22	; 0x16
     ee0:	8f 89       	ldd	r24, Y+23	; 0x17
     ee2:	98 8d       	ldd	r25, Y+24	; 0x18
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <LCD_sendCommand+0x262>
		__ticks = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 8b       	std	Y+20, r25	; 0x14
     efa:	8b 8b       	std	Y+19, r24	; 0x13
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     efe:	6d 89       	ldd	r22, Y+21	; 0x15
     f00:	7e 89       	ldd	r23, Y+22	; 0x16
     f02:	8f 89       	ldd	r24, Y+23	; 0x17
     f04:	98 8d       	ldd	r25, Y+24	; 0x18
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	57 e4       	ldi	r21, 0x47	; 71
     f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f12:	18 16       	cp	r1, r24
     f14:	4c f5       	brge	.+82     	; 0xf68 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f16:	69 8d       	ldd	r22, Y+25	; 0x19
     f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9c 8b       	std	Y+20, r25	; 0x14
     f3c:	8b 8b       	std	Y+19, r24	; 0x13
     f3e:	0f c0       	rjmp	.+30     	; 0xf5e <LCD_sendCommand+0x2c2>
     f40:	88 ec       	ldi	r24, 0xC8	; 200
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9a 8b       	std	Y+18, r25	; 0x12
     f46:	89 8b       	std	Y+17, r24	; 0x11
     f48:	89 89       	ldd	r24, Y+17	; 0x11
     f4a:	9a 89       	ldd	r25, Y+18	; 0x12
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <LCD_sendCommand+0x2b0>
     f50:	9a 8b       	std	Y+18, r25	; 0x12
     f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	8b 89       	ldd	r24, Y+19	; 0x13
     f56:	9c 89       	ldd	r25, Y+20	; 0x14
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9c 8b       	std	Y+20, r25	; 0x14
     f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	8b 89       	ldd	r24, Y+19	; 0x13
     f60:	9c 89       	ldd	r25, Y+20	; 0x14
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	69 f7       	brne	.-38     	; 0xf40 <LCD_sendCommand+0x2a4>
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	6d 89       	ldd	r22, Y+21	; 0x15
     f6a:	7e 89       	ldd	r23, Y+22	; 0x16
     f6c:	8f 89       	ldd	r24, Y+23	; 0x17
     f6e:	98 8d       	ldd	r25, Y+24	; 0x18
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	98 8b       	std	Y+16, r25	; 0x10
     f82:	8f 87       	std	Y+15, r24	; 0x0f
     f84:	8f 85       	ldd	r24, Y+15	; 0x0f
     f86:	98 89       	ldd	r25, Y+16	; 0x10
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <LCD_sendCommand+0x2ec>
     f8c:	98 8b       	std	Y+16, r25	; 0x10
     f8e:	8f 87       	std	Y+15, r24	; 0x0f

	/*wait at least (tdsw)ns before clearing the enable line*/
	_delay_ms(1);

	/*disable the LCD*/
	CLEAR_BIT(CTRL_PORT_OUT, EN);
     f90:	a5 e3       	ldi	r26, 0x35	; 53
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e3       	ldi	r30, 0x35	; 53
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8b 7f       	andi	r24, 0xFB	; 251
     f9c:	8c 93       	st	X, r24
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a0 e8       	ldi	r26, 0x80	; 128
     fa4:	bf e3       	ldi	r27, 0x3F	; 63
     fa6:	8b 87       	std	Y+11, r24	; 0x0b
     fa8:	9c 87       	std	Y+12, r25	; 0x0c
     faa:	ad 87       	std	Y+13, r26	; 0x0d
     fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a ef       	ldi	r20, 0xFA	; 250
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8f 83       	std	Y+7, r24	; 0x07
     fc8:	98 87       	std	Y+8, r25	; 0x08
     fca:	a9 87       	std	Y+9, r26	; 0x09
     fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f e3       	ldi	r21, 0x3F	; 63
     fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <LCD_sendCommand+0x354>
		__ticks = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	3f c0       	rjmp	.+126    	; 0x106e <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1004:	18 16       	cp	r1, r24
    1006:	4c f5       	brge	.+82     	; 0x105a <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	6b 85       	ldd	r22, Y+11	; 0x0b
    100a:	7c 85       	ldd	r23, Y+12	; 0x0c
    100c:	8d 85       	ldd	r24, Y+13	; 0x0d
    100e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <LCD_sendCommand+0x3b4>
    1032:	88 ec       	ldi	r24, 0xC8	; 200
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 83       	std	Y+3, r24	; 0x03
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <LCD_sendCommand+0x3a2>
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	69 f7       	brne	.-38     	; 0x1032 <LCD_sendCommand+0x396>
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_sendCommand+0x3de>
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01

	/*Wait at least (th)ns while holding the data on the line after disabling the LCD*/
	_delay_ms(1);

}
    1082:	e9 96       	adiw	r28, 0x39	; 57
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <LCD_displayCharacter>:
 * [Args]:
 * 		character: character to be displayed
 * [Return]: None
 -----------------------------------------*/
void LCD_displayCharacter(uint8 character)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	e9 97       	sbiw	r28, 0x39	; 57
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS to transfer display data*/
	SET_BIT(CTRL_PORT_OUT, RS);
    10aa:	a5 e3       	ldi	r26, 0x35	; 53
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e5 e3       	ldi	r30, 0x35	; 53
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	8c 93       	st	X, r24

	/*Select write mode*/
	CLEAR_BIT(CTRL_PORT_OUT, R_W);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8d 7f       	andi	r24, 0xFD	; 253
    10c4:	8c 93       	st	X, r24
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e8       	ldi	r26, 0x80	; 128
    10cc:	bf e3       	ldi	r27, 0x3F	; 63
    10ce:	8d ab       	std	Y+53, r24	; 0x35
    10d0:	9e ab       	std	Y+54, r25	; 0x36
    10d2:	af ab       	std	Y+55, r26	; 0x37
    10d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6d a9       	ldd	r22, Y+53	; 0x35
    10d8:	7e a9       	ldd	r23, Y+54	; 0x36
    10da:	8f a9       	ldd	r24, Y+55	; 0x37
    10dc:	98 ad       	ldd	r25, Y+56	; 0x38
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	89 ab       	std	Y+49, r24	; 0x31
    10f0:	9a ab       	std	Y+50, r25	; 0x32
    10f2:	ab ab       	std	Y+51, r26	; 0x33
    10f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10f6:	69 a9       	ldd	r22, Y+49	; 0x31
    10f8:	7a a9       	ldd	r23, Y+50	; 0x32
    10fa:	8b a9       	ldd	r24, Y+51	; 0x33
    10fc:	9c a9       	ldd	r25, Y+52	; 0x34
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <LCD_displayCharacter+0x84>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	98 ab       	std	Y+48, r25	; 0x30
    1114:	8f a7       	std	Y+47, r24	; 0x2f
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1118:	69 a9       	ldd	r22, Y+49	; 0x31
    111a:	7a a9       	ldd	r23, Y+50	; 0x32
    111c:	8b a9       	ldd	r24, Y+51	; 0x33
    111e:	9c a9       	ldd	r25, Y+52	; 0x34
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6d a9       	ldd	r22, Y+53	; 0x35
    1132:	7e a9       	ldd	r23, Y+54	; 0x36
    1134:	8f a9       	ldd	r24, Y+55	; 0x37
    1136:	98 ad       	ldd	r25, Y+56	; 0x38
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	98 ab       	std	Y+48, r25	; 0x30
    1156:	8f a7       	std	Y+47, r24	; 0x2f
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_displayCharacter+0xe4>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9e a7       	std	Y+46, r25	; 0x2e
    1160:	8d a7       	std	Y+45, r24	; 0x2d
    1162:	8d a5       	ldd	r24, Y+45	; 0x2d
    1164:	9e a5       	ldd	r25, Y+46	; 0x2e
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_displayCharacter+0xd2>
    116a:	9e a7       	std	Y+46, r25	; 0x2e
    116c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1170:	98 a9       	ldd	r25, Y+48	; 0x30
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	98 ab       	std	Y+48, r25	; 0x30
    1176:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8f a5       	ldd	r24, Y+47	; 0x2f
    117a:	98 a9       	ldd	r25, Y+48	; 0x30
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <LCD_displayCharacter+0xc6>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	69 a9       	ldd	r22, Y+49	; 0x31
    1184:	7a a9       	ldd	r23, Y+50	; 0x32
    1186:	8b a9       	ldd	r24, Y+51	; 0x33
    1188:	9c a9       	ldd	r25, Y+52	; 0x34
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	98 ab       	std	Y+48, r25	; 0x30
    1194:	8f a7       	std	Y+47, r24	; 0x2f
    1196:	8f a5       	ldd	r24, Y+47	; 0x2f
    1198:	98 a9       	ldd	r25, Y+48	; 0x30
    119a:	9c a7       	std	Y+44, r25	; 0x2c
    119c:	8b a7       	std	Y+43, r24	; 0x2b
    119e:	8b a5       	ldd	r24, Y+43	; 0x2b
    11a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_displayCharacter+0x10e>
    11a6:	9c a7       	std	Y+44, r25	; 0x2c
    11a8:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait at least 50ns (address setup time)*/
	_delay_ms(1);

	/*enable the LCD*/
	SET_BIT(CTRL_PORT_OUT, EN);
    11aa:	a5 e3       	ldi	r26, 0x35	; 53
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e5 e3       	ldi	r30, 0x35	; 53
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	8c 93       	st	X, r24
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a0 e8       	ldi	r26, 0x80	; 128
    11be:	bf e3       	ldi	r27, 0x3F	; 63
    11c0:	8f a3       	std	Y+39, r24	; 0x27
    11c2:	98 a7       	std	Y+40, r25	; 0x28
    11c4:	a9 a7       	std	Y+41, r26	; 0x29
    11c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	6f a1       	ldd	r22, Y+39	; 0x27
    11ca:	78 a5       	ldd	r23, Y+40	; 0x28
    11cc:	89 a5       	ldd	r24, Y+41	; 0x29
    11ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	4a ef       	ldi	r20, 0xFA	; 250
    11d6:	54 e4       	ldi	r21, 0x44	; 68
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	8b a3       	std	Y+35, r24	; 0x23
    11e2:	9c a3       	std	Y+36, r25	; 0x24
    11e4:	ad a3       	std	Y+37, r26	; 0x25
    11e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11e8:	6b a1       	ldd	r22, Y+35	; 0x23
    11ea:	7c a1       	ldd	r23, Y+36	; 0x24
    11ec:	8d a1       	ldd	r24, Y+37	; 0x25
    11ee:	9e a1       	ldd	r25, Y+38	; 0x26
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <LCD_displayCharacter+0x176>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9a a3       	std	Y+34, r25	; 0x22
    1206:	89 a3       	std	Y+33, r24	; 0x21
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    120a:	6b a1       	ldd	r22, Y+35	; 0x23
    120c:	7c a1       	ldd	r23, Y+36	; 0x24
    120e:	8d a1       	ldd	r24, Y+37	; 0x25
    1210:	9e a1       	ldd	r25, Y+38	; 0x26
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	4c f5       	brge	.+82     	; 0x1274 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	6f a1       	ldd	r22, Y+39	; 0x27
    1224:	78 a5       	ldd	r23, Y+40	; 0x28
    1226:	89 a5       	ldd	r24, Y+41	; 0x29
    1228:	9a a5       	ldd	r25, Y+42	; 0x2a
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9a a3       	std	Y+34, r25	; 0x22
    1248:	89 a3       	std	Y+33, r24	; 0x21
    124a:	0f c0       	rjmp	.+30     	; 0x126a <LCD_displayCharacter+0x1d6>
    124c:	88 ec       	ldi	r24, 0xC8	; 200
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	98 a3       	std	Y+32, r25	; 0x20
    1252:	8f 8f       	std	Y+31, r24	; 0x1f
    1254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1256:	98 a1       	ldd	r25, Y+32	; 0x20
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCD_displayCharacter+0x1c4>
    125c:	98 a3       	std	Y+32, r25	; 0x20
    125e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	89 a1       	ldd	r24, Y+33	; 0x21
    1262:	9a a1       	ldd	r25, Y+34	; 0x22
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	9a a3       	std	Y+34, r25	; 0x22
    1268:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	89 a1       	ldd	r24, Y+33	; 0x21
    126c:	9a a1       	ldd	r25, Y+34	; 0x22
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	69 f7       	brne	.-38     	; 0x124c <LCD_displayCharacter+0x1b8>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	6b a1       	ldd	r22, Y+35	; 0x23
    1276:	7c a1       	ldd	r23, Y+36	; 0x24
    1278:	8d a1       	ldd	r24, Y+37	; 0x25
    127a:	9e a1       	ldd	r25, Y+38	; 0x26
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9a a3       	std	Y+34, r25	; 0x22
    1286:	89 a3       	std	Y+33, r24	; 0x21
    1288:	89 a1       	ldd	r24, Y+33	; 0x21
    128a:	9a a1       	ldd	r25, Y+34	; 0x22
    128c:	9e 8f       	std	Y+30, r25	; 0x1e
    128e:	8d 8f       	std	Y+29, r24	; 0x1d
    1290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <LCD_displayCharacter+0x200>
    1298:	9e 8f       	std	Y+30, r25	; 0x1e
    129a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait at least (tpw - tdsw)ns before sending the command*/
	_delay_ms(1);

#if N_BIT_INTERFACE == 8
	/*send the command*/
	DATA_PORT_OUT = character;
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	89 ad       	ldd	r24, Y+57	; 0x39
    12a2:	80 83       	st	Z, r24
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e8       	ldi	r26, 0x80	; 128
    12aa:	bf e3       	ldi	r27, 0x3F	; 63
    12ac:	89 8f       	std	Y+25, r24	; 0x19
    12ae:	9a 8f       	std	Y+26, r25	; 0x1a
    12b0:	ab 8f       	std	Y+27, r26	; 0x1b
    12b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	69 8d       	ldd	r22, Y+25	; 0x19
    12b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a ef       	ldi	r20, 0xFA	; 250
    12c2:	54 e4       	ldi	r21, 0x44	; 68
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	8d 8b       	std	Y+21, r24	; 0x15
    12ce:	9e 8b       	std	Y+22, r25	; 0x16
    12d0:	af 8b       	std	Y+23, r26	; 0x17
    12d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12d4:	6d 89       	ldd	r22, Y+21	; 0x15
    12d6:	7e 89       	ldd	r23, Y+22	; 0x16
    12d8:	8f 89       	ldd	r24, Y+23	; 0x17
    12da:	98 8d       	ldd	r25, Y+24	; 0x18
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <LCD_displayCharacter+0x262>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9c 8b       	std	Y+20, r25	; 0x14
    12f2:	8b 8b       	std	Y+19, r24	; 0x13
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    12f6:	6d 89       	ldd	r22, Y+21	; 0x15
    12f8:	7e 89       	ldd	r23, Y+22	; 0x16
    12fa:	8f 89       	ldd	r24, Y+23	; 0x17
    12fc:	98 8d       	ldd	r25, Y+24	; 0x18
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	69 8d       	ldd	r22, Y+25	; 0x19
    1310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	9c 8b       	std	Y+20, r25	; 0x14
    1334:	8b 8b       	std	Y+19, r24	; 0x13
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <LCD_displayCharacter+0x2c2>
    1338:	88 ec       	ldi	r24, 0xC8	; 200
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9a 8b       	std	Y+18, r25	; 0x12
    133e:	89 8b       	std	Y+17, r24	; 0x11
    1340:	89 89       	ldd	r24, Y+17	; 0x11
    1342:	9a 89       	ldd	r25, Y+18	; 0x12
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_displayCharacter+0x2b0>
    1348:	9a 8b       	std	Y+18, r25	; 0x12
    134a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	8b 89       	ldd	r24, Y+19	; 0x13
    134e:	9c 89       	ldd	r25, Y+20	; 0x14
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	9c 8b       	std	Y+20, r25	; 0x14
    1354:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	8b 89       	ldd	r24, Y+19	; 0x13
    1358:	9c 89       	ldd	r25, Y+20	; 0x14
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <LCD_displayCharacter+0x2a4>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	6d 89       	ldd	r22, Y+21	; 0x15
    1362:	7e 89       	ldd	r23, Y+22	; 0x16
    1364:	8f 89       	ldd	r24, Y+23	; 0x17
    1366:	98 8d       	ldd	r25, Y+24	; 0x18
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	9c 8b       	std	Y+20, r25	; 0x14
    1372:	8b 8b       	std	Y+19, r24	; 0x13
    1374:	8b 89       	ldd	r24, Y+19	; 0x13
    1376:	9c 89       	ldd	r25, Y+20	; 0x14
    1378:	98 8b       	std	Y+16, r25	; 0x10
    137a:	8f 87       	std	Y+15, r24	; 0x0f
    137c:	8f 85       	ldd	r24, Y+15	; 0x0f
    137e:	98 89       	ldd	r25, Y+16	; 0x10
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <LCD_displayCharacter+0x2ec>
    1384:	98 8b       	std	Y+16, r25	; 0x10
    1386:	8f 87       	std	Y+15, r24	; 0x0f

	/*wait at least (tdsw)ns before clearing the enable line*/
	_delay_ms(1);

	/*disable the LCD*/
	CLEAR_BIT(CTRL_PORT_OUT, EN);
    1388:	a5 e3       	ldi	r26, 0x35	; 53
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e3       	ldi	r30, 0x35	; 53
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8b 7f       	andi	r24, 0xFB	; 251
    1394:	8c 93       	st	X, r24
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e8       	ldi	r26, 0x80	; 128
    139c:	bf e3       	ldi	r27, 0x3F	; 63
    139e:	8b 87       	std	Y+11, r24	; 0x0b
    13a0:	9c 87       	std	Y+12, r25	; 0x0c
    13a2:	ad 87       	std	Y+13, r26	; 0x0d
    13a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a ef       	ldi	r20, 0xFA	; 250
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	8f 83       	std	Y+7, r24	; 0x07
    13c0:	98 87       	std	Y+8, r25	; 0x08
    13c2:	a9 87       	std	Y+9, r26	; 0x09
    13c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <LCD_displayCharacter+0x354>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	4c f5       	brge	.+82     	; 0x1452 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	6b 85       	ldd	r22, Y+11	; 0x0b
    1402:	7c 85       	ldd	r23, Y+12	; 0x0c
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	9e 85       	ldd	r25, Y+14	; 0x0e
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <LCD_displayCharacter+0x3b4>
    142a:	88 ec       	ldi	r24, 0xC8	; 200
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_displayCharacter+0x3a2>
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	69 f7       	brne	.-38     	; 0x142a <LCD_displayCharacter+0x396>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_displayCharacter+0x3de>
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01

	/*Wait at least (th)ns while holding the data on the line after disabling the LCD*/
	_delay_ms(1);
}
    147a:	e9 96       	adiw	r28, 0x39	; 57
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <LCD_displayString>:
 * [Args]:
 * 		character_ptr: pointer to the first character of the string to be displayed
 * [Return]: None
 -----------------------------------------*/
void LCD_displayString(uint8 *character_ptr)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <LCD_displayString+0x6>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	0a c0       	rjmp	.+20     	; 0x14b0 <LCD_displayString+0x24>
	/*display the characters until the null terminator is encountered*/
	while(*character_ptr != '\0')
	{
		LCD_displayCharacter(*character_ptr);
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	80 81       	ld	r24, Z
    14a2:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_displayCharacter>
		character_ptr++;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
 * [Return]: None
 -----------------------------------------*/
void LCD_displayString(uint8 *character_ptr)
{
	/*display the characters until the null terminator is encountered*/
	while(*character_ptr != '\0')
    14b0:	e9 81       	ldd	r30, Y+1	; 0x01
    14b2:	fa 81       	ldd	r31, Y+2	; 0x02
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	89 f7       	brne	.-30     	; 0x149c <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*character_ptr);
		character_ptr++;
	}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <LCD_displayInt>:
 * [Args]:
 * 		int_num: a signed 32-bit integer number to be displayed
 * [Return]: None
 -----------------------------------------*/
void LCD_displayInt(sint32 int_num)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	a4 97       	sbiw	r28, 0x24	; 36
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	69 a3       	std	Y+33, r22	; 0x21
    14da:	7a a3       	std	Y+34, r23	; 0x22
    14dc:	8b a3       	std	Y+35, r24	; 0x23
    14de:	9c a3       	std	Y+36, r25	; 0x24
	uint8 str_of_int[LCD_N_COL]= {0};
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	fe 01       	movw	r30, r28
    14e4:	31 96       	adiw	r30, 0x01	; 1
    14e6:	df 01       	movw	r26, r30
    14e8:	98 2f       	mov	r25, r24
    14ea:	1d 92       	st	X+, r1
    14ec:	9a 95       	dec	r25
    14ee:	e9 f7       	brne	.-6      	; 0x14ea <LCD_displayInt+0x26>
	if (int_num < 0)
    14f0:	89 a1       	ldd	r24, Y+33	; 0x21
    14f2:	9a a1       	ldd	r25, Y+34	; 0x22
    14f4:	ab a1       	ldd	r26, Y+35	; 0x23
    14f6:	bc a1       	ldd	r27, Y+36	; 0x24
    14f8:	bb 23       	and	r27, r27
    14fa:	94 f4       	brge	.+36     	; 0x1520 <LCD_displayInt+0x5c>
	{
		LCD_displayCharacter('-');
    14fc:	8d e2       	ldi	r24, 0x2D	; 45
    14fe:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_displayCharacter>

		/*convert into a positive number*/
		int_num = -1 * int_num;
    1502:	89 a1       	ldd	r24, Y+33	; 0x21
    1504:	9a a1       	ldd	r25, Y+34	; 0x22
    1506:	ab a1       	ldd	r26, Y+35	; 0x23
    1508:	bc a1       	ldd	r27, Y+36	; 0x24
    150a:	b0 95       	com	r27
    150c:	a0 95       	com	r26
    150e:	90 95       	com	r25
    1510:	81 95       	neg	r24
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	af 4f       	sbci	r26, 0xFF	; 255
    1516:	bf 4f       	sbci	r27, 0xFF	; 255
    1518:	89 a3       	std	Y+33, r24	; 0x21
    151a:	9a a3       	std	Y+34, r25	; 0x22
    151c:	ab a3       	std	Y+35, r26	; 0x23
    151e:	bc a3       	std	Y+36, r27	; 0x24

	}
	/*convert the positive number (int_num) into a string (str_of_int)*/
	convertIntToString(int_num, str_of_int);
    1520:	89 a1       	ldd	r24, Y+33	; 0x21
    1522:	9a a1       	ldd	r25, Y+34	; 0x22
    1524:	ab a1       	ldd	r26, Y+35	; 0x23
    1526:	bc a1       	ldd	r27, Y+36	; 0x24
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	9e 01       	movw	r18, r28
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	a9 01       	movw	r20, r18
    1534:	0e 94 a9 0a 	call	0x1552	; 0x1552 <convertIntToString>

	/*display the number*/
	LCD_displayString(str_of_int);
    1538:	ce 01       	movw	r24, r28
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
}
    1540:	a4 96       	adiw	r28, 0x24	; 36
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <convertIntToString>:
 * 		int_num: a signed 32-bit integer number to be converted
 * 		*str_of_int_ptr: pointer to the string that represents the converted integer number
 * [Return]: None
 -----------------------------------------*/
void convertIntToString(uint32 int_num, uint8 *str_of_int_ptr)
{
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	e7 97       	sbiw	r28, 0x37	; 55
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	6d a7       	std	Y+45, r22	; 0x2d
    156c:	7e a7       	std	Y+46, r23	; 0x2e
    156e:	8f a7       	std	Y+47, r24	; 0x2f
    1570:	98 ab       	std	Y+48, r25	; 0x30
    1572:	5a ab       	std	Y+50, r21	; 0x32
    1574:	49 ab       	std	Y+49, r20	; 0x31
	/*temporary array that stores the string of int_num in reverse.
	 * the first item is NULL so that it is the last item stored in str_of_int to fit
	 *  LCD_displayString().
	 */
	uint8 temp[LCD_N_COL]={'\0'};
    1576:	80 e2       	ldi	r24, 0x20	; 32
    1578:	fe 01       	movw	r30, r28
    157a:	33 96       	adiw	r30, 0x03	; 3
    157c:	df 01       	movw	r26, r30
    157e:	48 2f       	mov	r20, r24
    1580:	1d 92       	st	X+, r1
    1582:	4a 95       	dec	r20
    1584:	e9 f7       	brne	.-6      	; 0x1580 <convertIntToString+0x2e>

	/*a reference array that stores the ASCII corresponding to each decimal digit*/
	uint8 ASCII_reference[10] = {'0','1','2', '3', '4', '5', '6', '7', '8', '9'};
    1586:	ce 01       	movw	r24, r28
    1588:	83 96       	adiw	r24, 0x23	; 35
    158a:	9c ab       	std	Y+52, r25	; 0x34
    158c:	8b ab       	std	Y+51, r24	; 0x33
    158e:	a2 e0       	ldi	r26, 0x02	; 2
    1590:	b2 e0       	ldi	r27, 0x02	; 2
    1592:	be ab       	std	Y+54, r27	; 0x36
    1594:	ad ab       	std	Y+53, r26	; 0x35
    1596:	ba e0       	ldi	r27, 0x0A	; 10
    1598:	bf ab       	std	Y+55, r27	; 0x37
    159a:	ed a9       	ldd	r30, Y+53	; 0x35
    159c:	fe a9       	ldd	r31, Y+54	; 0x36
    159e:	00 80       	ld	r0, Z
    15a0:	4d a9       	ldd	r20, Y+53	; 0x35
    15a2:	5e a9       	ldd	r21, Y+54	; 0x36
    15a4:	4f 5f       	subi	r20, 0xFF	; 255
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	5e ab       	std	Y+54, r21	; 0x36
    15aa:	4d ab       	std	Y+53, r20	; 0x35
    15ac:	ab a9       	ldd	r26, Y+51	; 0x33
    15ae:	bc a9       	ldd	r27, Y+52	; 0x34
    15b0:	0c 92       	st	X, r0
    15b2:	eb a9       	ldd	r30, Y+51	; 0x33
    15b4:	fc a9       	ldd	r31, Y+52	; 0x34
    15b6:	31 96       	adiw	r30, 0x01	; 1
    15b8:	fc ab       	std	Y+52, r31	; 0x34
    15ba:	eb ab       	std	Y+51, r30	; 0x33
    15bc:	ff a9       	ldd	r31, Y+55	; 0x37
    15be:	f1 50       	subi	r31, 0x01	; 1
    15c0:	ff ab       	std	Y+55, r31	; 0x37
    15c2:	4f a9       	ldd	r20, Y+55	; 0x37
    15c4:	44 23       	and	r20, r20
    15c6:	49 f7       	brne	.-46     	; 0x159a <convertIntToString+0x48>

	/*index starts from 1, since element 0 is the null terminator*/
	uint8 index = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	8a 83       	std	Y+2, r24	; 0x02

	if(int_num == 0)
    15cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    15d0:	af a5       	ldd	r26, Y+47	; 0x2f
    15d2:	b8 a9       	ldd	r27, Y+48	; 0x30
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
    15da:	09 f0       	breq	.+2      	; 0x15de <convertIntToString+0x8c>
    15dc:	41 c0       	rjmp	.+130    	; 0x1660 <convertIntToString+0x10e>
	{
		temp[index] = ASCII_reference[0];
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4b a1       	ldd	r20, Y+35	; 0x23
    15e6:	ce 01       	movw	r24, r28
    15e8:	03 96       	adiw	r24, 0x03	; 3
    15ea:	fc 01       	movw	r30, r24
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	40 83       	st	Z, r20
		index++;
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	3b c0       	rjmp	.+118    	; 0x1670 <convertIntToString+0x11e>
	}
	else
	{
		while(int_num != 0)
		{
			temp[index] = ASCII_reference[int_num % 10];
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	08 2f       	mov	r16, r24
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	8d a5       	ldd	r24, Y+45	; 0x2d
    1602:	9e a5       	ldd	r25, Y+46	; 0x2e
    1604:	af a5       	ldd	r26, Y+47	; 0x2f
    1606:	b8 a9       	ldd	r27, Y+48	; 0x30
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__udivmodsi4>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 01       	movw	r18, r28
    161e:	2d 5d       	subi	r18, 0xDD	; 221
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	f9 01       	movw	r30, r18
    1624:	e8 0f       	add	r30, r24
    1626:	f9 1f       	adc	r31, r25
    1628:	20 81       	ld	r18, Z
    162a:	ce 01       	movw	r24, r28
    162c:	03 96       	adiw	r24, 0x03	; 3
    162e:	fc 01       	movw	r30, r24
    1630:	e0 0f       	add	r30, r16
    1632:	f1 1f       	adc	r31, r17
    1634:	20 83       	st	Z, r18
			int_num /= 10;
    1636:	8d a5       	ldd	r24, Y+45	; 0x2d
    1638:	9e a5       	ldd	r25, Y+46	; 0x2e
    163a:	af a5       	ldd	r26, Y+47	; 0x2f
    163c:	b8 a9       	ldd	r27, Y+48	; 0x30
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__udivmodsi4>
    164e:	da 01       	movw	r26, r20
    1650:	c9 01       	movw	r24, r18
    1652:	8d a7       	std	Y+45, r24	; 0x2d
    1654:	9e a7       	std	Y+46, r25	; 0x2e
    1656:	af a7       	std	Y+47, r26	; 0x2f
    1658:	b8 ab       	std	Y+48, r27	; 0x30
			index++;
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	8a 83       	std	Y+2, r24	; 0x02
		temp[index] = ASCII_reference[0];
		index++;
	}
	else
	{
		while(int_num != 0)
    1660:	8d a5       	ldd	r24, Y+45	; 0x2d
    1662:	9e a5       	ldd	r25, Y+46	; 0x2e
    1664:	af a5       	ldd	r26, Y+47	; 0x2f
    1666:	b8 a9       	ldd	r27, Y+48	; 0x30
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	a1 05       	cpc	r26, r1
    166c:	b1 05       	cpc	r27, r1
    166e:	29 f6       	brne	.-118    	; 0x15fa <convertIntToString+0xa8>
		}

	}

	/*store the converted number in str_of_int in the right order*/
	for (uint8 i = 0; i < index; i++)
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <convertIntToString+0x160>
	{
		str_of_int_ptr[i] = temp[index - i -1];
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	89 a9       	ldd	r24, Y+49	; 0x31
    167c:	9a a9       	ldd	r25, Y+50	; 0x32
    167e:	dc 01       	movw	r26, r24
    1680:	a2 0f       	add	r26, r18
    1682:	b3 1f       	adc	r27, r19
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	f9 01       	movw	r30, r18
    1692:	e8 1b       	sub	r30, r24
    1694:	f9 0b       	sbc	r31, r25
    1696:	cf 01       	movw	r24, r30
    1698:	9c 01       	movw	r18, r24
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	30 40       	sbci	r19, 0x00	; 0
    169e:	ce 01       	movw	r24, r28
    16a0:	03 96       	adiw	r24, 0x03	; 3
    16a2:	fc 01       	movw	r30, r24
    16a4:	e2 0f       	add	r30, r18
    16a6:	f3 1f       	adc	r31, r19
    16a8:	80 81       	ld	r24, Z
    16aa:	8c 93       	st	X, r24
		}

	}

	/*store the converted number in str_of_int in the right order*/
	for (uint8 i = 0; i < index; i++)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	8f 5f       	subi	r24, 0xFF	; 255
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	99 81       	ldd	r25, Y+1	; 0x01
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	98 17       	cp	r25, r24
    16b8:	e8 f2       	brcs	.-70     	; 0x1674 <convertIntToString+0x122>
	{
		str_of_int_ptr[i] = temp[index - i -1];
	}
}
    16ba:	e7 96       	adiw	r28, 0x37	; 55
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <LCD_init>:
 * [Description]: initializes the LCD
 * [Args]: None
 * [Return]: None
 -----------------------------------------*/
void LCD_init()
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	/*Configure the control pins as o/p*/
	CTRL_PORT_DIR |= (1<<RS) | (1<<R_W) | (1<<EN);
    16d8:	a4 e3       	ldi	r26, 0x34	; 52
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	87 60       	ori	r24, 0x07	; 7
    16e4:	8c 93       	st	X, r24

#if N_BIT_INTERFACE == 8
	/*Configure data pins as i/p*/
	DATA_PORT_DIR = 0xFF;
    16e6:	ea e3       	ldi	r30, 0x3A	; 58
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	80 83       	st	Z, r24

	/*switch to 2 lines, 8-bit mode*/
	LCD_sendCommand(TWO_LINE_8BIT_MODE);
    16ee:	88 e3       	ldi	r24, 0x38	; 56
    16f0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
	LCD_sendCommand(0x02);
	LCD_sendCommand(TWO_LINE_4BIT_MODE);

#endif

	LCD_sendCommand(CLEAR_DISPLAY_CLEAR_DDRAM);
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    16fa:	8c e0       	ldi	r24, 0x0C	; 12
    16fc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <LCD_clear>:
 * [Description]: clears the display
 * [Args]: None
 * [Return]: None
 -----------------------------------------*/
void LCD_clear()
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <LCD_goToRowCol>:
 * 		row: the desired row number, starting from 0
 * 		col: the desired column number, starting from 0
 * [Return]: None
 -----------------------------------------*/
void LCD_goToRowCol(uint8 row, uint8 col)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <LCD_goToRowCol+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <LCD_goToRowCol+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
	/*To set the cursor position on the display, use the command: (0x80 + address)*/
	switch(row)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	31 f0       	breq	.+12     	; 0x174e <LCD_goToRowCol+0x2e>
    1742:	2b 81       	ldd	r18, Y+3	; 0x03
    1744:	3c 81       	ldd	r19, Y+4	; 0x04
    1746:	21 30       	cpi	r18, 0x01	; 1
    1748:	31 05       	cpc	r19, r1
    174a:	31 f0       	breq	.+12     	; 0x1758 <LCD_goToRowCol+0x38>
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <LCD_goToRowCol+0x40>
	{
	case 0:
		LCD_sendCommand( 0x80 + (FIRST_LINE_BASE_ADDRESS + col) );
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	80 58       	subi	r24, 0x80	; 128
    1752:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <LCD_goToRowCol+0x40>
		break;
	case 1:
		LCD_sendCommand( 0x80 + (SECOND_LINE_BASE_ADDRESS + col) );
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	80 54       	subi	r24, 0x40	; 64
    175c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LCD_sendCommand>
		break;
	default:
		break;
	}
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <Ocu_setCbk>:
uint8 g_ticksCounter = 0;

void (*g_Ocu_cbkPtr)() = NULL_PTR;

void Ocu_setCbk( void (*cbkPtr)(void) )
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <Ocu_setCbk+0x6>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
	g_Ocu_cbkPtr = cbkPtr;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	90 93 27 02 	sts	0x0227, r25
    1784:	80 93 26 02 	sts	0x0226, r24
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <Ocu_init>:
 * [Args]:
 * 		ConfigPtr: pointer to the configuration set
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_init(const Ocu_ConfigType *ConfigPtr)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <Ocu_init+0x6>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
	/*Set FOC1 for non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    17a0:	af e4       	ldi	r26, 0x4F	; 79
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ef e4       	ldi	r30, 0x4F	; 79
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 60       	ori	r24, 0x08	; 8
    17ac:	8c 93       	st	X, r24
	//SET_BIT(TCCR1A, FOC1B);

	/*set OC1A behavior on compare match*/
	TCCR1A = (TCCR1A & 0x3F) | (ConfigPtr->e_ocu_pinAction << 6);
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	2f 73       	andi	r18, 0x3F	; 63
    17bc:	e9 81       	ldd	r30, Y+1	; 0x01
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	80 81       	ld	r24, Z
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	00 24       	eor	r0, r0
    17c8:	96 95       	lsr	r25
    17ca:	87 95       	ror	r24
    17cc:	07 94       	ror	r0
    17ce:	96 95       	lsr	r25
    17d0:	87 95       	ror	r24
    17d2:	07 94       	ror	r0
    17d4:	98 2f       	mov	r25, r24
    17d6:	80 2d       	mov	r24, r0
    17d8:	82 2b       	or	r24, r18
    17da:	8c 93       	st	X, r24
	//TCCR1A = (TCCR1A & 0xCF) | (ConfigPtr->e_ocu_pinAction << 4);	/*set OC1B behavior*/

	/*set the source for max counter value to be OCR1A register: WGM13:0 -> 0 1 0 0 */
	TCCR1B |= (1<<WGM12);
    17dc:	ae e4       	ldi	r26, 0x4E	; 78
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ee e4       	ldi	r30, 0x4E	; 78
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 60       	ori	r24, 0x08	; 8
    17e8:	8c 93       	st	X, r24

	/*set the prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | (ConfigPtr->e_ocu_prescaler);
    17ea:	ae e4       	ldi	r26, 0x4E	; 78
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ee e4       	ldi	r30, 0x4E	; 78
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	98 2f       	mov	r25, r24
    17f6:	98 7f       	andi	r25, 0xF8	; 248
    17f8:	e9 81       	ldd	r30, Y+1	; 0x01
    17fa:	fa 81       	ldd	r31, Y+2	; 0x02
    17fc:	81 81       	ldd	r24, Z+1	; 0x01
    17fe:	89 2b       	or	r24, r25
    1800:	8c 93       	st	X, r24
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <Ocu_start>:
 * 		counterTop: TOP value to be compared with the counter value.
 * 		n_ticksRequired: Number of ticks required to count the required time, given the specified counterTop.
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_start(uint16 counterTop, uint8 n_ticksRequired)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <Ocu_start+0x6>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6b 83       	std	Y+3, r22	; 0x03
	/*set the number of ticks required before notifying the callback. this value will be used by the ISR*/
	g_n_ticksRequired = n_ticksRequired;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	80 93 24 02 	sts	0x0224, r24

	/*enable module interrupt*/
	SET_BIT(TIMSK, OCIE1A);
    1824:	a9 e5       	ldi	r26, 0x59	; 89
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 e5       	ldi	r30, 0x59	; 89
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 61       	ori	r24, 0x10	; 16
    1830:	8c 93       	st	X, r24

	/*counter starts from 0*/
	TCNT1 = 0;
    1832:	ec e4       	ldi	r30, 0x4C	; 76
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	11 82       	std	Z+1, r1	; 0x01
    1838:	10 82       	st	Z, r1

	/*counts to counterTop*/
	OCR1A = counterTop;
    183a:	ea e4       	ldi	r30, 0x4A	; 74
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <Ocu_stop>:
 * [Description]: Stops the timer
 * [Args]: None
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_stop(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	/*Disable module interrupt*/
	CLEAR_BIT(TIMSK, OCIE1A);
    185a:	a9 e5       	ldi	r26, 0x59	; 89
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e9 e5       	ldi	r30, 0x59	; 89
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 7e       	andi	r24, 0xEF	; 239
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <Ocu_deInit>:
 * [Description]: De-initializes the output compare unit
 * [Args]: None
 * [Return]: None
 --------------------------------------------------------------*/
void Ocu_deInit(void)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1A, FOC1A);
    1876:	af e4       	ldi	r26, 0x4F	; 79
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ef e4       	ldi	r30, 0x4F	; 79
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	87 7f       	andi	r24, 0xF7	; 247
    1882:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR1A, FOC1B);
	TCCR1A = (TCCR1A & 0x3F) | (0);
    1884:	af e4       	ldi	r26, 0x4F	; 79
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ef e4       	ldi	r30, 0x4F	; 79
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	8f 73       	andi	r24, 0x3F	; 63
    1890:	8c 93       	st	X, r24
	TCCR1B &= ~(1<<WGM12);
    1892:	ae e4       	ldi	r26, 0x4E	; 78
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ee e4       	ldi	r30, 0x4E	; 78
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	87 7f       	andi	r24, 0xF7	; 247
    189e:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (0);		/*no clock source*/
    18a0:	ae e4       	ldi	r26, 0x4E	; 78
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ee e4       	ldi	r30, 0x4E	; 78
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 7f       	andi	r24, 0xF8	; 248
    18ac:	8c 93       	st	X, r24
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <__vector_6>:



/*~~~~~~~~~~~~~~~~~~~ ISR ~~~~~~~~~~~~~~~~~~~~~*/
ISR(TIMER1_COMPA_vect)
{
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	2f 93       	push	r18
    18c0:	3f 93       	push	r19
    18c2:	4f 93       	push	r20
    18c4:	5f 93       	push	r21
    18c6:	6f 93       	push	r22
    18c8:	7f 93       	push	r23
    18ca:	8f 93       	push	r24
    18cc:	9f 93       	push	r25
    18ce:	af 93       	push	r26
    18d0:	bf 93       	push	r27
    18d2:	ef 93       	push	r30
    18d4:	ff 93       	push	r31
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	g_ticksCounter++;
    18de:	80 91 25 02 	lds	r24, 0x0225
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	80 93 25 02 	sts	0x0225, r24
	//PORTD = g_ticksCounter;
	//LCD_displayInt(g_n_ticksRequired);
	if(g_ticksCounter == g_n_ticksRequired)
    18e8:	90 91 25 02 	lds	r25, 0x0225
    18ec:	80 91 24 02 	lds	r24, 0x0224
    18f0:	98 17       	cp	r25, r24
    18f2:	69 f4       	brne	.+26     	; 0x190e <__vector_6+0x5a>
	{
		if(g_Ocu_cbkPtr != NULL_PTR)
    18f4:	80 91 26 02 	lds	r24, 0x0226
    18f8:	90 91 27 02 	lds	r25, 0x0227
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	39 f0       	breq	.+14     	; 0x190e <__vector_6+0x5a>
		{
			g_Ocu_cbkPtr();
    1900:	e0 91 26 02 	lds	r30, 0x0226
    1904:	f0 91 27 02 	lds	r31, 0x0227
    1908:	09 95       	icall
			g_ticksCounter = 0;
    190a:	10 92 25 02 	sts	0x0225, r1
		}

	}
}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	ff 91       	pop	r31
    1914:	ef 91       	pop	r30
    1916:	bf 91       	pop	r27
    1918:	af 91       	pop	r26
    191a:	9f 91       	pop	r25
    191c:	8f 91       	pop	r24
    191e:	7f 91       	pop	r23
    1920:	6f 91       	pop	r22
    1922:	5f 91       	pop	r21
    1924:	4f 91       	pop	r20
    1926:	3f 91       	pop	r19
    1928:	2f 91       	pop	r18
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <UART_init>:
 * [Args]:
 * 		config_ptr: pointer to the configuration set
 * [Return]: None
 -----------------------------------------*/
void UART_init(const Uart_ConfigType *config_ptr)
{
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <UART_init+0xa>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
	 * - set the character size
	 * - set the baud rate
	 *********************************************/

	/*Enable the USART transmitter & receiver */
	SET_BIT(UCSRB, RXEN);
    1946:	aa e2       	ldi	r26, 0x2A	; 42
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ea e2       	ldi	r30, 0x2A	; 42
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	80 61       	ori	r24, 0x10	; 16
    1952:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    1954:	aa e2       	ldi	r26, 0x2A	; 42
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ea e2       	ldi	r30, 0x2A	; 42
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	88 60       	ori	r24, 0x08	; 8
    1960:	8c 93       	st	X, r24

#ifdef DOUBLE_SPEED
	/*Enable double speed*/
	SET_BIT(UCSRA, U2X);
    1962:	ab e2       	ldi	r26, 0x2B	; 43
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	eb e2       	ldi	r30, 0x2B	; 43
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	82 60       	ori	r24, 0x02	; 2
    196e:	8c 93       	st	X, r24
#endif

	/*to access UCSRC, URSEL needs to be set*/
	SET_BIT(UCSRC, URSEL);
    1970:	a0 e4       	ldi	r26, 0x40	; 64
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e0 e4       	ldi	r30, 0x40	; 64
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 68       	ori	r24, 0x80	; 128
    197c:	8c 93       	st	X, r24
	/*set the mode to synchronous or asynchronous*/
	UCSRC = (UCSRC & 0xBF) | (UART_MODE<<UMSEL);
    197e:	a0 e4       	ldi	r26, 0x40	; 64
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e0 e4       	ldi	r30, 0x40	; 64
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 7b       	andi	r24, 0xBF	; 191
    198a:	8c 93       	st	X, r24
	/*~~~~~~~~~ frame ~~~~~~~*/
	UCSRC = (UCSRC & 0xCF) | (config_ptr->e_Uart_parityMode << UPM0);
    198c:	a0 e4       	ldi	r26, 0x40	; 64
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e0 e4       	ldi	r30, 0x40	; 64
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	28 2f       	mov	r18, r24
    1998:	2f 7c       	andi	r18, 0xCF	; 207
    199a:	e9 81       	ldd	r30, Y+1	; 0x01
    199c:	fa 81       	ldd	r31, Y+2	; 0x02
    199e:	80 81       	ld	r24, Z
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	82 95       	swap	r24
    19a6:	92 95       	swap	r25
    19a8:	90 7f       	andi	r25, 0xF0	; 240
    19aa:	98 27       	eor	r25, r24
    19ac:	80 7f       	andi	r24, 0xF0	; 240
    19ae:	98 27       	eor	r25, r24
    19b0:	82 2b       	or	r24, r18
    19b2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (config_ptr->e_Uart_stopBit << USBS);
    19b4:	a0 e4       	ldi	r26, 0x40	; 64
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e0 e4       	ldi	r30, 0x40	; 64
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	28 2f       	mov	r18, r24
    19c0:	27 7f       	andi	r18, 0xF7	; 247
    19c2:	e9 81       	ldd	r30, Y+1	; 0x01
    19c4:	fa 81       	ldd	r31, Y+2	; 0x02
    19c6:	81 81       	ldd	r24, Z+1	; 0x01
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	82 2b       	or	r24, r18
    19da:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->e_Uart_charSize & 0x03) << UCSZ0);
    19dc:	a0 e4       	ldi	r26, 0x40	; 64
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e0 e4       	ldi	r30, 0x40	; 64
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	29 7f       	andi	r18, 0xF9	; 249
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	83 70       	andi	r24, 0x03	; 3
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	82 2b       	or	r24, r18
    19fe:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (config_ptr->e_Uart_charSize & 0x04);
    1a00:	aa e2       	ldi	r26, 0x2A	; 42
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ea e2       	ldi	r30, 0x2A	; 42
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	9b 7f       	andi	r25, 0xFB	; 251
    1a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a10:	fa 81       	ldd	r31, Y+2	; 0x02
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	84 70       	andi	r24, 0x04	; 4
    1a16:	89 2b       	or	r24, r25
    1a18:	8c 93       	st	X, r24
	/*Clear URSEL to access UBRRH*/
	CLEAR_BIT(UBRRH, URSEL);
    1a1a:	a0 e4       	ldi	r26, 0x40	; 64
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e0 e4       	ldi	r30, 0x40	; 64
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 77       	andi	r24, 0x7F	; 127
    1a26:	8c 93       	st	X, r24
	/*Baud rate*/
	UBRRH = BAUD_RATE_GENERATOR(config_ptr->Uart_baudRate) >> 8;
    1a28:	00 e4       	ldi	r16, 0x40	; 64
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	83 81       	ldd	r24, Z+3	; 0x03
    1a32:	94 81       	ldd	r25, Z+4	; 0x04
    1a34:	cc 01       	movw	r24, r24
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	aa 1f       	adc	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	aa 1f       	adc	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	9c 01       	movw	r18, r24
    1a54:	ad 01       	movw	r20, r26
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	92 e1       	ldi	r25, 0x12	; 18
    1a5a:	aa e7       	ldi	r26, 0x7A	; 122
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__udivmodsi4>
    1a66:	da 01       	movw	r26, r20
    1a68:	c9 01       	movw	r24, r18
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	a1 09       	sbc	r26, r1
    1a6e:	b1 09       	sbc	r27, r1
    1a70:	89 2f       	mov	r24, r25
    1a72:	9a 2f       	mov	r25, r26
    1a74:	ab 2f       	mov	r26, r27
    1a76:	bb 27       	eor	r27, r27
    1a78:	f8 01       	movw	r30, r16
    1a7a:	80 83       	st	Z, r24
	UBRRL = BAUD_RATE_GENERATOR(config_ptr->Uart_baudRate);
    1a7c:	09 e2       	ldi	r16, 0x29	; 41
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	83 81       	ldd	r24, Z+3	; 0x03
    1a86:	94 81       	ldd	r25, Z+4	; 0x04
    1a88:	cc 01       	movw	r24, r24
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	aa 1f       	adc	r26, r26
    1a94:	bb 1f       	adc	r27, r27
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	aa 1f       	adc	r26, r26
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	9c 01       	movw	r18, r24
    1aa8:	ad 01       	movw	r20, r26
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	92 e1       	ldi	r25, 0x12	; 18
    1aae:	aa e7       	ldi	r26, 0x7A	; 122
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__udivmodsi4>
    1aba:	da 01       	movw	r26, r20
    1abc:	c9 01       	movw	r24, r18
    1abe:	81 50       	subi	r24, 0x01	; 1
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	80 83       	st	Z, r24

}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <UART_sendByte>:
 * [Args]:
 * 		data: byte to be sent
 * [Return]: None
 -----------------------------------------*/
void UART_sendByte(uint8 data)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	89 83       	std	Y+1, r24	; 0x01
	/*wait until the transmit buffer is empty*/
	while( BIT_IS_CLEAR(UCSRA, UDRE));
    1ade:	eb e2       	ldi	r30, 0x2B	; 43
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	80 72       	andi	r24, 0x20	; 32
    1aea:	90 70       	andi	r25, 0x00	; 0
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	b9 f3       	breq	.-18     	; 0x1ade <UART_sendByte+0xc>

	/*start transmission*/
	UDR = data;
    1af0:	ec e2       	ldi	r30, 0x2C	; 44
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	80 83       	st	Z, r24
}
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <UART_receiveByte>:
 * [Description]: receives a byte of data
 * [Args]: None
 * [Return]: the received byte
 -----------------------------------------*/
uint8 UART_receiveByte()
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	/*wait until the whole byte is received*/
	while( BIT_IS_CLEAR(UCSRA, RXC));
    1b08:	eb e2       	ldi	r30, 0x2B	; 43
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	dc f7       	brge	.-10     	; 0x1b08 <UART_receiveByte+0x8>

	/*read the buffer, clear the flag*/
	return UDR;
    1b12:	ec e2       	ldi	r30, 0x2C	; 44
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <UART_receiveString>:
 * [Args]:
 * 		str_ptr: pointer to an array of characters, where the received string will be stored
 * [Return]: None
 -----------------------------------------*/
void UART_receiveString(uint8 *str_ptr)
{
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <UART_receiveString+0xa>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	9b 83       	std	Y+3, r25	; 0x03
    1b30:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * the string will terminate with a special character '#' followed by the null terminator.
	 * the function loops until it detects the special character and replaces it with the null terminator
	 */
	uint8 index = 0;
    1b32:	19 82       	std	Y+1, r1	; 0x01
	str_ptr[index] = UART_receiveByte();
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	8c 01       	movw	r16, r24
    1b40:	02 0f       	add	r16, r18
    1b42:	13 1f       	adc	r17, r19
    1b44:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <UART_receiveByte>
    1b48:	f8 01       	movw	r30, r16
    1b4a:	80 83       	st	Z, r24
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <UART_receiveString+0x4e>
	while (str_ptr[index] != '#')
	{
		index++;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	8f 5f       	subi	r24, 0xFF	; 255
    1b52:	89 83       	std	Y+1, r24	; 0x01
		str_ptr[index] = UART_receiveByte();
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	8c 01       	movw	r16, r24
    1b60:	02 0f       	add	r16, r18
    1b62:	13 1f       	adc	r17, r19
    1b64:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <UART_receiveByte>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	80 83       	st	Z, r24
	 * the string will terminate with a special character '#' followed by the null terminator.
	 * the function loops until it detects the special character and replaces it with the null terminator
	 */
	uint8 index = 0;
	str_ptr[index] = UART_receiveByte();
	while (str_ptr[index] != '#')
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	fc 01       	movw	r30, r24
    1b78:	e2 0f       	add	r30, r18
    1b7a:	f3 1f       	adc	r31, r19
    1b7c:	80 81       	ld	r24, Z
    1b7e:	83 32       	cpi	r24, 0x23	; 35
    1b80:	31 f7       	brne	.-52     	; 0x1b4e <UART_receiveString+0x30>
	{
		index++;
		str_ptr[index] = UART_receiveByte();
	}
	str_ptr[index] = '\0';
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	e2 0f       	add	r30, r18
    1b90:	f3 1f       	adc	r31, r19
    1b92:	10 82       	st	Z, r1
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <UART_sendString>:
 * [Args]:
 * 		str_ptr: pointer to the string that will be sent
 * [Return]: None
 -----------------------------------------*/
void UART_sendString(uint8 *str_ptr)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <UART_sendString+0x6>
    1baa:	0f 92       	push	r0
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9b 83       	std	Y+3, r25	; 0x03
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = 0;
    1bb4:	19 82       	std	Y+1, r1	; 0x01
    1bb6:	0e c0       	rjmp	.+28     	; 0x1bd4 <UART_sendString+0x30>
	while(str_ptr[index] != '\0')
	{
		UART_sendByte(str_ptr[index]);
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	80 81       	ld	r24, Z
    1bca:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>
		index++;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	89 83       	std	Y+1, r24	; 0x01
 * [Return]: None
 -----------------------------------------*/
void UART_sendString(uint8 *str_ptr)
{
	uint8 index = 0;
	while(str_ptr[index] != '\0')
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	fc 01       	movw	r30, r24
    1be0:	e2 0f       	add	r30, r18
    1be2:	f3 1f       	adc	r31, r19
    1be4:	80 81       	ld	r24, Z
    1be6:	88 23       	and	r24, r24
    1be8:	39 f7       	brne	.-50     	; 0x1bb8 <UART_sendString+0x14>
	{
		UART_sendByte(str_ptr[index]);
		index++;
	}
	/*append the special character and the null terminator, to fit UART_receiveString*/
	UART_sendByte('#');
    1bea:	83 e2       	ldi	r24, 0x23	; 35
    1bec:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>
	UART_sendByte('\0');
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <main>:
const Uart_ConfigType s_UartConfig = {PARITY_DISABLED, ONE_STOP_BIT, CHAR_8, 9600}; /*Configuration set of the UART*/
const Ocu_ConfigType s_OcuConfig = {OCU_PIN_DISABLE,OCU_PRESCALER_1024};			/*Configuration set of OCU*/


int main()
{
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	c6 5b       	subi	r28, 0xB6	; 182
    1c10:	d0 40       	sbci	r29, 0x00	; 0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
	/*Initialize LCD, UART, OCU*/
	LCD_init();
    1c1c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LCD_init>
	UART_init(&s_UartConfig);
    1c20:	8c e0       	ldi	r24, 0x0C	; 12
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_init>
	Ocu_init(&s_OcuConfig);
    1c28:	81 e1       	ldi	r24, 0x11	; 17
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <Ocu_init>

	/*Enable global interrupt flag*/
	SET_BIT(SREG, 7);
    1c30:	af e5       	ldi	r26, 0x5F	; 95
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ef e5       	ldi	r30, 0x5F	; 95
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 68       	ori	r24, 0x80	; 128
    1c3c:	8c 93       	st	X, r24

	/*Set a new password*/
	setNewPass();
    1c3e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <setNewPass>
    1c42:	bd c0       	rjmp	.+378    	; 0x1dbe <main+0x1bc>

	/*Confirm the password. in case of password mismatch, repeat the process of setting new password and confirming*/
	while (confirmPass() == CONFIRMATION_FAILED)
	{
		/*Notify the user about the confirmation failure*/
		LCD_goToRowCol(0,0);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
		LCD_displayString("Confirmation Failed           ");
    1c4c:	80 e6       	ldi	r24, 0x60	; 96
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    1c54:	fe 01       	movw	r30, r28
    1c56:	ed 54       	subi	r30, 0x4D	; 77
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	aa ef       	ldi	r26, 0xFA	; 250
    1c60:	b3 e4       	ldi	r27, 0x43	; 67
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	01 55       	subi	r16, 0x51	; 81
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	ed 54       	subi	r30, 0x4D	; 77
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 55       	subi	r30, 0x51	; 81
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	44 f4       	brge	.+16     	; 0x1cc6 <main+0xc4>
		__ticks = 1;
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e3 55       	subi	r30, 0x53	; 83
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	64 c0       	rjmp	.+200    	; 0x1d8e <main+0x18c>
	else if (__tmp > 65535)
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e1 55       	subi	r30, 0x51	; 81
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	0c f0       	brlt	.+2      	; 0x1ce6 <main+0xe4>
    1ce4:	43 c0       	rjmp	.+134    	; 0x1d6c <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ed 54       	subi	r30, 0x4D	; 77
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8e 01       	movw	r16, r28
    1d06:	03 55       	subi	r16, 0x53	; 83
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	f8 01       	movw	r30, r16
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
    1d1c:	1f c0       	rjmp	.+62     	; 0x1d5c <main+0x15a>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e5 55       	subi	r30, 0x55	; 85
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	88 ec       	ldi	r24, 0xC8	; 200
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e5 55       	subi	r30, 0x55	; 85
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <main+0x134>
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e5 55       	subi	r30, 0x55	; 85
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	de 01       	movw	r26, r28
    1d46:	a3 55       	subi	r26, 0x53	; 83
    1d48:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e3 55       	subi	r30, 0x53	; 83
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	11 96       	adiw	r26, 0x01	; 1
    1d58:	9c 93       	st	X, r25
    1d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e3 55       	subi	r30, 0x53	; 83
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	d1 f6       	brne	.-76     	; 0x1d1e <main+0x11c>
    1d6a:	27 c0       	rjmp	.+78     	; 0x1dba <main+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	03 55       	subi	r16, 0x53	; 83
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	e1 55       	subi	r30, 0x51	; 81
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	de 01       	movw	r26, r28
    1d90:	a7 55       	subi	r26, 0x57	; 87
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e3 55       	subi	r30, 0x53	; 83
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	8d 93       	st	X+, r24
    1da0:	9c 93       	st	X, r25
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 55       	subi	r30, 0x57	; 87
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <main+0x1aa>
    1db0:	fe 01       	movw	r30, r28
    1db2:	e7 55       	subi	r30, 0x57	; 87
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
		_delay_ms(500);

		/*Set a new password*/
		setNewPass();
    1dba:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <setNewPass>

	/*Set a new password*/
	setNewPass();

	/*Confirm the password. in case of password mismatch, repeat the process of setting new password and confirming*/
	while (confirmPass() == CONFIRMATION_FAILED)
    1dbe:	0e 94 37 18 	call	0x306e	; 0x306e <confirmPass>
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <main+0x1c6>
    1dc6:	3e cf       	rjmp	.-388    	; 0x1c44 <main+0x42>
		/*Set a new password*/
		setNewPass();
	}

	/*The while loop terminates in case of password match*/
	LCD_goToRowCol(0,0);
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("Password Confirmed        ");
    1dd0:	8f e7       	ldi	r24, 0x7F	; 127
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    1dd8:	fe 01       	movw	r30, r28
    1dda:	eb 55       	subi	r30, 0x5B	; 91
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	aa ef       	ldi	r26, 0xFA	; 250
    1de4:	b3 e4       	ldi	r27, 0x43	; 67
    1de6:	80 83       	st	Z, r24
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	a2 83       	std	Z+2, r26	; 0x02
    1dec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	8e 01       	movw	r16, r28
    1df0:	0f 55       	subi	r16, 0x5F	; 95
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 55       	subi	r30, 0x5B	; 91
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	f8 01       	movw	r30, r16
    1e14:	80 83       	st	Z, r24
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	a2 83       	std	Z+2, r26	; 0x02
    1e1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ef 55       	subi	r30, 0x5F	; 95
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	44 f4       	brge	.+16     	; 0x1e4a <main+0x248>
		__ticks = 1;
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e1 56       	subi	r30, 0x61	; 97
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	64 c0       	rjmp	.+200    	; 0x1f12 <main+0x310>
	else if (__tmp > 65535)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ef 55       	subi	r30, 0x5F	; 95
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	3f ef       	ldi	r19, 0xFF	; 255
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	57 e4       	ldi	r21, 0x47	; 71
    1e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <main+0x268>
    1e68:	43 c0       	rjmp	.+134    	; 0x1ef0 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	eb 55       	subi	r30, 0x5B	; 91
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8e 01       	movw	r16, r28
    1e8a:	01 56       	subi	r16, 0x61	; 97
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    1ea0:	1f c0       	rjmp	.+62     	; 0x1ee0 <main+0x2de>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e3 56       	subi	r30, 0x63	; 99
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e3 56       	subi	r30, 0x63	; 99
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <main+0x2b8>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e3 56       	subi	r30, 0x63	; 99
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	de 01       	movw	r26, r28
    1eca:	a1 56       	subi	r26, 0x61	; 97
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e1 56       	subi	r30, 0x61	; 97
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	11 96       	adiw	r26, 0x01	; 1
    1edc:	9c 93       	st	X, r25
    1ede:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e1 56       	subi	r30, 0x61	; 97
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	d1 f6       	brne	.-76     	; 0x1ea2 <main+0x2a0>
    1eee:	27 c0       	rjmp	.+78     	; 0x1f3e <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	8e 01       	movw	r16, r28
    1ef2:	01 56       	subi	r16, 0x61	; 97
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ef 55       	subi	r30, 0x5F	; 95
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	de 01       	movw	r26, r28
    1f14:	a5 56       	subi	r26, 0x65	; 101
    1f16:	bf 4f       	sbci	r27, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e1 56       	subi	r30, 0x61	; 97
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	8d 93       	st	X+, r24
    1f24:	9c 93       	st	X, r25
    1f26:	fe 01       	movw	r30, r28
    1f28:	e5 56       	subi	r30, 0x65	; 101
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <main+0x32e>
    1f34:	fe 01       	movw	r30, r28
    1f36:	e5 56       	subi	r30, 0x65	; 101
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24


	while(1)
	{
		/*Display the available options to the user*/
		LCD_goToRowCol(0,0);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
		LCD_displayString("'+' : Open Door               ");
    1f46:	8a e9       	ldi	r24, 0x9A	; 154
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
		LCD_goToRowCol(1,0);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
		LCD_displayString("'-' : Change Password         ");
    1f56:	89 eb       	ldi	r24, 0xB9	; 185
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>

		key = keypad_getPressedKey();
    1f5e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    1f62:	80 93 29 02 	sts	0x0229, r24
    1f66:	b8 c0       	rjmp	.+368    	; 0x20d8 <main+0x4d6>
		/*Wait until the user chooses one of the available options*/
		while(key != '+' && key != '-')
		{
			key = keypad_getPressedKey();
    1f68:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    1f6c:	80 93 29 02 	sts	0x0229, r24
    1f70:	fe 01       	movw	r30, r28
    1f72:	e9 56       	subi	r30, 0x69	; 105
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a6 e9       	ldi	r26, 0x96	; 150
    1f7c:	b3 e4       	ldi	r27, 0x43	; 67
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	8e 01       	movw	r16, r28
    1f88:	0d 56       	subi	r16, 0x6D	; 109
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e9 56       	subi	r30, 0x69	; 105
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ed 56       	subi	r30, 0x6D	; 109
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	44 f4       	brge	.+16     	; 0x1fe2 <main+0x3e0>
		__ticks = 1;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ef 56       	subi	r30, 0x6F	; 111
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	64 c0       	rjmp	.+200    	; 0x20aa <main+0x4a8>
	else if (__tmp > 65535)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ed 56       	subi	r30, 0x6D	; 109
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <main+0x400>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <main+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	fe 01       	movw	r30, r28
    2004:	e9 56       	subi	r30, 0x69	; 105
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8e 01       	movw	r16, r28
    2022:	0f 56       	subi	r16, 0x6F	; 111
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	f8 01       	movw	r30, r16
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	1f c0       	rjmp	.+62     	; 0x2078 <main+0x476>
    203a:	fe 01       	movw	r30, r28
    203c:	e1 57       	subi	r30, 0x71	; 113
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	fe 01       	movw	r30, r28
    204a:	e1 57       	subi	r30, 0x71	; 113
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <main+0x450>
    2056:	fe 01       	movw	r30, r28
    2058:	e1 57       	subi	r30, 0x71	; 113
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	de 01       	movw	r26, r28
    2062:	af 56       	subi	r26, 0x6F	; 111
    2064:	bf 4f       	sbci	r27, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	ef 56       	subi	r30, 0x6F	; 111
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	fe 01       	movw	r30, r28
    207a:	ef 56       	subi	r30, 0x6F	; 111
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	d1 f6       	brne	.-76     	; 0x203a <main+0x438>
    2086:	28 c0       	rjmp	.+80     	; 0x20d8 <main+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	0f 56       	subi	r16, 0x6F	; 111
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	ed 56       	subi	r30, 0x6D	; 109
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	de 01       	movw	r26, r28
    20ac:	a3 57       	subi	r26, 0x73	; 115
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	ef 56       	subi	r30, 0x6F	; 111
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	fe 01       	movw	r30, r28
    20c2:	e3 57       	subi	r30, 0x73	; 115
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0x4c8>
    20ce:	fe 01       	movw	r30, r28
    20d0:	e3 57       	subi	r30, 0x73	; 115
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
		LCD_goToRowCol(1,0);
		LCD_displayString("'-' : Change Password         ");

		key = keypad_getPressedKey();
		/*Wait until the user chooses one of the available options*/
		while(key != '+' && key != '-')
    20d8:	80 91 29 02 	lds	r24, 0x0229
    20dc:	8b 32       	cpi	r24, 0x2B	; 43
    20de:	29 f0       	breq	.+10     	; 0x20ea <main+0x4e8>
    20e0:	80 91 29 02 	lds	r24, 0x0229
    20e4:	8d 32       	cpi	r24, 0x2D	; 45
    20e6:	09 f0       	breq	.+2      	; 0x20ea <main+0x4e8>
    20e8:	3f cf       	rjmp	.-386    	; 0x1f68 <main+0x366>
			key = keypad_getPressedKey();
			_delay_ms(300);	//Not necessary
		}


		if(key == '+')
    20ea:	80 91 29 02 	lds	r24, 0x0229
    20ee:	8b 32       	cpi	r24, 0x2B	; 43
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <main+0x4f2>
    20f2:	cb c4       	rjmp	.+2454   	; 0x2a8a <main+0xe88>
		{
			/*Clear the flags*/
			intruder_alert = 0;
    20f4:	10 92 28 02 	sts	0x0228, r1
			wrongPassCounter = 0;
    20f8:	10 92 2a 02 	sts	0x022A, r1
    20fc:	e0 c0       	rjmp	.+448    	; 0x22be <main+0x6bc>

			/*Confirm the password. in case of password mismatch, allow only WRONG_PASS_MAX attempts then set an alarm*/
			while (confirmPass() == CONFIRMATION_FAILED)
			{
				wrongPassCounter++;
    20fe:	80 91 2a 02 	lds	r24, 0x022A
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	80 93 2a 02 	sts	0x022A, r24

				/*Display the number of wrong attempts & max number*/
				LCD_goToRowCol(0,0);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
				LCD_displayString("WRONG PASSWORD_attempt ");
    2110:	88 ed       	ldi	r24, 0xD8	; 216
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
				LCD_displayInt(wrongPassCounter);
    2118:	80 91 2a 02 	lds	r24, 0x022A
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	a0 e0       	ldi	r26, 0x00	; 0
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <LCD_displayInt>
				LCD_displayString(" /3");
    212c:	80 ef       	ldi	r24, 0xF0	; 240
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    2134:	fe 01       	movw	r30, r28
    2136:	e7 57       	subi	r30, 0x77	; 119
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	aa e7       	ldi	r26, 0x7A	; 122
    2140:	b4 e4       	ldi	r27, 0x44	; 68
    2142:	80 83       	st	Z, r24
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	a2 83       	std	Z+2, r26	; 0x02
    2148:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	8e 01       	movw	r16, r28
    214c:	0b 57       	subi	r16, 0x7B	; 123
    214e:	1f 4f       	sbci	r17, 0xFF	; 255
    2150:	fe 01       	movw	r30, r28
    2152:	e7 57       	subi	r30, 0x77	; 119
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a ef       	ldi	r20, 0xFA	; 250
    2164:	54 e4       	ldi	r21, 0x44	; 68
    2166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	f8 01       	movw	r30, r16
    2170:	80 83       	st	Z, r24
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	a2 83       	std	Z+2, r26	; 0x02
    2176:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2178:	fe 01       	movw	r30, r28
    217a:	eb 57       	subi	r30, 0x7B	; 123
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	5f e3       	ldi	r21, 0x3F	; 63
    218e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2192:	88 23       	and	r24, r24
    2194:	44 f4       	brge	.+16     	; 0x21a6 <main+0x5a4>
		__ticks = 1;
    2196:	fe 01       	movw	r30, r28
    2198:	ed 57       	subi	r30, 0x7D	; 125
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	64 c0       	rjmp	.+200    	; 0x226e <main+0x66c>
	else if (__tmp > 65535)
    21a6:	fe 01       	movw	r30, r28
    21a8:	eb 57       	subi	r30, 0x7B	; 123
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	0c f0       	brlt	.+2      	; 0x21c6 <main+0x5c4>
    21c4:	43 c0       	rjmp	.+134    	; 0x224c <main+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 57       	subi	r30, 0x77	; 119
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8e 01       	movw	r16, r28
    21e6:	0d 57       	subi	r16, 0x7D	; 125
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	f8 01       	movw	r30, r16
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	1f c0       	rjmp	.+62     	; 0x223c <main+0x63a>
    21fe:	fe 01       	movw	r30, r28
    2200:	ef 57       	subi	r30, 0x7F	; 127
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	88 ec       	ldi	r24, 0xC8	; 200
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
    220c:	fe 01       	movw	r30, r28
    220e:	ef 57       	subi	r30, 0x7F	; 127
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <main+0x614>
    221a:	fe 01       	movw	r30, r28
    221c:	ef 57       	subi	r30, 0x7F	; 127
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	de 01       	movw	r26, r28
    2226:	ad 57       	subi	r26, 0x7D	; 125
    2228:	bf 4f       	sbci	r27, 0xFF	; 255
    222a:	fe 01       	movw	r30, r28
    222c:	ed 57       	subi	r30, 0x7D	; 125
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	11 96       	adiw	r26, 0x01	; 1
    2238:	9c 93       	st	X, r25
    223a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223c:	fe 01       	movw	r30, r28
    223e:	ed 57       	subi	r30, 0x7D	; 125
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	d1 f6       	brne	.-76     	; 0x21fe <main+0x5fc>
    224a:	28 c0       	rjmp	.+80     	; 0x229c <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	8e 01       	movw	r16, r28
    224e:	0d 57       	subi	r16, 0x7D	; 125
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	fe 01       	movw	r30, r28
    2254:	eb 57       	subi	r30, 0x7B	; 123
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	60 81       	ld	r22, Z
    225a:	71 81       	ldd	r23, Z+1	; 0x01
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	f8 01       	movw	r30, r16
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	de 01       	movw	r26, r28
    2270:	a1 58       	subi	r26, 0x81	; 129
    2272:	bf 4f       	sbci	r27, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	ed 57       	subi	r30, 0x7D	; 125
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	9c 93       	st	X, r25
    2282:	8e 93       	st	-X, r24
    2284:	fe 01       	movw	r30, r28
    2286:	e1 58       	subi	r30, 0x81	; 129
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <main+0x68c>
    2292:	fe 01       	movw	r30, r28
    2294:	e1 58       	subi	r30, 0x81	; 129
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24

				/*Delay so that the message is visible*/
				_delay_ms(1000);

				/*Start the alarm if the user reached the max number of wrong attempts*/
				if(wrongPassCounter == WRONG_PASS_MAX)
    229c:	80 91 2a 02 	lds	r24, 0x022A
    22a0:	83 30       	cpi	r24, 0x03	; 3
    22a2:	69 f4       	brne	.+26     	; 0x22be <main+0x6bc>
				{
					/*start the alarm*/
					alarmStart(TOP, N_TICKS_REQUIRED);
    22a4:	8a e1       	ldi	r24, 0x1A	; 26
    22a6:	97 eb       	ldi	r25, 0xB7	; 183
    22a8:	6a e0       	ldi	r22, 0x0A	; 10
    22aa:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <alarmStart>

					/*set a flag, so no action is taken after the alarm stops*/
					intruder_alert = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 28 02 	sts	0x0228, r24

					/*Disable all interfaces until the alarm stops*/
					while(alarmOn_flag);
    22b4:	80 91 2b 02 	lds	r24, 0x022B
    22b8:	88 23       	and	r24, r24
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <main+0x6b2>
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <main+0x6c6>
			/*Clear the flags*/
			intruder_alert = 0;
			wrongPassCounter = 0;

			/*Confirm the password. in case of password mismatch, allow only WRONG_PASS_MAX attempts then set an alarm*/
			while (confirmPass() == CONFIRMATION_FAILED)
    22be:	0e 94 37 18 	call	0x306e	; 0x306e <confirmPass>
    22c2:	88 23       	and	r24, r24
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <main+0x6c6>
    22c6:	1b cf       	rjmp	.-458    	; 0x20fe <main+0x4fc>
					break;
				}
			}

			/*Open the door if the user entered the right password within the number of permissible attempts (the flag is not set) */
			if(intruder_alert == 0)
    22c8:	80 91 28 02 	lds	r24, 0x0228
    22cc:	88 23       	and	r24, r24
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <main+0x6d0>
    22d0:	36 ce       	rjmp	.-916    	; 0x1f3e <main+0x33c>
			{
				/*Send a command to the Control ECU to open the door*/
				UART_sendByte(OPEN_DOOR);
    22d2:	8b ed       	ldi	r24, 0xDB	; 219
    22d4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>

				LCD_clear();
    22d8:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_clear>
				LCD_goToRowCol(0,0);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
				LCD_displayString("Openning ...");
    22e4:	84 ef       	ldi	r24, 0xF4	; 244
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    22ec:	fe 01       	movw	r30, r28
    22ee:	e5 58       	subi	r30, 0x85	; 133
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e4       	ldi	r25, 0x40	; 64
    22f6:	ac e9       	ldi	r26, 0x9C	; 156
    22f8:	b5 e4       	ldi	r27, 0x45	; 69
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	09 58       	subi	r16, 0x89	; 137
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	e5 58       	subi	r30, 0x85	; 133
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a ef       	ldi	r20, 0xFA	; 250
    231c:	54 e4       	ldi	r21, 0x44	; 68
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	e9 58       	subi	r30, 0x89	; 137
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	44 f4       	brge	.+16     	; 0x235e <main+0x75c>
		__ticks = 1;
    234e:	fe 01       	movw	r30, r28
    2350:	eb 58       	subi	r30, 0x8B	; 139
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	64 c0       	rjmp	.+200    	; 0x2426 <main+0x824>
	else if (__tmp > 65535)
    235e:	fe 01       	movw	r30, r28
    2360:	e9 58       	subi	r30, 0x89	; 137
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <main+0x77c>
    237c:	43 c0       	rjmp	.+134    	; 0x2404 <main+0x802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	fe 01       	movw	r30, r28
    2380:	e5 58       	subi	r30, 0x85	; 133
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8e 01       	movw	r16, r28
    239e:	0b 58       	subi	r16, 0x8B	; 139
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	f8 01       	movw	r30, r16
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	1f c0       	rjmp	.+62     	; 0x23f4 <main+0x7f2>
    23b6:	fe 01       	movw	r30, r28
    23b8:	ed 58       	subi	r30, 0x8D	; 141
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	fe 01       	movw	r30, r28
    23c6:	ed 58       	subi	r30, 0x8D	; 141
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <main+0x7cc>
    23d2:	fe 01       	movw	r30, r28
    23d4:	ed 58       	subi	r30, 0x8D	; 141
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	de 01       	movw	r26, r28
    23de:	ab 58       	subi	r26, 0x8B	; 139
    23e0:	bf 4f       	sbci	r27, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	eb 58       	subi	r30, 0x8B	; 139
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	11 96       	adiw	r26, 0x01	; 1
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	fe 01       	movw	r30, r28
    23f6:	eb 58       	subi	r30, 0x8B	; 139
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	d1 f6       	brne	.-76     	; 0x23b6 <main+0x7b4>
    2402:	27 c0       	rjmp	.+78     	; 0x2452 <main+0x850>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	8e 01       	movw	r16, r28
    2406:	0b 58       	subi	r16, 0x8B	; 139
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e9 58       	subi	r30, 0x89	; 137
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	de 01       	movw	r26, r28
    2428:	af 58       	subi	r26, 0x8F	; 143
    242a:	bf 4f       	sbci	r27, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	eb 58       	subi	r30, 0x8B	; 139
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	8d 93       	st	X+, r24
    2438:	9c 93       	st	X, r25
    243a:	fe 01       	movw	r30, r28
    243c:	ef 58       	subi	r30, 0x8F	; 143
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <main+0x842>
    2448:	fe 01       	movw	r30, r28
    244a:	ef 58       	subi	r30, 0x8F	; 143
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
    2452:	fe 01       	movw	r30, r28
    2454:	e3 59       	subi	r30, 0x93	; 147
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e4       	ldi	r25, 0x40	; 64
    245c:	ac e9       	ldi	r26, 0x9C	; 156
    245e:	b5 e4       	ldi	r27, 0x45	; 69
    2460:	80 83       	st	Z, r24
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	a2 83       	std	Z+2, r26	; 0x02
    2466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	8e 01       	movw	r16, r28
    246a:	07 59       	subi	r16, 0x97	; 151
    246c:	1f 4f       	sbci	r17, 0xFF	; 255
    246e:	fe 01       	movw	r30, r28
    2470:	e3 59       	subi	r30, 0x93	; 147
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	60 81       	ld	r22, Z
    2476:	71 81       	ldd	r23, Z+1	; 0x01
    2478:	82 81       	ldd	r24, Z+2	; 0x02
    247a:	93 81       	ldd	r25, Z+3	; 0x03
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a ef       	ldi	r20, 0xFA	; 250
    2482:	54 e4       	ldi	r21, 0x44	; 68
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	f8 01       	movw	r30, r16
    248e:	80 83       	st	Z, r24
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	a2 83       	std	Z+2, r26	; 0x02
    2494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2496:	fe 01       	movw	r30, r28
    2498:	e7 59       	subi	r30, 0x97	; 151
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	44 f4       	brge	.+16     	; 0x24c4 <main+0x8c2>
		__ticks = 1;
    24b4:	fe 01       	movw	r30, r28
    24b6:	e9 59       	subi	r30, 0x99	; 153
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	64 c0       	rjmp	.+200    	; 0x258c <main+0x98a>
	else if (__tmp > 65535)
    24c4:	fe 01       	movw	r30, r28
    24c6:	e7 59       	subi	r30, 0x97	; 151
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	0c f0       	brlt	.+2      	; 0x24e4 <main+0x8e2>
    24e2:	43 c0       	rjmp	.+134    	; 0x256a <main+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 59       	subi	r30, 0x93	; 147
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8e 01       	movw	r16, r28
    2504:	09 59       	subi	r16, 0x99	; 153
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	f8 01       	movw	r30, r16
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	1f c0       	rjmp	.+62     	; 0x255a <main+0x958>
    251c:	fe 01       	movw	r30, r28
    251e:	eb 59       	subi	r30, 0x9B	; 155
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	88 ec       	ldi	r24, 0xC8	; 200
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
    252a:	fe 01       	movw	r30, r28
    252c:	eb 59       	subi	r30, 0x9B	; 155
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <main+0x932>
    2538:	fe 01       	movw	r30, r28
    253a:	eb 59       	subi	r30, 0x9B	; 155
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	de 01       	movw	r26, r28
    2544:	a9 59       	subi	r26, 0x99	; 153
    2546:	bf 4f       	sbci	r27, 0xFF	; 255
    2548:	fe 01       	movw	r30, r28
    254a:	e9 59       	subi	r30, 0x99	; 153
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	11 96       	adiw	r26, 0x01	; 1
    2556:	9c 93       	st	X, r25
    2558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	fe 01       	movw	r30, r28
    255c:	e9 59       	subi	r30, 0x99	; 153
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	d1 f6       	brne	.-76     	; 0x251c <main+0x91a>
    2568:	27 c0       	rjmp	.+78     	; 0x25b8 <main+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	8e 01       	movw	r16, r28
    256c:	09 59       	subi	r16, 0x99	; 153
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	e7 59       	subi	r30, 0x97	; 151
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	de 01       	movw	r26, r28
    258e:	ad 59       	subi	r26, 0x9D	; 157
    2590:	bf 4f       	sbci	r27, 0xFF	; 255
    2592:	fe 01       	movw	r30, r28
    2594:	e9 59       	subi	r30, 0x99	; 153
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	8d 93       	st	X+, r24
    259e:	9c 93       	st	X, r25
    25a0:	fe 01       	movw	r30, r28
    25a2:	ed 59       	subi	r30, 0x9D	; 157
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <main+0x9a8>
    25ae:	fe 01       	movw	r30, r28
    25b0:	ed 59       	subi	r30, 0x9D	; 157
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    25b8:	fe 01       	movw	r30, r28
    25ba:	e1 5a       	subi	r30, 0xA1	; 161
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e4       	ldi	r25, 0x40	; 64
    25c2:	ac e9       	ldi	r26, 0x9C	; 156
    25c4:	b5 e4       	ldi	r27, 0x45	; 69
    25c6:	80 83       	st	Z, r24
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	a2 83       	std	Z+2, r26	; 0x02
    25cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	8e 01       	movw	r16, r28
    25d0:	05 5a       	subi	r16, 0xA5	; 165
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	fe 01       	movw	r30, r28
    25d6:	e1 5a       	subi	r30, 0xA1	; 161
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	4a ef       	ldi	r20, 0xFA	; 250
    25e8:	54 e4       	ldi	r21, 0x44	; 68
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	f8 01       	movw	r30, r16
    25f4:	80 83       	st	Z, r24
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	a2 83       	std	Z+2, r26	; 0x02
    25fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25fc:	fe 01       	movw	r30, r28
    25fe:	e5 5a       	subi	r30, 0xA5	; 165
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	44 f4       	brge	.+16     	; 0x262a <main+0xa28>
		__ticks = 1;
    261a:	fe 01       	movw	r30, r28
    261c:	e7 5a       	subi	r30, 0xA7	; 167
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	64 c0       	rjmp	.+200    	; 0x26f2 <main+0xaf0>
	else if (__tmp > 65535)
    262a:	fe 01       	movw	r30, r28
    262c:	e5 5a       	subi	r30, 0xA5	; 165
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	0c f0       	brlt	.+2      	; 0x264a <main+0xa48>
    2648:	43 c0       	rjmp	.+134    	; 0x26d0 <main+0xace>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264a:	fe 01       	movw	r30, r28
    264c:	e1 5a       	subi	r30, 0xA1	; 161
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	8e 01       	movw	r16, r28
    266a:	07 5a       	subi	r16, 0xA7	; 167
    266c:	1f 4f       	sbci	r17, 0xFF	; 255
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	1f c0       	rjmp	.+62     	; 0x26c0 <main+0xabe>
    2682:	fe 01       	movw	r30, r28
    2684:	e9 5a       	subi	r30, 0xA9	; 169
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	88 ec       	ldi	r24, 0xC8	; 200
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	fe 01       	movw	r30, r28
    2692:	e9 5a       	subi	r30, 0xA9	; 169
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <main+0xa98>
    269e:	fe 01       	movw	r30, r28
    26a0:	e9 5a       	subi	r30, 0xA9	; 169
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	de 01       	movw	r26, r28
    26aa:	a7 5a       	subi	r26, 0xA7	; 167
    26ac:	bf 4f       	sbci	r27, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5a       	subi	r30, 0xA7	; 167
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	11 96       	adiw	r26, 0x01	; 1
    26bc:	9c 93       	st	X, r25
    26be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	fe 01       	movw	r30, r28
    26c2:	e7 5a       	subi	r30, 0xA7	; 167
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	d1 f6       	brne	.-76     	; 0x2682 <main+0xa80>
    26ce:	27 c0       	rjmp	.+78     	; 0x271e <main+0xb1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	8e 01       	movw	r16, r28
    26d2:	07 5a       	subi	r16, 0xA7	; 167
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5a       	subi	r30, 0xA5	; 165
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	de 01       	movw	r26, r28
    26f4:	ab 5a       	subi	r26, 0xAB	; 171
    26f6:	bf 4f       	sbci	r27, 0xFF	; 255
    26f8:	fe 01       	movw	r30, r28
    26fa:	e7 5a       	subi	r30, 0xA7	; 167
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	8d 93       	st	X+, r24
    2704:	9c 93       	st	X, r25
    2706:	fe 01       	movw	r30, r28
    2708:	eb 5a       	subi	r30, 0xAB	; 171
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <main+0xb0e>
    2714:	fe 01       	movw	r30, r28
    2716:	eb 5a       	subi	r30, 0xAB	; 171
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
				_delay_ms(5000);
				_delay_ms(5000);


				/*Send a command to the Control ECU to close the door*/
				UART_sendByte(CLOSE_DOOR);
    271e:	8d eb       	ldi	r24, 0xBD	; 189
    2720:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>

				LCD_goToRowCol(0,0);
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
				LCD_displayString("Closing ... ");
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	91 e0       	ldi	r25, 0x01	; 1
    2730:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    2734:	fe 01       	movw	r30, r28
    2736:	ef 5a       	subi	r30, 0xAF	; 175
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e4       	ldi	r25, 0x40	; 64
    273e:	ac e9       	ldi	r26, 0x9C	; 156
    2740:	b5 e4       	ldi	r27, 0x45	; 69
    2742:	80 83       	st	Z, r24
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	a2 83       	std	Z+2, r26	; 0x02
    2748:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	8e 01       	movw	r16, r28
    274c:	03 5b       	subi	r16, 0xB3	; 179
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	fe 01       	movw	r30, r28
    2752:	ef 5a       	subi	r30, 0xAF	; 175
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	f8 01       	movw	r30, r16
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2778:	fe 01       	movw	r30, r28
    277a:	e3 5b       	subi	r30, 0xB3	; 179
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	44 f4       	brge	.+16     	; 0x27a6 <main+0xba4>
		__ticks = 1;
    2796:	fe 01       	movw	r30, r28
    2798:	e5 5b       	subi	r30, 0xB5	; 181
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	64 c0       	rjmp	.+200    	; 0x286e <main+0xc6c>
	else if (__tmp > 65535)
    27a6:	fe 01       	movw	r30, r28
    27a8:	e3 5b       	subi	r30, 0xB3	; 179
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	4f e7       	ldi	r20, 0x7F	; 127
    27ba:	57 e4       	ldi	r21, 0x47	; 71
    27bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c0:	18 16       	cp	r1, r24
    27c2:	0c f0       	brlt	.+2      	; 0x27c6 <main+0xbc4>
    27c4:	43 c0       	rjmp	.+134    	; 0x284c <main+0xc4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	fe 01       	movw	r30, r28
    27c8:	ef 5a       	subi	r30, 0xAF	; 175
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8e 01       	movw	r16, r28
    27e6:	05 5b       	subi	r16, 0xB5	; 181
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	80 83       	st	Z, r24
    27fc:	1f c0       	rjmp	.+62     	; 0x283c <main+0xc3a>
    27fe:	fe 01       	movw	r30, r28
    2800:	e7 5b       	subi	r30, 0xB7	; 183
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	88 ec       	ldi	r24, 0xC8	; 200
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	fe 01       	movw	r30, r28
    280e:	e7 5b       	subi	r30, 0xB7	; 183
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <main+0xc14>
    281a:	fe 01       	movw	r30, r28
    281c:	e7 5b       	subi	r30, 0xB7	; 183
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	de 01       	movw	r26, r28
    2826:	a5 5b       	subi	r26, 0xB5	; 181
    2828:	bf 4f       	sbci	r27, 0xFF	; 255
    282a:	fe 01       	movw	r30, r28
    282c:	e5 5b       	subi	r30, 0xB5	; 181
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	91 81       	ldd	r25, Z+1	; 0x01
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	11 96       	adiw	r26, 0x01	; 1
    2838:	9c 93       	st	X, r25
    283a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	fe 01       	movw	r30, r28
    283e:	e5 5b       	subi	r30, 0xB5	; 181
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	d1 f6       	brne	.-76     	; 0x27fe <main+0xbfc>
    284a:	27 c0       	rjmp	.+78     	; 0x289a <main+0xc98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284c:	8e 01       	movw	r16, r28
    284e:	05 5b       	subi	r16, 0xB5	; 181
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	e3 5b       	subi	r30, 0xB3	; 179
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	60 81       	ld	r22, Z
    285a:	71 81       	ldd	r23, Z+1	; 0x01
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	f8 01       	movw	r30, r16
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
    286e:	de 01       	movw	r26, r28
    2870:	a9 5b       	subi	r26, 0xB9	; 185
    2872:	bf 4f       	sbci	r27, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	e5 5b       	subi	r30, 0xB5	; 181
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	91 81       	ldd	r25, Z+1	; 0x01
    287e:	8d 93       	st	X+, r24
    2880:	9c 93       	st	X, r25
    2882:	fe 01       	movw	r30, r28
    2884:	e9 5b       	subi	r30, 0xB9	; 185
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <main+0xc8a>
    2890:	fe 01       	movw	r30, r28
    2892:	e9 5b       	subi	r30, 0xB9	; 185
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
    289a:	fe 01       	movw	r30, r28
    289c:	ed 5b       	subi	r30, 0xBD	; 189
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e4       	ldi	r25, 0x40	; 64
    28a4:	ac e9       	ldi	r26, 0x9C	; 156
    28a6:	b5 e4       	ldi	r27, 0x45	; 69
    28a8:	80 83       	st	Z, r24
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	a2 83       	std	Z+2, r26	; 0x02
    28ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b0:	8e 01       	movw	r16, r28
    28b2:	01 5c       	subi	r16, 0xC1	; 193
    28b4:	1f 4f       	sbci	r17, 0xFF	; 255
    28b6:	fe 01       	movw	r30, r28
    28b8:	ed 5b       	subi	r30, 0xBD	; 189
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a ef       	ldi	r20, 0xFA	; 250
    28ca:	54 e4       	ldi	r21, 0x44	; 68
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28de:	fe 01       	movw	r30, r28
    28e0:	ff 96       	adiw	r30, 0x3f	; 63
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <main+0xd02>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9e af       	std	Y+62, r25	; 0x3e
    2900:	8d af       	std	Y+61, r24	; 0x3d
    2902:	46 c0       	rjmp	.+140    	; 0x2990 <main+0xd8e>
	else if (__tmp > 65535)
    2904:	fe 01       	movw	r30, r28
    2906:	ff 96       	adiw	r30, 0x3f	; 63
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	57 e4       	ldi	r21, 0x47	; 71
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	64 f5       	brge	.+88     	; 0x2978 <main+0xd76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2920:	fe 01       	movw	r30, r28
    2922:	ed 5b       	subi	r30, 0xBD	; 189
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9e af       	std	Y+62, r25	; 0x3e
    294c:	8d af       	std	Y+61, r24	; 0x3d
    294e:	0f c0       	rjmp	.+30     	; 0x296e <main+0xd6c>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9c af       	std	Y+60, r25	; 0x3c
    2956:	8b af       	std	Y+59, r24	; 0x3b
    2958:	8b ad       	ldd	r24, Y+59	; 0x3b
    295a:	9c ad       	ldd	r25, Y+60	; 0x3c
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <main+0xd5a>
    2960:	9c af       	std	Y+60, r25	; 0x3c
    2962:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8d ad       	ldd	r24, Y+61	; 0x3d
    2966:	9e ad       	ldd	r25, Y+62	; 0x3e
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9e af       	std	Y+62, r25	; 0x3e
    296c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2970:	9e ad       	ldd	r25, Y+62	; 0x3e
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <main+0xd4e>
    2976:	16 c0       	rjmp	.+44     	; 0x29a4 <main+0xda2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	fe 01       	movw	r30, r28
    297a:	ff 96       	adiw	r30, 0x3f	; 63
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9e af       	std	Y+62, r25	; 0x3e
    298e:	8d af       	std	Y+61, r24	; 0x3d
    2990:	8d ad       	ldd	r24, Y+61	; 0x3d
    2992:	9e ad       	ldd	r25, Y+62	; 0x3e
    2994:	9a af       	std	Y+58, r25	; 0x3a
    2996:	89 af       	std	Y+57, r24	; 0x39
    2998:	89 ad       	ldd	r24, Y+57	; 0x39
    299a:	9a ad       	ldd	r25, Y+58	; 0x3a
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <main+0xd9a>
    29a0:	9a af       	std	Y+58, r25	; 0x3a
    29a2:	89 af       	std	Y+57, r24	; 0x39
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e4       	ldi	r25, 0x40	; 64
    29a8:	ac e9       	ldi	r26, 0x9C	; 156
    29aa:	b5 e4       	ldi	r27, 0x45	; 69
    29ac:	8d ab       	std	Y+53, r24	; 0x35
    29ae:	9e ab       	std	Y+54, r25	; 0x36
    29b0:	af ab       	std	Y+55, r26	; 0x37
    29b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b4:	6d a9       	ldd	r22, Y+53	; 0x35
    29b6:	7e a9       	ldd	r23, Y+54	; 0x36
    29b8:	8f a9       	ldd	r24, Y+55	; 0x37
    29ba:	98 ad       	ldd	r25, Y+56	; 0x38
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	4a ef       	ldi	r20, 0xFA	; 250
    29c2:	54 e4       	ldi	r21, 0x44	; 68
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	89 ab       	std	Y+49, r24	; 0x31
    29ce:	9a ab       	std	Y+50, r25	; 0x32
    29d0:	ab ab       	std	Y+51, r26	; 0x33
    29d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29d4:	69 a9       	ldd	r22, Y+49	; 0x31
    29d6:	7a a9       	ldd	r23, Y+50	; 0x32
    29d8:	8b a9       	ldd	r24, Y+51	; 0x33
    29da:	9c a9       	ldd	r25, Y+52	; 0x34
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e8       	ldi	r20, 0x80	; 128
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e8:	88 23       	and	r24, r24
    29ea:	2c f4       	brge	.+10     	; 0x29f6 <main+0xdf4>
		__ticks = 1;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	98 ab       	std	Y+48, r25	; 0x30
    29f2:	8f a7       	std	Y+47, r24	; 0x2f
    29f4:	3f c0       	rjmp	.+126    	; 0x2a74 <main+0xe72>
	else if (__tmp > 65535)
    29f6:	69 a9       	ldd	r22, Y+49	; 0x31
    29f8:	7a a9       	ldd	r23, Y+50	; 0x32
    29fa:	8b a9       	ldd	r24, Y+51	; 0x33
    29fc:	9c a9       	ldd	r25, Y+52	; 0x34
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	4f e7       	ldi	r20, 0x7F	; 127
    2a04:	57 e4       	ldi	r21, 0x47	; 71
    2a06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0a:	18 16       	cp	r1, r24
    2a0c:	4c f5       	brge	.+82     	; 0x2a60 <main+0xe5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a10:	7e a9       	ldd	r23, Y+54	; 0x36
    2a12:	8f a9       	ldd	r24, Y+55	; 0x37
    2a14:	98 ad       	ldd	r25, Y+56	; 0x38
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e2       	ldi	r20, 0x20	; 32
    2a1c:	51 e4       	ldi	r21, 0x41	; 65
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	98 ab       	std	Y+48, r25	; 0x30
    2a34:	8f a7       	std	Y+47, r24	; 0x2f
    2a36:	0f c0       	rjmp	.+30     	; 0x2a56 <main+0xe54>
    2a38:	88 ec       	ldi	r24, 0xC8	; 200
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9e a7       	std	Y+46, r25	; 0x2e
    2a3e:	8d a7       	std	Y+45, r24	; 0x2d
    2a40:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a42:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <main+0xe42>
    2a48:	9e a7       	std	Y+46, r25	; 0x2e
    2a4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	98 ab       	std	Y+48, r25	; 0x30
    2a54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a58:	98 a9       	ldd	r25, Y+48	; 0x30
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <main+0xe36>
    2a5e:	6f ca       	rjmp	.-2850   	; 0x1f3e <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a60:	69 a9       	ldd	r22, Y+49	; 0x31
    2a62:	7a a9       	ldd	r23, Y+50	; 0x32
    2a64:	8b a9       	ldd	r24, Y+51	; 0x33
    2a66:	9c a9       	ldd	r25, Y+52	; 0x34
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	98 ab       	std	Y+48, r25	; 0x30
    2a72:	8f a7       	std	Y+47, r24	; 0x2f
    2a74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a76:	98 a9       	ldd	r25, Y+48	; 0x30
    2a78:	9c a7       	std	Y+44, r25	; 0x2c
    2a7a:	8b a7       	std	Y+43, r24	; 0x2b
    2a7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <main+0xe7e>
    2a84:	9c a7       	std	Y+44, r25	; 0x2c
    2a86:	8b a7       	std	Y+43, r24	; 0x2b
    2a88:	5a ca       	rjmp	.-2892   	; 0x1f3e <main+0x33c>
				_delay_ms(5000);
				_delay_ms(5000);
			}
		}

		else if(key == '-')
    2a8a:	80 91 29 02 	lds	r24, 0x0229
    2a8e:	8d 32       	cpi	r24, 0x2D	; 45
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <main+0xe92>
    2a92:	55 ca       	rjmp	.-2902   	; 0x1f3e <main+0x33c>
		{
			/*Confirm the old password before changing it*/
			if (confirmPass() == CONFIRMATION_PASSED)
    2a94:	0e 94 37 18 	call	0x306e	; 0x306e <confirmPass>
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <main+0xe9c>
    2a9c:	ff c0       	rjmp	.+510    	; 0x2c9c <main+0x109a>
			{
				/*Set the new password*/
				setNewPass();
    2a9e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <setNewPass>
    2aa2:	7c c0       	rjmp	.+248    	; 0x2b9c <main+0xf9a>

				/*Confirm the password. in case of password mismatch, repeat the process of setting new password and confirming*/
				while (confirmPass() == CONFIRMATION_FAILED)
				{
					/*Notify the user about the confirmation failure*/
					LCD_goToRowCol(0,0);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
					LCD_displayString("Confirmation Failed           ");
    2aac:	80 e6       	ldi	r24, 0x60	; 96
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	aa ef       	ldi	r26, 0xFA	; 250
    2aba:	b3 e4       	ldi	r27, 0x43	; 67
    2abc:	8f a3       	std	Y+39, r24	; 0x27
    2abe:	98 a7       	std	Y+40, r25	; 0x28
    2ac0:	a9 a7       	std	Y+41, r26	; 0x29
    2ac2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ac6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ac8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4a ef       	ldi	r20, 0xFA	; 250
    2ad2:	54 e4       	ldi	r21, 0x44	; 68
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	8b a3       	std	Y+35, r24	; 0x23
    2ade:	9c a3       	std	Y+36, r25	; 0x24
    2ae0:	ad a3       	std	Y+37, r26	; 0x25
    2ae2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ae4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aea:	9e a1       	ldd	r25, Y+38	; 0x26
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	2c f4       	brge	.+10     	; 0x2b06 <main+0xf04>
		__ticks = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9a a3       	std	Y+34, r25	; 0x22
    2b02:	89 a3       	std	Y+33, r24	; 0x21
    2b04:	3f c0       	rjmp	.+126    	; 0x2b84 <main+0xf82>
	else if (__tmp > 65535)
    2b06:	6b a1       	ldd	r22, Y+35	; 0x23
    2b08:	7c a1       	ldd	r23, Y+36	; 0x24
    2b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	4c f5       	brge	.+82     	; 0x2b70 <main+0xf6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b20:	78 a5       	ldd	r23, Y+40	; 0x28
    2b22:	89 a5       	ldd	r24, Y+41	; 0x29
    2b24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9a a3       	std	Y+34, r25	; 0x22
    2b44:	89 a3       	std	Y+33, r24	; 0x21
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <main+0xf64>
    2b48:	88 ec       	ldi	r24, 0xC8	; 200
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	98 a3       	std	Y+32, r25	; 0x20
    2b4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b52:	98 a1       	ldd	r25, Y+32	; 0x20
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <main+0xf52>
    2b58:	98 a3       	std	Y+32, r25	; 0x20
    2b5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9a a3       	std	Y+34, r25	; 0x22
    2b64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	89 a1       	ldd	r24, Y+33	; 0x21
    2b68:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <main+0xf46>
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <main+0xf96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	6b a1       	ldd	r22, Y+35	; 0x23
    2b72:	7c a1       	ldd	r23, Y+36	; 0x24
    2b74:	8d a1       	ldd	r24, Y+37	; 0x25
    2b76:	9e a1       	ldd	r25, Y+38	; 0x26
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9a a3       	std	Y+34, r25	; 0x22
    2b82:	89 a3       	std	Y+33, r24	; 0x21
    2b84:	89 a1       	ldd	r24, Y+33	; 0x21
    2b86:	9a a1       	ldd	r25, Y+34	; 0x22
    2b88:	9e 8f       	std	Y+30, r25	; 0x1e
    2b8a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <main+0xf8e>
    2b94:	9e 8f       	std	Y+30, r25	; 0x1e
    2b96:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);

					setNewPass();
    2b98:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <setNewPass>
			{
				/*Set the new password*/
				setNewPass();

				/*Confirm the password. in case of password mismatch, repeat the process of setting new password and confirming*/
				while (confirmPass() == CONFIRMATION_FAILED)
    2b9c:	0e 94 37 18 	call	0x306e	; 0x306e <confirmPass>
    2ba0:	88 23       	and	r24, r24
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <main+0xfa4>
    2ba4:	7f cf       	rjmp	.-258    	; 0x2aa4 <main+0xea2>
					_delay_ms(500);

					setNewPass();
				}

				LCD_goToRowCol(0,0);
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
				LCD_displayString("Password Changed Successfully     ");
    2bae:	8e e0       	ldi	r24, 0x0E	; 14
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	aa ef       	ldi	r26, 0xFA	; 250
    2bbc:	b3 e4       	ldi	r27, 0x43	; 67
    2bbe:	89 8f       	std	Y+25, r24	; 0x19
    2bc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc2:	ab 8f       	std	Y+27, r26	; 0x1b
    2bc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8d 8b       	std	Y+21, r24	; 0x15
    2be0:	9e 8b       	std	Y+22, r25	; 0x16
    2be2:	af 8b       	std	Y+23, r26	; 0x17
    2be4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2be6:	6d 89       	ldd	r22, Y+21	; 0x15
    2be8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bea:	8f 89       	ldd	r24, Y+23	; 0x17
    2bec:	98 8d       	ldd	r25, Y+24	; 0x18
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <main+0x1006>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9c 8b       	std	Y+20, r25	; 0x14
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <main+0x1084>
	else if (__tmp > 65535)
    2c08:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <main+0x1070>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	69 8d       	ldd	r22, Y+25	; 0x19
    2c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9c 8b       	std	Y+20, r25	; 0x14
    2c46:	8b 8b       	std	Y+19, r24	; 0x13
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <main+0x1066>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9a 8b       	std	Y+18, r25	; 0x12
    2c50:	89 8b       	std	Y+17, r24	; 0x11
    2c52:	89 89       	ldd	r24, Y+17	; 0x11
    2c54:	9a 89       	ldd	r25, Y+18	; 0x12
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <main+0x1054>
    2c5a:	9a 8b       	std	Y+18, r25	; 0x12
    2c5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c60:	9c 89       	ldd	r25, Y+20	; 0x14
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9c 8b       	std	Y+20, r25	; 0x14
    2c66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <main+0x1048>
    2c70:	66 c9       	rjmp	.-3380   	; 0x1f3e <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6d 89       	ldd	r22, Y+21	; 0x15
    2c74:	7e 89       	ldd	r23, Y+22	; 0x16
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9c 8b       	std	Y+20, r25	; 0x14
    2c84:	8b 8b       	std	Y+19, r24	; 0x13
    2c86:	8b 89       	ldd	r24, Y+19	; 0x13
    2c88:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8a:	98 8b       	std	Y+16, r25	; 0x10
    2c8c:	8f 87       	std	Y+15, r24	; 0x0f
    2c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c90:	98 89       	ldd	r25, Y+16	; 0x10
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <main+0x1090>
    2c96:	98 8b       	std	Y+16, r25	; 0x10
    2c98:	8f 87       	std	Y+15, r24	; 0x0f
    2c9a:	51 c9       	rjmp	.-3422   	; 0x1f3e <main+0x33c>
			}

			/*If confirmation failed, display a message then return to the main options*/
			else
			{
				LCD_goToRowCol(0,0);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
				LCD_displayString("Confirmation Failed           ");
    2ca4:	80 e6       	ldi	r24, 0x60	; 96
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	aa ef       	ldi	r26, 0xFA	; 250
    2cb2:	b3 e4       	ldi	r27, 0x43	; 67
    2cb4:	8b 87       	std	Y+11, r24	; 0x0b
    2cb6:	9c 87       	std	Y+12, r25	; 0x0c
    2cb8:	ad 87       	std	Y+13, r26	; 0x0d
    2cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a ef       	ldi	r20, 0xFA	; 250
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8f 83       	std	Y+7, r24	; 0x07
    2cd6:	98 87       	std	Y+8, r25	; 0x08
    2cd8:	a9 87       	std	Y+9, r26	; 0x09
    2cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cde:	78 85       	ldd	r23, Y+8	; 0x08
    2ce0:	89 85       	ldd	r24, Y+9	; 0x09
    2ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <main+0x10fc>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <main+0x117a>
	else if (__tmp > 65535)
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <main+0x1166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <main+0x115c>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9c 83       	std	Y+4, r25	; 0x04
    2d46:	8b 83       	std	Y+3, r24	; 0x03
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <main+0x114a>
    2d50:	9c 83       	std	Y+4, r25	; 0x04
    2d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8d 81       	ldd	r24, Y+5	; 0x05
    2d56:	9e 81       	ldd	r25, Y+6	; 0x06
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <main+0x113e>
    2d66:	eb c8       	rjmp	.-3626   	; 0x1f3e <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6a:	78 85       	ldd	r23, Y+8	; 0x08
    2d6c:	89 85       	ldd	r24, Y+9	; 0x09
    2d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	9a 81       	ldd	r25, Y+2	; 0x02
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <main+0x1186>
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
    2d90:	d6 c8       	rjmp	.-3668   	; 0x1f3e <main+0x33c>

00002d92 <alarmStart>:
* 		counterTop: TOP value to be compared with the counter value.
 * 		n_ticksRequired: Number of ticks required to count the required time, given the specified counterTop.
 * [Return]: None
 -------------------------------------------*/
void alarmStart(uint16 counterTop, uint8 n_ticksRequired)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <alarmStart+0x6>
    2d98:	0f 92       	push	r0
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	6b 83       	std	Y+3, r22	; 0x03
	/*Set the callback function*/
	Ocu_setCbk(alarmStop);
    2da4:	81 ef       	ldi	r24, 0xF1	; 241
    2da6:	96 e1       	ldi	r25, 0x16	; 22
    2da8:	0e 94 b7 0b 	call	0x176e	; 0x176e <Ocu_setCbk>

	/*Send a command to the Control ECU to start the alarm*/
	UART_sendByte(START_ALARM);
    2dac:	8a e8       	ldi	r24, 0x8A	; 138
    2dae:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>

	alarmOn_flag = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	80 93 2b 02 	sts	0x022B, r24
	LCD_clear();
    2db8:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_clear>
	LCD_goToRowCol(0,7);
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	67 e0       	ldi	r22, 0x07	; 7
    2dc0:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("INTRUDER ALERT!!! ");
    2dc4:	81 e3       	ldi	r24, 0x31	; 49
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>



	/*start the timer*/
	Ocu_start(counterTop, n_ticksRequired);
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	6b 81       	ldd	r22, Y+3	; 0x03
    2dd2:	0e 94 06 0c 	call	0x180c	; 0x180c <Ocu_start>


}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <alarmStop>:
 * [Description]: a callback function that is executed when a specified time period has passed
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void alarmStop()
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
	alarmOn_flag = 0;
    2dea:	10 92 2b 02 	sts	0x022B, r1

	/*stop the timer*/
	Ocu_stop();
    2dee:	0e 94 29 0c 	call	0x1852	; 0x1852 <Ocu_stop>
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <setNewPass>:
 * [Description]: lets the user set a new password that would be saved in the EEPROM
 * [Args]: None
 * [Return]: None
 -------------------------------------------*/
void setNewPass()
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	6c 97       	sbiw	r28, 0x1c	; 28
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
	/*Send a command to the Control ECU to start saving the received password*/
	UART_sendByte(SET_NEW_PASS);
    2e0c:	80 ef       	ldi	r24, 0xF0	; 240
    2e0e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>

	/*Display instructions for the user*/
	LCD_goToRowCol(0,0);
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("Please Enter New Pass:        ");
    2e1a:	84 e4       	ldi	r24, 0x44	; 68
    2e1c:	91 e0       	ldi	r25, 0x01	; 1
    2e1e:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
	LCD_goToRowCol(1,0);
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	60 e0       	ldi	r22, 0x00	; 0
    2e26:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("-----                  ");
    2e2a:	83 e6       	ldi	r24, 0x63	; 99
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>

	/*initialize the digits counter*/
	password_counter = 0;
    2e32:	10 92 2c 02 	sts	0x022C, r1

	/*move the cursor to the beginning of the second row, where the password is to be displayed*/
	LCD_goToRowCol(1,0);
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
    2e3e:	82 c0       	rjmp	.+260    	; 0x2f44 <setNewPass+0x14c>

	/*Enter 5 digits, and transmit them to the Control ECU*/
	while(password_counter < PASSWORD_LENGTH)
	{
		key_f = keypad_getPressedKey();
    2e40:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    2e44:	80 93 2d 02 	sts	0x022D, r24

		/*Send the digit to the Control ECU*/
		UART_sendByte(key_f);
    2e48:	80 91 2d 02 	lds	r24, 0x022D
    2e4c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a8 ec       	ldi	r26, 0xC8	; 200
    2e56:	b3 e4       	ldi	r27, 0x43	; 67
    2e58:	89 8f       	std	Y+25, r24	; 0x19
    2e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	69 8d       	ldd	r22, Y+25	; 0x19
    2e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a ef       	ldi	r20, 0xFA	; 250
    2e6e:	54 e4       	ldi	r21, 0x44	; 68
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8d 8b       	std	Y+21, r24	; 0x15
    2e7a:	9e 8b       	std	Y+22, r25	; 0x16
    2e7c:	af 8b       	std	Y+23, r26	; 0x17
    2e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <setNewPass+0xaa>
		__ticks = 1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	3f c0       	rjmp	.+126    	; 0x2f20 <setNewPass+0x128>
	else if (__tmp > 65535)
    2ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	4c f5       	brge	.+82     	; 0x2f0c <setNewPass+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	69 8d       	ldd	r22, Y+25	; 0x19
    2ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9c 8b       	std	Y+20, r25	; 0x14
    2ee0:	8b 8b       	std	Y+19, r24	; 0x13
    2ee2:	0f c0       	rjmp	.+30     	; 0x2f02 <setNewPass+0x10a>
    2ee4:	88 ec       	ldi	r24, 0xC8	; 200
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9a 8b       	std	Y+18, r25	; 0x12
    2eea:	89 8b       	std	Y+17, r24	; 0x11
    2eec:	89 89       	ldd	r24, Y+17	; 0x11
    2eee:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <setNewPass+0xf8>
    2ef4:	9a 8b       	std	Y+18, r25	; 0x12
    2ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	9c 8b       	std	Y+20, r25	; 0x14
    2f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	69 f7       	brne	.-38     	; 0x2ee4 <setNewPass+0xec>
    2f0a:	14 c0       	rjmp	.+40     	; 0x2f34 <setNewPass+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f10:	8f 89       	ldd	r24, Y+23	; 0x17
    2f12:	98 8d       	ldd	r25, Y+24	; 0x18
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9c 8b       	std	Y+20, r25	; 0x14
    2f1e:	8b 8b       	std	Y+19, r24	; 0x13
    2f20:	8b 89       	ldd	r24, Y+19	; 0x13
    2f22:	9c 89       	ldd	r25, Y+20	; 0x14
    2f24:	98 8b       	std	Y+16, r25	; 0x10
    2f26:	8f 87       	std	Y+15, r24	; 0x0f
    2f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2a:	98 89       	ldd	r25, Y+16	; 0x10
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <setNewPass+0x134>
    2f30:	98 8b       	std	Y+16, r25	; 0x10
    2f32:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay to prevent digit replication*/
		_delay_ms(400);

		/*Display '*' instead of the actual digit*/
		LCD_displayCharacter('*');
    2f34:	8a e2       	ldi	r24, 0x2A	; 42
    2f36:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_displayCharacter>

		password_counter++;
    2f3a:	80 91 2c 02 	lds	r24, 0x022C
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	80 93 2c 02 	sts	0x022C, r24

	/*move the cursor to the beginning of the second row, where the password is to be displayed*/
	LCD_goToRowCol(1,0);

	/*Enter 5 digits, and transmit them to the Control ECU*/
	while(password_counter < PASSWORD_LENGTH)
    2f44:	80 91 2c 02 	lds	r24, 0x022C
    2f48:	85 30       	cpi	r24, 0x05	; 5
    2f4a:	08 f4       	brcc	.+2      	; 0x2f4e <setNewPass+0x156>
    2f4c:	79 cf       	rjmp	.-270    	; 0x2e40 <setNewPass+0x48>

		password_counter++;
	}

	/*Display instructions for the user*/
	LCD_goToRowCol(0,0);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("Press 'C' To Enter.           ");
    2f56:	8b e7       	ldi	r24, 0x7B	; 123
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>

	/*wait until the user enters 'C'*/
	key_f = keypad_getPressedKey();
    2f5e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    2f62:	80 93 2d 02 	sts	0x022D, r24
    2f66:	04 c0       	rjmp	.+8      	; 0x2f70 <setNewPass+0x178>
	while(key_f != 'C')
	{
		key_f = keypad_getPressedKey();
    2f68:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    2f6c:	80 93 2d 02 	sts	0x022D, r24
	LCD_goToRowCol(0,0);
	LCD_displayString("Press 'C' To Enter.           ");

	/*wait until the user enters 'C'*/
	key_f = keypad_getPressedKey();
	while(key_f != 'C')
    2f70:	80 91 2d 02 	lds	r24, 0x022D
    2f74:	83 34       	cpi	r24, 0x43	; 67
    2f76:	c1 f7       	brne	.-16     	; 0x2f68 <setNewPass+0x170>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	a8 ec       	ldi	r26, 0xC8	; 200
    2f7e:	b3 e4       	ldi	r27, 0x43	; 67
    2f80:	8b 87       	std	Y+11, r24	; 0x0b
    2f82:	9c 87       	std	Y+12, r25	; 0x0c
    2f84:	ad 87       	std	Y+13, r26	; 0x0d
    2f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	4a ef       	ldi	r20, 0xFA	; 250
    2f96:	54 e4       	ldi	r21, 0x44	; 68
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	8f 83       	std	Y+7, r24	; 0x07
    2fa2:	98 87       	std	Y+8, r25	; 0x08
    2fa4:	a9 87       	std	Y+9, r26	; 0x09
    2fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2faa:	78 85       	ldd	r23, Y+8	; 0x08
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e8       	ldi	r20, 0x80	; 128
    2fb6:	5f e3       	ldi	r21, 0x3F	; 63
    2fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fbc:	88 23       	and	r24, r24
    2fbe:	2c f4       	brge	.+10     	; 0x2fca <setNewPass+0x1d2>
		__ticks = 1;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9e 83       	std	Y+6, r25	; 0x06
    2fc6:	8d 83       	std	Y+5, r24	; 0x05
    2fc8:	3f c0       	rjmp	.+126    	; 0x3048 <setNewPass+0x250>
	else if (__tmp > 65535)
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	57 e4       	ldi	r21, 0x47	; 71
    2fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fde:	18 16       	cp	r1, r24
    2fe0:	4c f5       	brge	.+82     	; 0x3034 <setNewPass+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e2       	ldi	r20, 0x20	; 32
    2ff0:	51 e4       	ldi	r21, 0x41	; 65
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	8d 83       	std	Y+5, r24	; 0x05
    300a:	0f c0       	rjmp	.+30     	; 0x302a <setNewPass+0x232>
    300c:	88 ec       	ldi	r24, 0xC8	; 200
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	9c 81       	ldd	r25, Y+4	; 0x04
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <setNewPass+0x220>
    301c:	9c 83       	std	Y+4, r25	; 0x04
    301e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	8d 81       	ldd	r24, Y+5	; 0x05
    3022:	9e 81       	ldd	r25, Y+6	; 0x06
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
    302c:	9e 81       	ldd	r25, Y+6	; 0x06
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	69 f7       	brne	.-38     	; 0x300c <setNewPass+0x214>
    3032:	14 c0       	rjmp	.+40     	; 0x305c <setNewPass+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3034:	6f 81       	ldd	r22, Y+7	; 0x07
    3036:	78 85       	ldd	r23, Y+8	; 0x08
    3038:	89 85       	ldd	r24, Y+9	; 0x09
    303a:	9a 85       	ldd	r25, Y+10	; 0x0a
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	9e 83       	std	Y+6, r25	; 0x06
    3046:	8d 83       	std	Y+5, r24	; 0x05
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	9a 83       	std	Y+2, r25	; 0x02
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <setNewPass+0x25c>
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	89 83       	std	Y+1, r24	; 0x01
	{
		key_f = keypad_getPressedKey();

	}
	_delay_ms(400); /*if not introduced, the first digit in the confirmation password would be 'C'*/
}
    305c:	6c 96       	adiw	r28, 0x1c	; 28
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <confirmPass>:
 * [Return]:
		CONFIRMATION_FAILED for password mismatch
		CONFIRMATION_PASS for password match
 -------------------------------------------*/
uint8 confirmPass()
{
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	6c 97       	sbiw	r28, 0x1c	; 28
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
	/*Send a command to the Control ECU to start password confirmation*/
	UART_sendByte(CONFIRM_PASS);
    3082:	8f e0       	ldi	r24, 0x0F	; 15
    3084:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>

	/*Display instructions for the user*/
	LCD_goToRowCol(0,0);
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("Please Confirm The Password:           ");
    3090:	8a e9       	ldi	r24, 0x9A	; 154
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>
	LCD_goToRowCol(1,0);
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("-----                     ");
    30a0:	82 ec       	ldi	r24, 0xC2	; 194
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>

	/*Initialize the digits counter*/
	password_counter = 0;
    30a8:	10 92 2c 02 	sts	0x022C, r1

	/*move the cursor to the second row, where the password is to be displayed*/
	LCD_goToRowCol(1,0);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
    30b4:	82 c0       	rjmp	.+260    	; 0x31ba <confirmPass+0x14c>

	/*Send the confirmation password to the control ECU*/
	while(password_counter < PASSWORD_LENGTH)
	{
		key_f = keypad_getPressedKey();
    30b6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    30ba:	80 93 2d 02 	sts	0x022D, r24
		UART_sendByte(key_f);
    30be:	80 91 2d 02 	lds	r24, 0x022D
    30c2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <UART_sendByte>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a8 ec       	ldi	r26, 0xC8	; 200
    30cc:	b3 e4       	ldi	r27, 0x43	; 67
    30ce:	89 8f       	std	Y+25, r24	; 0x19
    30d0:	9a 8f       	std	Y+26, r25	; 0x1a
    30d2:	ab 8f       	std	Y+27, r26	; 0x1b
    30d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	69 8d       	ldd	r22, Y+25	; 0x19
    30d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4a ef       	ldi	r20, 0xFA	; 250
    30e4:	54 e4       	ldi	r21, 0x44	; 68
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	8d 8b       	std	Y+21, r24	; 0x15
    30f0:	9e 8b       	std	Y+22, r25	; 0x16
    30f2:	af 8b       	std	Y+23, r26	; 0x17
    30f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30f6:	6d 89       	ldd	r22, Y+21	; 0x15
    30f8:	7e 89       	ldd	r23, Y+22	; 0x16
    30fa:	8f 89       	ldd	r24, Y+23	; 0x17
    30fc:	98 8d       	ldd	r25, Y+24	; 0x18
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	5f e3       	ldi	r21, 0x3F	; 63
    3106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    310a:	88 23       	and	r24, r24
    310c:	2c f4       	brge	.+10     	; 0x3118 <confirmPass+0xaa>
		__ticks = 1;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	9c 8b       	std	Y+20, r25	; 0x14
    3114:	8b 8b       	std	Y+19, r24	; 0x13
    3116:	3f c0       	rjmp	.+126    	; 0x3196 <confirmPass+0x128>
	else if (__tmp > 65535)
    3118:	6d 89       	ldd	r22, Y+21	; 0x15
    311a:	7e 89       	ldd	r23, Y+22	; 0x16
    311c:	8f 89       	ldd	r24, Y+23	; 0x17
    311e:	98 8d       	ldd	r25, Y+24	; 0x18
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	57 e4       	ldi	r21, 0x47	; 71
    3128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	4c f5       	brge	.+82     	; 0x3182 <confirmPass+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3130:	69 8d       	ldd	r22, Y+25	; 0x19
    3132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e2       	ldi	r20, 0x20	; 32
    313e:	51 e4       	ldi	r21, 0x41	; 65
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9c 8b       	std	Y+20, r25	; 0x14
    3156:	8b 8b       	std	Y+19, r24	; 0x13
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <confirmPass+0x10a>
    315a:	88 ec       	ldi	r24, 0xC8	; 200
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9a 8b       	std	Y+18, r25	; 0x12
    3160:	89 8b       	std	Y+17, r24	; 0x11
    3162:	89 89       	ldd	r24, Y+17	; 0x11
    3164:	9a 89       	ldd	r25, Y+18	; 0x12
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <confirmPass+0xf8>
    316a:	9a 8b       	std	Y+18, r25	; 0x12
    316c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316e:	8b 89       	ldd	r24, Y+19	; 0x13
    3170:	9c 89       	ldd	r25, Y+20	; 0x14
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	9c 8b       	std	Y+20, r25	; 0x14
    3176:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	69 f7       	brne	.-38     	; 0x315a <confirmPass+0xec>
    3180:	14 c0       	rjmp	.+40     	; 0x31aa <confirmPass+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3182:	6d 89       	ldd	r22, Y+21	; 0x15
    3184:	7e 89       	ldd	r23, Y+22	; 0x16
    3186:	8f 89       	ldd	r24, Y+23	; 0x17
    3188:	98 8d       	ldd	r25, Y+24	; 0x18
    318a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	9c 8b       	std	Y+20, r25	; 0x14
    3194:	8b 8b       	std	Y+19, r24	; 0x13
    3196:	8b 89       	ldd	r24, Y+19	; 0x13
    3198:	9c 89       	ldd	r25, Y+20	; 0x14
    319a:	98 8b       	std	Y+16, r25	; 0x10
    319c:	8f 87       	std	Y+15, r24	; 0x0f
    319e:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a0:	98 89       	ldd	r25, Y+16	; 0x10
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <confirmPass+0x134>
    31a6:	98 8b       	std	Y+16, r25	; 0x10
    31a8:	8f 87       	std	Y+15, r24	; 0x0f

		/*delay to prevent digit replication*/
		_delay_ms(400);

		/*Display '*' instead of the actual digit*/
		LCD_displayCharacter('*');
    31aa:	8a e2       	ldi	r24, 0x2A	; 42
    31ac:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_displayCharacter>

		password_counter++;
    31b0:	80 91 2c 02 	lds	r24, 0x022C
    31b4:	8f 5f       	subi	r24, 0xFF	; 255
    31b6:	80 93 2c 02 	sts	0x022C, r24

	/*move the cursor to the second row, where the password is to be displayed*/
	LCD_goToRowCol(1,0);

	/*Send the confirmation password to the control ECU*/
	while(password_counter < PASSWORD_LENGTH)
    31ba:	80 91 2c 02 	lds	r24, 0x022C
    31be:	85 30       	cpi	r24, 0x05	; 5
    31c0:	08 f4       	brcc	.+2      	; 0x31c4 <confirmPass+0x156>
    31c2:	79 cf       	rjmp	.-270    	; 0x30b6 <confirmPass+0x48>

		password_counter++;
	}

	/*Display instructions for the user*/
	LCD_goToRowCol(0,0);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_goToRowCol>
	LCD_displayString("Press 'C' To Enter.         ");
    31cc:	8d ed       	ldi	r24, 0xDD	; 221
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_displayString>

	/*wait until the user enters 'C'*/
	key_f = keypad_getPressedKey();
    31d4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    31d8:	80 93 2d 02 	sts	0x022D, r24
    31dc:	04 c0       	rjmp	.+8      	; 0x31e6 <confirmPass+0x178>
	while(key_f != 'C')
	{
		key_f = keypad_getPressedKey();
    31de:	0e 94 74 19 	call	0x32e8	; 0x32e8 <keypad_getPressedKey>
    31e2:	80 93 2d 02 	sts	0x022D, r24
	LCD_goToRowCol(0,0);
	LCD_displayString("Press 'C' To Enter.         ");

	/*wait until the user enters 'C'*/
	key_f = keypad_getPressedKey();
	while(key_f != 'C')
    31e6:	80 91 2d 02 	lds	r24, 0x022D
    31ea:	83 34       	cpi	r24, 0x43	; 67
    31ec:	c1 f7       	brne	.-16     	; 0x31de <confirmPass+0x170>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a8 ec       	ldi	r26, 0xC8	; 200
    31f4:	b3 e4       	ldi	r27, 0x43	; 67
    31f6:	8b 87       	std	Y+11, r24	; 0x0b
    31f8:	9c 87       	std	Y+12, r25	; 0x0c
    31fa:	ad 87       	std	Y+13, r26	; 0x0d
    31fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3200:	7c 85       	ldd	r23, Y+12	; 0x0c
    3202:	8d 85       	ldd	r24, Y+13	; 0x0d
    3204:	9e 85       	ldd	r25, Y+14	; 0x0e
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	4a ef       	ldi	r20, 0xFA	; 250
    320c:	54 e4       	ldi	r21, 0x44	; 68
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	8f 83       	std	Y+7, r24	; 0x07
    3218:	98 87       	std	Y+8, r25	; 0x08
    321a:	a9 87       	std	Y+9, r26	; 0x09
    321c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    321e:	6f 81       	ldd	r22, Y+7	; 0x07
    3220:	78 85       	ldd	r23, Y+8	; 0x08
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	9a 85       	ldd	r25, Y+10	; 0x0a
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e8       	ldi	r20, 0x80	; 128
    322c:	5f e3       	ldi	r21, 0x3F	; 63
    322e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3232:	88 23       	and	r24, r24
    3234:	2c f4       	brge	.+10     	; 0x3240 <confirmPass+0x1d2>
		__ticks = 1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	9e 83       	std	Y+6, r25	; 0x06
    323c:	8d 83       	std	Y+5, r24	; 0x05
    323e:	3f c0       	rjmp	.+126    	; 0x32be <confirmPass+0x250>
	else if (__tmp > 65535)
    3240:	6f 81       	ldd	r22, Y+7	; 0x07
    3242:	78 85       	ldd	r23, Y+8	; 0x08
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	4c f5       	brge	.+82     	; 0x32aa <confirmPass+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3258:	6b 85       	ldd	r22, Y+11	; 0x0b
    325a:	7c 85       	ldd	r23, Y+12	; 0x0c
    325c:	8d 85       	ldd	r24, Y+13	; 0x0d
    325e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e2       	ldi	r20, 0x20	; 32
    3266:	51 e4       	ldi	r21, 0x41	; 65
    3268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
    3280:	0f c0       	rjmp	.+30     	; 0x32a0 <confirmPass+0x232>
    3282:	88 ec       	ldi	r24, 0xC8	; 200
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9c 83       	std	Y+4, r25	; 0x04
    3288:	8b 83       	std	Y+3, r24	; 0x03
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	9c 81       	ldd	r25, Y+4	; 0x04
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <confirmPass+0x220>
    3292:	9c 83       	std	Y+4, r25	; 0x04
    3294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	9e 81       	ldd	r25, Y+6	; 0x06
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	69 f7       	brne	.-38     	; 0x3282 <confirmPass+0x214>
    32a8:	14 c0       	rjmp	.+40     	; 0x32d2 <confirmPass+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32aa:	6f 81       	ldd	r22, Y+7	; 0x07
    32ac:	78 85       	ldd	r23, Y+8	; 0x08
    32ae:	89 85       	ldd	r24, Y+9	; 0x09
    32b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	9e 83       	std	Y+6, r25	; 0x06
    32bc:	8d 83       	std	Y+5, r24	; 0x05
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <confirmPass+0x25c>
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(400); /*if not introduced and there was a mismatch, the first digit of the new password would be 'C'*/
	//uint8 confirm = UART_receiveByte(); //[SOLVED] doesn't return --> reason: Eep_Write() wasn't returning due to the polling in TWI_stop()

	return UART_receiveByte();
    32d2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <UART_receiveByte>
}
    32d6:	6c 96       	adiw	r28, 0x1c	; 28
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <keypad_getPressedKey>:
 * [DESCRIPTION]:
 * [Args]: -
 * [Return]: returns the number/character associated with the pressed key
 -----------------------------------------*/
uint8 keypad_getPressedKey()
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <keypad_getPressedKey+0x6>
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
	uint8 col = 0;
    32f2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 row = 0;
    32f4:	19 82       	std	Y+1, r1	; 0x01
#elif (N_COL == 3)
	const uint8 keypad_buttons [N_BUTTONS] = {1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'};
#endif
	while (1)
	{
		for (col=0 ; col <N_COL; col++)
    32f6:	1a 82       	std	Y+2, r1	; 0x02
    32f8:	50 c0       	rjmp	.+160    	; 0x339a <keypad_getPressedKey+0xb2>
		{
			/*all row pins are always inputs.
			 * only one column is configured as o/p each iteration.
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    32fa:	e7 e3       	ldi	r30, 0x37	; 55
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	80 e1       	ldi	r24, 0x10	; 16
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	02 c0       	rjmp	.+4      	; 0x330e <keypad_getPressedKey+0x26>
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	2a 95       	dec	r18
    3310:	e2 f7       	brpl	.-8      	; 0x330a <keypad_getPressedKey+0x22>
    3312:	80 83       	st	Z, r24

			/*all row pins are connected to internal pull-up resistors.
			 * the selected column is enabled.
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    3314:	e8 e3       	ldi	r30, 0x38	; 56
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	80 e1       	ldi	r24, 0x10	; 16
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	02 2e       	mov	r0, r18
    3324:	02 c0       	rjmp	.+4      	; 0x332a <keypad_getPressedKey+0x42>
    3326:	88 0f       	add	r24, r24
    3328:	99 1f       	adc	r25, r25
    332a:	0a 94       	dec	r0
    332c:	e2 f7       	brpl	.-8      	; 0x3326 <keypad_getPressedKey+0x3e>
    332e:	80 95       	com	r24
    3330:	80 83       	st	Z, r24


			for (row=0; row < N_ROW; row++)
    3332:	19 82       	std	Y+1, r1	; 0x01
    3334:	2c c0       	rjmp	.+88     	; 0x338e <keypad_getPressedKey+0xa6>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row ))
    3336:	e6 e3       	ldi	r30, 0x36	; 54
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	80 81       	ld	r24, Z
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a9 01       	movw	r20, r18
    3348:	02 c0       	rjmp	.+4      	; 0x334e <keypad_getPressedKey+0x66>
    334a:	55 95       	asr	r21
    334c:	47 95       	ror	r20
    334e:	8a 95       	dec	r24
    3350:	e2 f7       	brpl	.-8      	; 0x334a <keypad_getPressedKey+0x62>
    3352:	ca 01       	movw	r24, r20
    3354:	81 70       	andi	r24, 0x01	; 1
    3356:	90 70       	andi	r25, 0x00	; 0
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	b1 f4       	brne	.+44     	; 0x3388 <keypad_getPressedKey+0xa0>
				{
					return ( keypad_buttons[row*N_COL + col] );
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	88 2f       	mov	r24, r24
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9c 01       	movw	r18, r24
    3364:	22 0f       	add	r18, r18
    3366:	33 1f       	adc	r19, r19
    3368:	22 0f       	add	r18, r18
    336a:	33 1f       	adc	r19, r19
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	88 2f       	mov	r24, r24
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	82 0f       	add	r24, r18
    3374:	93 1f       	adc	r25, r19
    3376:	fc 01       	movw	r30, r24
    3378:	ed 5e       	subi	r30, 0xED	; 237
    337a:	fd 4f       	sbci	r31, 0xFD	; 253
    337c:	80 81       	ld	r24, Z
				}

			}
		}
	}
}
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret
			 * the selected column is enabled.
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));


			for (row=0; row < N_ROW; row++)
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	89 83       	std	Y+1, r24	; 0x01
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	84 30       	cpi	r24, 0x04	; 4
    3392:	88 f2       	brcs	.-94     	; 0x3336 <keypad_getPressedKey+0x4e>
#elif (N_COL == 3)
	const uint8 keypad_buttons [N_BUTTONS] = {1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'};
#endif
	while (1)
	{
		for (col=0 ; col <N_COL; col++)
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	8f 5f       	subi	r24, 0xFF	; 255
    3398:	8a 83       	std	Y+2, r24	; 0x02
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	84 30       	cpi	r24, 0x04	; 4
    339e:	08 f4       	brcc	.+2      	; 0x33a2 <keypad_getPressedKey+0xba>
    33a0:	ac cf       	rjmp	.-168    	; 0x32fa <keypad_getPressedKey+0x12>
    33a2:	a9 cf       	rjmp	.-174    	; 0x32f6 <keypad_getPressedKey+0xe>

000033a4 <__udivmodsi4>:
    33a4:	a1 e2       	ldi	r26, 0x21	; 33
    33a6:	1a 2e       	mov	r1, r26
    33a8:	aa 1b       	sub	r26, r26
    33aa:	bb 1b       	sub	r27, r27
    33ac:	fd 01       	movw	r30, r26
    33ae:	0d c0       	rjmp	.+26     	; 0x33ca <__udivmodsi4_ep>

000033b0 <__udivmodsi4_loop>:
    33b0:	aa 1f       	adc	r26, r26
    33b2:	bb 1f       	adc	r27, r27
    33b4:	ee 1f       	adc	r30, r30
    33b6:	ff 1f       	adc	r31, r31
    33b8:	a2 17       	cp	r26, r18
    33ba:	b3 07       	cpc	r27, r19
    33bc:	e4 07       	cpc	r30, r20
    33be:	f5 07       	cpc	r31, r21
    33c0:	20 f0       	brcs	.+8      	; 0x33ca <__udivmodsi4_ep>
    33c2:	a2 1b       	sub	r26, r18
    33c4:	b3 0b       	sbc	r27, r19
    33c6:	e4 0b       	sbc	r30, r20
    33c8:	f5 0b       	sbc	r31, r21

000033ca <__udivmodsi4_ep>:
    33ca:	66 1f       	adc	r22, r22
    33cc:	77 1f       	adc	r23, r23
    33ce:	88 1f       	adc	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	1a 94       	dec	r1
    33d4:	69 f7       	brne	.-38     	; 0x33b0 <__udivmodsi4_loop>
    33d6:	60 95       	com	r22
    33d8:	70 95       	com	r23
    33da:	80 95       	com	r24
    33dc:	90 95       	com	r25
    33de:	9b 01       	movw	r18, r22
    33e0:	ac 01       	movw	r20, r24
    33e2:	bd 01       	movw	r22, r26
    33e4:	cf 01       	movw	r24, r30
    33e6:	08 95       	ret

000033e8 <__prologue_saves__>:
    33e8:	2f 92       	push	r2
    33ea:	3f 92       	push	r3
    33ec:	4f 92       	push	r4
    33ee:	5f 92       	push	r5
    33f0:	6f 92       	push	r6
    33f2:	7f 92       	push	r7
    33f4:	8f 92       	push	r8
    33f6:	9f 92       	push	r9
    33f8:	af 92       	push	r10
    33fa:	bf 92       	push	r11
    33fc:	cf 92       	push	r12
    33fe:	df 92       	push	r13
    3400:	ef 92       	push	r14
    3402:	ff 92       	push	r15
    3404:	0f 93       	push	r16
    3406:	1f 93       	push	r17
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	ca 1b       	sub	r28, r26
    3412:	db 0b       	sbc	r29, r27
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	09 94       	ijmp

00003420 <__epilogue_restores__>:
    3420:	2a 88       	ldd	r2, Y+18	; 0x12
    3422:	39 88       	ldd	r3, Y+17	; 0x11
    3424:	48 88       	ldd	r4, Y+16	; 0x10
    3426:	5f 84       	ldd	r5, Y+15	; 0x0f
    3428:	6e 84       	ldd	r6, Y+14	; 0x0e
    342a:	7d 84       	ldd	r7, Y+13	; 0x0d
    342c:	8c 84       	ldd	r8, Y+12	; 0x0c
    342e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3430:	aa 84       	ldd	r10, Y+10	; 0x0a
    3432:	b9 84       	ldd	r11, Y+9	; 0x09
    3434:	c8 84       	ldd	r12, Y+8	; 0x08
    3436:	df 80       	ldd	r13, Y+7	; 0x07
    3438:	ee 80       	ldd	r14, Y+6	; 0x06
    343a:	fd 80       	ldd	r15, Y+5	; 0x05
    343c:	0c 81       	ldd	r16, Y+4	; 0x04
    343e:	1b 81       	ldd	r17, Y+3	; 0x03
    3440:	aa 81       	ldd	r26, Y+2	; 0x02
    3442:	b9 81       	ldd	r27, Y+1	; 0x01
    3444:	ce 0f       	add	r28, r30
    3446:	d1 1d       	adc	r29, r1
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	ed 01       	movw	r28, r26
    3454:	08 95       	ret

00003456 <_exit>:
    3456:	f8 94       	cli

00003458 <__stop_program>:
    3458:	ff cf       	rjmp	.-2      	; 0x3458 <__stop_program>
