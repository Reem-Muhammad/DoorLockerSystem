
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00001d44  00001dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000be  008000be  00001e36  2**0
                  ALLOC
  3 .stab         00001af4  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f3c  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000764c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <main>
      8a:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e9       	ldi	r26, 0x9A	; 154
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e9       	ldi	r24, 0x9A	; 154
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_init>:


#include "I2C.h"

void TWI_init(const Twi_ConfigType* config_ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TWI_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	 * - clear TWINT
	 * ****************************************
	 */

	/*Enable TWI interface, Acknowledge*/
	TWCR |= (1<<TWEN) | (1<<TWEA);
     b54:	a6 e5       	ldi	r26, 0x56	; 86
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e6 e5       	ldi	r30, 0x56	; 86
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	84 64       	ori	r24, 0x44	; 68
     b60:	8c 93       	st	X, r24

	/*Set the address*/
	TWAR = (TWAR & 0x01) | (config_ptr->twi_address << 1);
     b62:	a2 e2       	ldi	r26, 0x22	; 34
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e2 e2       	ldi	r30, 0x22	; 34
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	28 2f       	mov	r18, r24
     b6e:	21 70       	andi	r18, 0x01	; 1
     b70:	e9 81       	ldd	r30, Y+1	; 0x01
     b72:	fa 81       	ldd	r31, Y+2	; 0x02
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	82 2b       	or	r24, r18
     b80:	8c 93       	st	X, r24

	/*configure the behavior on general calls*/
	TWAR |= config_ptr->e_twi_general_call_recognition;
     b82:	a2 e2       	ldi	r26, 0x22	; 34
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e2 e2       	ldi	r30, 0x22	; 34
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	90 81       	ld	r25, Z
     b8c:	e9 81       	ldd	r30, Y+1	; 0x01
     b8e:	fa 81       	ldd	r31, Y+2	; 0x02
     b90:	81 81       	ldd	r24, Z+1	; 0x01
     b92:	89 2b       	or	r24, r25
     b94:	8c 93       	st	X, r24

	/*set the prescaler*/
	TWSR = (TWSR & 0xFC) | (config_ptr->e_twi_prescaler);
     b96:	a1 e2       	ldi	r26, 0x21	; 33
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e1 e2       	ldi	r30, 0x21	; 33
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	98 2f       	mov	r25, r24
     ba2:	9c 7f       	andi	r25, 0xFC	; 252
     ba4:	e9 81       	ldd	r30, Y+1	; 0x01
     ba6:	fa 81       	ldd	r31, Y+2	; 0x02
     ba8:	80 81       	ld	r24, Z
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24

	/*set the bit rate register*/
	TWBR = config_ptr->twi_bit_rate;
     bae:	a0 e2       	ldi	r26, 0x20	; 32
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	fa 81       	ldd	r31, Y+2	; 0x02
     bb6:	83 81       	ldd	r24, Z+3	; 0x03
     bb8:	8c 93       	st	X, r24
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <TWI_start>:


void TWI_start()
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 1		 0		 X		 1		0	 X
	 *************************/

	/*generate the START condition to claim the bus*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     bcc:	e6 e5       	ldi	r30, 0x56	; 86
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	84 ea       	ldi	r24, 0xA4	; 164
     bd2:	80 83       	st	Z, r24

	/*TWINT will be set after successful transmission of the START condition*/
	while(BIT_IS_CLEAR(TWCR, TWINT));
     bd4:	e6 e5       	ldi	r30, 0x56	; 86
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	88 23       	and	r24, r24
     bdc:	dc f7       	brge	.-10     	; 0xbd4 <TWI_start+0x10>

	/*TWSTA would be cleared at the beginning of the other functions (it should be cleared after transmission of START condition and it is not cleared automatically),
	 *  so there is no need to clear it here.
	 */
	//TWCR &= ~(1<<TWSTA);
}
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <TWI_write>:



void TWI_write(const uint8 byte_to_write) /*made it const since the function shouldn't try to edit the value*/
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	0f 92       	push	r0
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	89 83       	std	Y+1, r24	; 0x01
	/*write the data/slave address to the data register TWDR*/
	TWDR = byte_to_write;
     bf0:	e3 e2       	ldi	r30, 0x23	; 35
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	80 83       	st	Z, r24
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 0		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);
     bf8:	e6 e5       	ldi	r30, 0x56	; 86
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	84 e8       	ldi	r24, 0x84	; 132
     bfe:	80 83       	st	Z, r24



	/*wait until TWINT indicates the transmission of SLA+W*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c00:	e6 e5       	ldi	r30, 0x56	; 86
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 23       	and	r24, r24
     c08:	dc f7       	brge	.-10     	; 0xc00 <TWI_write+0x1c>
}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <TWI_readWithACK>:

uint8 TWI_readWithACK()
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	 * 	1		 1		 0		 0		 X		 1		0	 X
	 *
	 * 	setting TWINT will clear the flag
	 * 	setting TWEA will generate the ACK pulse when data is received
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     c1a:	e6 e5       	ldi	r30, 0x56	; 86
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	84 ec       	ldi	r24, 0xC4	; 196
     c20:	80 83       	st	Z, r24

	/*wait until the byte is received, then send ACK*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c22:	e6 e5       	ldi	r30, 0x56	; 86
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	dc f7       	brge	.-10     	; 0xc22 <TWI_readWithACK+0x10>

	/*return the received byte*/
	return TWDR;
     c2c:	e3 e2       	ldi	r30, 0x23	; 35
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
}
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <TWI_readWithNACK>:

uint8 TWI_readWithNACK()
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	 * 	1		 0		 0		 0		 X		 1		0	 X
	 *
	 * 	setting TWINT will clear the flag
	 * 	clearing TWEA will prevent the generation of the ACK pulse when data is received
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWEN);
     c40:	e6 e5       	ldi	r30, 0x56	; 86
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	84 e8       	ldi	r24, 0x84	; 132
     c46:	80 83       	st	Z, r24

	/*wait until the byte is received, and no ACK would be sent*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c48:	e6 e5       	ldi	r30, 0x56	; 86
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 23       	and	r24, r24
     c50:	dc f7       	brge	.-10     	; 0xc48 <TWI_readWithNACK+0x10>

	/*return the received byte*/
	return TWDR;
     c52:	e3 e2       	ldi	r30, 0x23	; 35
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <TWI_stop>:


void TWI_stop()
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	/*******************
	 * TWCR should have the following value:
	 * TWINT	TWEA	TWSTA	TWSTO	TWWC	TWEN	-	TWIE
	 * 	1		 X		 0		 1		 X		 1		0	 X
	 *******************/
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     c66:	e6 e5       	ldi	r30, 0x56	; 86
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	84 e9       	ldi	r24, 0x94	; 148
     c6c:	80 83       	st	Z, r24

	/*wait until the STOP condition is transmitted*/
	while( BIT_IS_CLEAR(TWCR, TWINT) );
     c6e:	e6 e5       	ldi	r30, 0x56	; 86
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	dc f7       	brge	.-10     	; 0xc6e <TWI_stop+0x10>
}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <LCD_sendCommand>:
 * [Args]:
 * 		command: command to be sent
 * [Return]: -
 -----------------------------------------*/
void LCD_sendCommand(uint8 command)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	e9 97       	sbiw	r28, 0x39	; 57
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	89 af       	std	Y+57, r24	; 0x39
	/*clear RS to transfer instruction data*/
	CLEAR_BIT(CTRL_PORT_OUT, RS);
     c94:	a5 e3       	ldi	r26, 0x35	; 53
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e5 e3       	ldi	r30, 0x35	; 53
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	8c 93       	st	X, r24

	/*Select write mode*/
	CLEAR_BIT(CTRL_PORT_OUT, R_W);
     ca2:	a5 e3       	ldi	r26, 0x35	; 53
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e5 e3       	ldi	r30, 0x35	; 53
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8d 7f       	andi	r24, 0xFD	; 253
     cae:	8c 93       	st	X, r24
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e8       	ldi	r26, 0x80	; 128
     cb6:	bf e3       	ldi	r27, 0x3F	; 63
     cb8:	8d ab       	std	Y+53, r24	; 0x35
     cba:	9e ab       	std	Y+54, r25	; 0x36
     cbc:	af ab       	std	Y+55, r26	; 0x37
     cbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc0:	6d a9       	ldd	r22, Y+53	; 0x35
     cc2:	7e a9       	ldd	r23, Y+54	; 0x36
     cc4:	8f a9       	ldd	r24, Y+55	; 0x37
     cc6:	98 ad       	ldd	r25, Y+56	; 0x38
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	4a ef       	ldi	r20, 0xFA	; 250
     cce:	54 e4       	ldi	r21, 0x44	; 68
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	89 ab       	std	Y+49, r24	; 0x31
     cda:	9a ab       	std	Y+50, r25	; 0x32
     cdc:	ab ab       	std	Y+51, r26	; 0x33
     cde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ce0:	69 a9       	ldd	r22, Y+49	; 0x31
     ce2:	7a a9       	ldd	r23, Y+50	; 0x32
     ce4:	8b a9       	ldd	r24, Y+51	; 0x33
     ce6:	9c a9       	ldd	r25, Y+52	; 0x34
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	2c f4       	brge	.+10     	; 0xd02 <LCD_sendCommand+0x84>
		__ticks = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	98 ab       	std	Y+48, r25	; 0x30
     cfe:	8f a7       	std	Y+47, r24	; 0x2f
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     d02:	69 a9       	ldd	r22, Y+49	; 0x31
     d04:	7a a9       	ldd	r23, Y+50	; 0x32
     d06:	8b a9       	ldd	r24, Y+51	; 0x33
     d08:	9c a9       	ldd	r25, Y+52	; 0x34
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	3f ef       	ldi	r19, 0xFF	; 255
     d0e:	4f e7       	ldi	r20, 0x7F	; 127
     d10:	57 e4       	ldi	r21, 0x47	; 71
     d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d16:	18 16       	cp	r1, r24
     d18:	4c f5       	brge	.+82     	; 0xd6c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1a:	6d a9       	ldd	r22, Y+53	; 0x35
     d1c:	7e a9       	ldd	r23, Y+54	; 0x36
     d1e:	8f a9       	ldd	r24, Y+55	; 0x37
     d20:	98 ad       	ldd	r25, Y+56	; 0x38
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	98 ab       	std	Y+48, r25	; 0x30
     d40:	8f a7       	std	Y+47, r24	; 0x2f
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <LCD_sendCommand+0xe4>
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9e a7       	std	Y+46, r25	; 0x2e
     d4a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     d4e:	9e a5       	ldd	r25, Y+46	; 0x2e
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <LCD_sendCommand+0xd2>
     d54:	9e a7       	std	Y+46, r25	; 0x2e
     d56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	8f a5       	ldd	r24, Y+47	; 0x2f
     d5a:	98 a9       	ldd	r25, Y+48	; 0x30
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	98 ab       	std	Y+48, r25	; 0x30
     d60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	8f a5       	ldd	r24, Y+47	; 0x2f
     d64:	98 a9       	ldd	r25, Y+48	; 0x30
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	69 f7       	brne	.-38     	; 0xd44 <LCD_sendCommand+0xc6>
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	69 a9       	ldd	r22, Y+49	; 0x31
     d6e:	7a a9       	ldd	r23, Y+50	; 0x32
     d70:	8b a9       	ldd	r24, Y+51	; 0x33
     d72:	9c a9       	ldd	r25, Y+52	; 0x34
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	98 ab       	std	Y+48, r25	; 0x30
     d7e:	8f a7       	std	Y+47, r24	; 0x2f
     d80:	8f a5       	ldd	r24, Y+47	; 0x2f
     d82:	98 a9       	ldd	r25, Y+48	; 0x30
     d84:	9c a7       	std	Y+44, r25	; 0x2c
     d86:	8b a7       	std	Y+43, r24	; 0x2b
     d88:	8b a5       	ldd	r24, Y+43	; 0x2b
     d8a:	9c a5       	ldd	r25, Y+44	; 0x2c
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <LCD_sendCommand+0x10e>
     d90:	9c a7       	std	Y+44, r25	; 0x2c
     d92:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait at least 50ns (address setup time)*/
	_delay_ms(1);

	/*enable the LCD*/
	SET_BIT(CTRL_PORT_OUT, EN);
     d94:	a5 e3       	ldi	r26, 0x35	; 53
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e3       	ldi	r30, 0x35	; 53
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	84 60       	ori	r24, 0x04	; 4
     da0:	8c 93       	st	X, r24
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e8       	ldi	r26, 0x80	; 128
     da8:	bf e3       	ldi	r27, 0x3F	; 63
     daa:	8f a3       	std	Y+39, r24	; 0x27
     dac:	98 a7       	std	Y+40, r25	; 0x28
     dae:	a9 a7       	std	Y+41, r26	; 0x29
     db0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db2:	6f a1       	ldd	r22, Y+39	; 0x27
     db4:	78 a5       	ldd	r23, Y+40	; 0x28
     db6:	89 a5       	ldd	r24, Y+41	; 0x29
     db8:	9a a5       	ldd	r25, Y+42	; 0x2a
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a ef       	ldi	r20, 0xFA	; 250
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	8b a3       	std	Y+35, r24	; 0x23
     dcc:	9c a3       	std	Y+36, r25	; 0x24
     dce:	ad a3       	std	Y+37, r26	; 0x25
     dd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dd2:	6b a1       	ldd	r22, Y+35	; 0x23
     dd4:	7c a1       	ldd	r23, Y+36	; 0x24
     dd6:	8d a1       	ldd	r24, Y+37	; 0x25
     dd8:	9e a1       	ldd	r25, Y+38	; 0x26
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e8       	ldi	r20, 0x80	; 128
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de6:	88 23       	and	r24, r24
     de8:	2c f4       	brge	.+10     	; 0xdf4 <LCD_sendCommand+0x176>
		__ticks = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9a a3       	std	Y+34, r25	; 0x22
     df0:	89 a3       	std	Y+33, r24	; 0x21
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     df4:	6b a1       	ldd	r22, Y+35	; 0x23
     df6:	7c a1       	ldd	r23, Y+36	; 0x24
     df8:	8d a1       	ldd	r24, Y+37	; 0x25
     dfa:	9e a1       	ldd	r25, Y+38	; 0x26
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	4c f5       	brge	.+82     	; 0xe5e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0c:	6f a1       	ldd	r22, Y+39	; 0x27
     e0e:	78 a5       	ldd	r23, Y+40	; 0x28
     e10:	89 a5       	ldd	r24, Y+41	; 0x29
     e12:	9a a5       	ldd	r25, Y+42	; 0x2a
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	9a a3       	std	Y+34, r25	; 0x22
     e32:	89 a3       	std	Y+33, r24	; 0x21
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <LCD_sendCommand+0x1d6>
     e36:	88 ec       	ldi	r24, 0xC8	; 200
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	98 a3       	std	Y+32, r25	; 0x20
     e3c:	8f 8f       	std	Y+31, r24	; 0x1f
     e3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e40:	98 a1       	ldd	r25, Y+32	; 0x20
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <LCD_sendCommand+0x1c4>
     e46:	98 a3       	std	Y+32, r25	; 0x20
     e48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	89 a1       	ldd	r24, Y+33	; 0x21
     e4c:	9a a1       	ldd	r25, Y+34	; 0x22
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9a a3       	std	Y+34, r25	; 0x22
     e52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	89 a1       	ldd	r24, Y+33	; 0x21
     e56:	9a a1       	ldd	r25, Y+34	; 0x22
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f7       	brne	.-38     	; 0xe36 <LCD_sendCommand+0x1b8>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5e:	6b a1       	ldd	r22, Y+35	; 0x23
     e60:	7c a1       	ldd	r23, Y+36	; 0x24
     e62:	8d a1       	ldd	r24, Y+37	; 0x25
     e64:	9e a1       	ldd	r25, Y+38	; 0x26
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9a a3       	std	Y+34, r25	; 0x22
     e70:	89 a3       	std	Y+33, r24	; 0x21
     e72:	89 a1       	ldd	r24, Y+33	; 0x21
     e74:	9a a1       	ldd	r25, Y+34	; 0x22
     e76:	9e 8f       	std	Y+30, r25	; 0x1e
     e78:	8d 8f       	std	Y+29, r24	; 0x1d
     e7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <LCD_sendCommand+0x200>
     e82:	9e 8f       	std	Y+30, r25	; 0x1e
     e84:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait at least (tpw - tdsw)ns before sending the command*/
	_delay_ms(1);

#if N_BIT_INTERFACE == 8
	/*send the command*/
	DATA_PORT_OUT = command;
     e86:	eb e3       	ldi	r30, 0x3B	; 59
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	89 ad       	ldd	r24, Y+57	; 0x39
     e8c:	80 83       	st	Z, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	a0 e8       	ldi	r26, 0x80	; 128
     e94:	bf e3       	ldi	r27, 0x3F	; 63
     e96:	89 8f       	std	Y+25, r24	; 0x19
     e98:	9a 8f       	std	Y+26, r25	; 0x1a
     e9a:	ab 8f       	std	Y+27, r26	; 0x1b
     e9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9e:	69 8d       	ldd	r22, Y+25	; 0x19
     ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	4a ef       	ldi	r20, 0xFA	; 250
     eac:	54 e4       	ldi	r21, 0x44	; 68
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	8d 8b       	std	Y+21, r24	; 0x15
     eb8:	9e 8b       	std	Y+22, r25	; 0x16
     eba:	af 8b       	std	Y+23, r26	; 0x17
     ebc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ebe:	6d 89       	ldd	r22, Y+21	; 0x15
     ec0:	7e 89       	ldd	r23, Y+22	; 0x16
     ec2:	8f 89       	ldd	r24, Y+23	; 0x17
     ec4:	98 8d       	ldd	r25, Y+24	; 0x18
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed2:	88 23       	and	r24, r24
     ed4:	2c f4       	brge	.+10     	; 0xee0 <LCD_sendCommand+0x262>
		__ticks = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 8b       	std	Y+20, r25	; 0x14
     edc:	8b 8b       	std	Y+19, r24	; 0x13
     ede:	3f c0       	rjmp	.+126    	; 0xf5e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     ee0:	6d 89       	ldd	r22, Y+21	; 0x15
     ee2:	7e 89       	ldd	r23, Y+22	; 0x16
     ee4:	8f 89       	ldd	r24, Y+23	; 0x17
     ee6:	98 8d       	ldd	r25, Y+24	; 0x18
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	3f ef       	ldi	r19, 0xFF	; 255
     eec:	4f e7       	ldi	r20, 0x7F	; 127
     eee:	57 e4       	ldi	r21, 0x47	; 71
     ef0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef4:	18 16       	cp	r1, r24
     ef6:	4c f5       	brge	.+82     	; 0xf4a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef8:	69 8d       	ldd	r22, Y+25	; 0x19
     efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e2       	ldi	r20, 0x20	; 32
     f06:	51 e4       	ldi	r21, 0x41	; 65
     f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9c 8b       	std	Y+20, r25	; 0x14
     f1e:	8b 8b       	std	Y+19, r24	; 0x13
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <LCD_sendCommand+0x2c2>
     f22:	88 ec       	ldi	r24, 0xC8	; 200
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9a 8b       	std	Y+18, r25	; 0x12
     f28:	89 8b       	std	Y+17, r24	; 0x11
     f2a:	89 89       	ldd	r24, Y+17	; 0x11
     f2c:	9a 89       	ldd	r25, Y+18	; 0x12
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <LCD_sendCommand+0x2b0>
     f32:	9a 8b       	std	Y+18, r25	; 0x12
     f34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f36:	8b 89       	ldd	r24, Y+19	; 0x13
     f38:	9c 89       	ldd	r25, Y+20	; 0x14
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	9c 8b       	std	Y+20, r25	; 0x14
     f3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f40:	8b 89       	ldd	r24, Y+19	; 0x13
     f42:	9c 89       	ldd	r25, Y+20	; 0x14
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	69 f7       	brne	.-38     	; 0xf22 <LCD_sendCommand+0x2a4>
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4a:	6d 89       	ldd	r22, Y+21	; 0x15
     f4c:	7e 89       	ldd	r23, Y+22	; 0x16
     f4e:	8f 89       	ldd	r24, Y+23	; 0x17
     f50:	98 8d       	ldd	r25, Y+24	; 0x18
     f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9c 8b       	std	Y+20, r25	; 0x14
     f5c:	8b 8b       	std	Y+19, r24	; 0x13
     f5e:	8b 89       	ldd	r24, Y+19	; 0x13
     f60:	9c 89       	ldd	r25, Y+20	; 0x14
     f62:	98 8b       	std	Y+16, r25	; 0x10
     f64:	8f 87       	std	Y+15, r24	; 0x0f
     f66:	8f 85       	ldd	r24, Y+15	; 0x0f
     f68:	98 89       	ldd	r25, Y+16	; 0x10
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <LCD_sendCommand+0x2ec>
     f6e:	98 8b       	std	Y+16, r25	; 0x10
     f70:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);

	/*disable the LCD*/
	CLEAR_BIT(CTRL_PORT_OUT, EN);
     f72:	a5 e3       	ldi	r26, 0x35	; 53
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e3       	ldi	r30, 0x35	; 53
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8b 7f       	andi	r24, 0xFB	; 251
     f7e:	8c 93       	st	X, r24
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e8       	ldi	r26, 0x80	; 128
     f86:	bf e3       	ldi	r27, 0x3F	; 63
     f88:	8b 87       	std	Y+11, r24	; 0x0b
     f8a:	9c 87       	std	Y+12, r25	; 0x0c
     f8c:	ad 87       	std	Y+13, r26	; 0x0d
     f8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a ef       	ldi	r20, 0xFA	; 250
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8f 83       	std	Y+7, r24	; 0x07
     faa:	98 87       	std	Y+8, r25	; 0x08
     fac:	a9 87       	std	Y+9, r26	; 0x09
     fae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb0:	6f 81       	ldd	r22, Y+7	; 0x07
     fb2:	78 85       	ldd	r23, Y+8	; 0x08
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <LCD_sendCommand+0x354>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9e 83       	std	Y+6, r25	; 0x06
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <LCD_sendCommand+0x3b4>
    1014:	88 ec       	ldi	r24, 0xC8	; 200
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	8b 83       	std	Y+3, r24	; 0x03
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <LCD_sendCommand+0x3a2>
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <LCD_sendCommand+0x396>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	6f 81       	ldd	r22, Y+7	; 0x07
    103e:	78 85       	ldd	r23, Y+8	; 0x08
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <LCD_sendCommand+0x3de>
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1064:	e9 96       	adiw	r28, 0x39	; 57
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <LCD_displayCharacter>:
 * [Args]:
 * 		character: character to be displayed
 * [Return]: -
 -----------------------------------------*/
void LCD_displayCharacter(uint8 character)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	e9 97       	sbiw	r28, 0x39	; 57
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS to transfer display data*/
	SET_BIT(CTRL_PORT_OUT, RS);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	8c 93       	st	X, r24

	/*Select write mode*/
	CLEAR_BIT(CTRL_PORT_OUT, R_W);
    109a:	a5 e3       	ldi	r26, 0x35	; 53
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e3       	ldi	r30, 0x35	; 53
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8d 7f       	andi	r24, 0xFD	; 253
    10a6:	8c 93       	st	X, r24
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e8       	ldi	r26, 0x80	; 128
    10ae:	bf e3       	ldi	r27, 0x3F	; 63
    10b0:	8d ab       	std	Y+53, r24	; 0x35
    10b2:	9e ab       	std	Y+54, r25	; 0x36
    10b4:	af ab       	std	Y+55, r26	; 0x37
    10b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b8:	6d a9       	ldd	r22, Y+53	; 0x35
    10ba:	7e a9       	ldd	r23, Y+54	; 0x36
    10bc:	8f a9       	ldd	r24, Y+55	; 0x37
    10be:	98 ad       	ldd	r25, Y+56	; 0x38
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4a ef       	ldi	r20, 0xFA	; 250
    10c6:	54 e4       	ldi	r21, 0x44	; 68
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	89 ab       	std	Y+49, r24	; 0x31
    10d2:	9a ab       	std	Y+50, r25	; 0x32
    10d4:	ab ab       	std	Y+51, r26	; 0x33
    10d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10d8:	69 a9       	ldd	r22, Y+49	; 0x31
    10da:	7a a9       	ldd	r23, Y+50	; 0x32
    10dc:	8b a9       	ldd	r24, Y+51	; 0x33
    10de:	9c a9       	ldd	r25, Y+52	; 0x34
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e8       	ldi	r20, 0x80	; 128
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ec:	88 23       	and	r24, r24
    10ee:	2c f4       	brge	.+10     	; 0x10fa <LCD_displayCharacter+0x84>
		__ticks = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	98 ab       	std	Y+48, r25	; 0x30
    10f6:	8f a7       	std	Y+47, r24	; 0x2f
    10f8:	3f c0       	rjmp	.+126    	; 0x1178 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    10fa:	69 a9       	ldd	r22, Y+49	; 0x31
    10fc:	7a a9       	ldd	r23, Y+50	; 0x32
    10fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1100:	9c a9       	ldd	r25, Y+52	; 0x34
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	4c f5       	brge	.+82     	; 0x1164 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1112:	6d a9       	ldd	r22, Y+53	; 0x35
    1114:	7e a9       	ldd	r23, Y+54	; 0x36
    1116:	8f a9       	ldd	r24, Y+55	; 0x37
    1118:	98 ad       	ldd	r25, Y+56	; 0x38
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e2       	ldi	r20, 0x20	; 32
    1120:	51 e4       	ldi	r21, 0x41	; 65
    1122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	98 ab       	std	Y+48, r25	; 0x30
    1138:	8f a7       	std	Y+47, r24	; 0x2f
    113a:	0f c0       	rjmp	.+30     	; 0x115a <LCD_displayCharacter+0xe4>
    113c:	88 ec       	ldi	r24, 0xC8	; 200
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9e a7       	std	Y+46, r25	; 0x2e
    1142:	8d a7       	std	Y+45, r24	; 0x2d
    1144:	8d a5       	ldd	r24, Y+45	; 0x2d
    1146:	9e a5       	ldd	r25, Y+46	; 0x2e
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <LCD_displayCharacter+0xd2>
    114c:	9e a7       	std	Y+46, r25	; 0x2e
    114e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1150:	8f a5       	ldd	r24, Y+47	; 0x2f
    1152:	98 a9       	ldd	r25, Y+48	; 0x30
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	98 ab       	std	Y+48, r25	; 0x30
    1158:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115a:	8f a5       	ldd	r24, Y+47	; 0x2f
    115c:	98 a9       	ldd	r25, Y+48	; 0x30
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	69 f7       	brne	.-38     	; 0x113c <LCD_displayCharacter+0xc6>
    1162:	14 c0       	rjmp	.+40     	; 0x118c <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1164:	69 a9       	ldd	r22, Y+49	; 0x31
    1166:	7a a9       	ldd	r23, Y+50	; 0x32
    1168:	8b a9       	ldd	r24, Y+51	; 0x33
    116a:	9c a9       	ldd	r25, Y+52	; 0x34
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	98 ab       	std	Y+48, r25	; 0x30
    1176:	8f a7       	std	Y+47, r24	; 0x2f
    1178:	8f a5       	ldd	r24, Y+47	; 0x2f
    117a:	98 a9       	ldd	r25, Y+48	; 0x30
    117c:	9c a7       	std	Y+44, r25	; 0x2c
    117e:	8b a7       	std	Y+43, r24	; 0x2b
    1180:	8b a5       	ldd	r24, Y+43	; 0x2b
    1182:	9c a5       	ldd	r25, Y+44	; 0x2c
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <LCD_displayCharacter+0x10e>
    1188:	9c a7       	std	Y+44, r25	; 0x2c
    118a:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait at least 50ns (address setup time)*/
	_delay_ms(1);

	/*enable the LCD*/
	SET_BIT(CTRL_PORT_OUT, EN);
    118c:	a5 e3       	ldi	r26, 0x35	; 53
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	84 60       	ori	r24, 0x04	; 4
    1198:	8c 93       	st	X, r24
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a0 e8       	ldi	r26, 0x80	; 128
    11a0:	bf e3       	ldi	r27, 0x3F	; 63
    11a2:	8f a3       	std	Y+39, r24	; 0x27
    11a4:	98 a7       	std	Y+40, r25	; 0x28
    11a6:	a9 a7       	std	Y+41, r26	; 0x29
    11a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11aa:	6f a1       	ldd	r22, Y+39	; 0x27
    11ac:	78 a5       	ldd	r23, Y+40	; 0x28
    11ae:	89 a5       	ldd	r24, Y+41	; 0x29
    11b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4a ef       	ldi	r20, 0xFA	; 250
    11b8:	54 e4       	ldi	r21, 0x44	; 68
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8b a3       	std	Y+35, r24	; 0x23
    11c4:	9c a3       	std	Y+36, r25	; 0x24
    11c6:	ad a3       	std	Y+37, r26	; 0x25
    11c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11ca:	6b a1       	ldd	r22, Y+35	; 0x23
    11cc:	7c a1       	ldd	r23, Y+36	; 0x24
    11ce:	8d a1       	ldd	r24, Y+37	; 0x25
    11d0:	9e a1       	ldd	r25, Y+38	; 0x26
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11de:	88 23       	and	r24, r24
    11e0:	2c f4       	brge	.+10     	; 0x11ec <LCD_displayCharacter+0x176>
		__ticks = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9a a3       	std	Y+34, r25	; 0x22
    11e8:	89 a3       	std	Y+33, r24	; 0x21
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    11ec:	6b a1       	ldd	r22, Y+35	; 0x23
    11ee:	7c a1       	ldd	r23, Y+36	; 0x24
    11f0:	8d a1       	ldd	r24, Y+37	; 0x25
    11f2:	9e a1       	ldd	r25, Y+38	; 0x26
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1200:	18 16       	cp	r1, r24
    1202:	4c f5       	brge	.+82     	; 0x1256 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1204:	6f a1       	ldd	r22, Y+39	; 0x27
    1206:	78 a5       	ldd	r23, Y+40	; 0x28
    1208:	89 a5       	ldd	r24, Y+41	; 0x29
    120a:	9a a5       	ldd	r25, Y+42	; 0x2a
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e2       	ldi	r20, 0x20	; 32
    1212:	51 e4       	ldi	r21, 0x41	; 65
    1214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9a a3       	std	Y+34, r25	; 0x22
    122a:	89 a3       	std	Y+33, r24	; 0x21
    122c:	0f c0       	rjmp	.+30     	; 0x124c <LCD_displayCharacter+0x1d6>
    122e:	88 ec       	ldi	r24, 0xC8	; 200
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	98 a3       	std	Y+32, r25	; 0x20
    1234:	8f 8f       	std	Y+31, r24	; 0x1f
    1236:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1238:	98 a1       	ldd	r25, Y+32	; 0x20
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <LCD_displayCharacter+0x1c4>
    123e:	98 a3       	std	Y+32, r25	; 0x20
    1240:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1242:	89 a1       	ldd	r24, Y+33	; 0x21
    1244:	9a a1       	ldd	r25, Y+34	; 0x22
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9a a3       	std	Y+34, r25	; 0x22
    124a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	69 f7       	brne	.-38     	; 0x122e <LCD_displayCharacter+0x1b8>
    1254:	14 c0       	rjmp	.+40     	; 0x127e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1256:	6b a1       	ldd	r22, Y+35	; 0x23
    1258:	7c a1       	ldd	r23, Y+36	; 0x24
    125a:	8d a1       	ldd	r24, Y+37	; 0x25
    125c:	9e a1       	ldd	r25, Y+38	; 0x26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9a a3       	std	Y+34, r25	; 0x22
    1268:	89 a3       	std	Y+33, r24	; 0x21
    126a:	89 a1       	ldd	r24, Y+33	; 0x21
    126c:	9a a1       	ldd	r25, Y+34	; 0x22
    126e:	9e 8f       	std	Y+30, r25	; 0x1e
    1270:	8d 8f       	std	Y+29, r24	; 0x1d
    1272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <LCD_displayCharacter+0x200>
    127a:	9e 8f       	std	Y+30, r25	; 0x1e
    127c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if N_BIT_INTERFACE == 8
	/*send the command*/
	DATA_PORT_OUT = character;
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	89 ad       	ldd	r24, Y+57	; 0x39
    1284:	80 83       	st	Z, r24
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e8       	ldi	r26, 0x80	; 128
    128c:	bf e3       	ldi	r27, 0x3F	; 63
    128e:	89 8f       	std	Y+25, r24	; 0x19
    1290:	9a 8f       	std	Y+26, r25	; 0x1a
    1292:	ab 8f       	std	Y+27, r26	; 0x1b
    1294:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	69 8d       	ldd	r22, Y+25	; 0x19
    1298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    129a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a ef       	ldi	r20, 0xFA	; 250
    12a4:	54 e4       	ldi	r21, 0x44	; 68
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8d 8b       	std	Y+21, r24	; 0x15
    12b0:	9e 8b       	std	Y+22, r25	; 0x16
    12b2:	af 8b       	std	Y+23, r26	; 0x17
    12b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b6:	6d 89       	ldd	r22, Y+21	; 0x15
    12b8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ba:	8f 89       	ldd	r24, Y+23	; 0x17
    12bc:	98 8d       	ldd	r25, Y+24	; 0x18
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <LCD_displayCharacter+0x262>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9c 8b       	std	Y+20, r25	; 0x14
    12d4:	8b 8b       	std	Y+19, r24	; 0x13
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    12d8:	6d 89       	ldd	r22, Y+21	; 0x15
    12da:	7e 89       	ldd	r23, Y+22	; 0x16
    12dc:	8f 89       	ldd	r24, Y+23	; 0x17
    12de:	98 8d       	ldd	r25, Y+24	; 0x18
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	69 8d       	ldd	r22, Y+25	; 0x19
    12f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9c 8b       	std	Y+20, r25	; 0x14
    1316:	8b 8b       	std	Y+19, r24	; 0x13
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <LCD_displayCharacter+0x2c2>
    131a:	88 ec       	ldi	r24, 0xC8	; 200
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9a 8b       	std	Y+18, r25	; 0x12
    1320:	89 8b       	std	Y+17, r24	; 0x11
    1322:	89 89       	ldd	r24, Y+17	; 0x11
    1324:	9a 89       	ldd	r25, Y+18	; 0x12
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <LCD_displayCharacter+0x2b0>
    132a:	9a 8b       	std	Y+18, r25	; 0x12
    132c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8b 89       	ldd	r24, Y+19	; 0x13
    1330:	9c 89       	ldd	r25, Y+20	; 0x14
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9c 8b       	std	Y+20, r25	; 0x14
    1336:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8b 89       	ldd	r24, Y+19	; 0x13
    133a:	9c 89       	ldd	r25, Y+20	; 0x14
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <LCD_displayCharacter+0x2a4>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6d 89       	ldd	r22, Y+21	; 0x15
    1344:	7e 89       	ldd	r23, Y+22	; 0x16
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	98 8d       	ldd	r25, Y+24	; 0x18
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9c 8b       	std	Y+20, r25	; 0x14
    1354:	8b 8b       	std	Y+19, r24	; 0x13
    1356:	8b 89       	ldd	r24, Y+19	; 0x13
    1358:	9c 89       	ldd	r25, Y+20	; 0x14
    135a:	98 8b       	std	Y+16, r25	; 0x10
    135c:	8f 87       	std	Y+15, r24	; 0x0f
    135e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1360:	98 89       	ldd	r25, Y+16	; 0x10
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCD_displayCharacter+0x2ec>
    1366:	98 8b       	std	Y+16, r25	; 0x10
    1368:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);

	/*disable the LCD*/
	CLEAR_BIT(CTRL_PORT_OUT, EN);
    136a:	a5 e3       	ldi	r26, 0x35	; 53
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e3       	ldi	r30, 0x35	; 53
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8b 7f       	andi	r24, 0xFB	; 251
    1376:	8c 93       	st	X, r24
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e8       	ldi	r26, 0x80	; 128
    137e:	bf e3       	ldi	r27, 0x3F	; 63
    1380:	8b 87       	std	Y+11, r24	; 0x0b
    1382:	9c 87       	std	Y+12, r25	; 0x0c
    1384:	ad 87       	std	Y+13, r26	; 0x0d
    1386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1388:	6b 85       	ldd	r22, Y+11	; 0x0b
    138a:	7c 85       	ldd	r23, Y+12	; 0x0c
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	4a ef       	ldi	r20, 0xFA	; 250
    1396:	54 e4       	ldi	r21, 0x44	; 68
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	8f 83       	std	Y+7, r24	; 0x07
    13a2:	98 87       	std	Y+8, r25	; 0x08
    13a4:	a9 87       	std	Y+9, r26	; 0x09
    13a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e8       	ldi	r20, 0x80	; 128
    13b6:	5f e3       	ldi	r21, 0x3F	; 63
    13b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13bc:	88 23       	and	r24, r24
    13be:	2c f4       	brge	.+10     	; 0x13ca <LCD_displayCharacter+0x354>
		__ticks = 1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	3f c0       	rjmp	.+126    	; 0x1448 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	3f ef       	ldi	r19, 0xFF	; 255
    13d6:	4f e7       	ldi	r20, 0x7F	; 127
    13d8:	57 e4       	ldi	r21, 0x47	; 71
    13da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13de:	18 16       	cp	r1, r24
    13e0:	4c f5       	brge	.+82     	; 0x1434 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e2       	ldi	r20, 0x20	; 32
    13f0:	51 e4       	ldi	r21, 0x41	; 65
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	0f c0       	rjmp	.+30     	; 0x142a <LCD_displayCharacter+0x3b4>
    140c:	88 ec       	ldi	r24, 0xC8	; 200
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 83       	std	Y+4, r25	; 0x04
    1412:	8b 83       	std	Y+3, r24	; 0x03
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_displayCharacter+0x3a2>
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	69 f7       	brne	.-38     	; 0x140c <LCD_displayCharacter+0x396>
    1432:	14 c0       	rjmp	.+40     	; 0x145c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <LCD_displayCharacter+0x3de>
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    145c:	e9 96       	adiw	r28, 0x39	; 57
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <LCD_displayString>:
 * [Args]:
 * 		character_ptr: pointer to the first character of the string to be displayed
 * [Return]: -
 -----------------------------------------*/
void LCD_displayString(uint8 *character_ptr)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <LCD_displayString+0x6>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	0a c0       	rjmp	.+20     	; 0x1492 <LCD_displayString+0x24>
	/*display the characters until the null terminator is encountered*/
	while(*character_ptr != '\0')
	{
		LCD_displayCharacter(*character_ptr);
    147e:	e9 81       	ldd	r30, Y+1	; 0x01
    1480:	fa 81       	ldd	r31, Y+2	; 0x02
    1482:	80 81       	ld	r24, Z
    1484:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_displayCharacter>
		character_ptr++;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
 * [Return]: -
 -----------------------------------------*/
void LCD_displayString(uint8 *character_ptr)
{
	/*display the characters until the null terminator is encountered*/
	while(*character_ptr != '\0')
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	80 81       	ld	r24, Z
    1498:	88 23       	and	r24, r24
    149a:	89 f7       	brne	.-30     	; 0x147e <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*character_ptr);
		character_ptr++;
	}
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <LCD_displayInt>:
 * [Args]:
 * 		int_num: a signed 32-bit integer number to be displayed
 * [Return]: -
 -----------------------------------------*/
void LCD_displayInt(sint32 int_num)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	a4 97       	sbiw	r28, 0x24	; 36
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	69 a3       	std	Y+33, r22	; 0x21
    14bc:	7a a3       	std	Y+34, r23	; 0x22
    14be:	8b a3       	std	Y+35, r24	; 0x23
    14c0:	9c a3       	std	Y+36, r25	; 0x24
	uint8 str_of_int[LCD_N_COL]= {0};
    14c2:	80 e2       	ldi	r24, 0x20	; 32
    14c4:	fe 01       	movw	r30, r28
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	df 01       	movw	r26, r30
    14ca:	98 2f       	mov	r25, r24
    14cc:	1d 92       	st	X+, r1
    14ce:	9a 95       	dec	r25
    14d0:	e9 f7       	brne	.-6      	; 0x14cc <LCD_displayInt+0x26>
	if (int_num < 0)
    14d2:	89 a1       	ldd	r24, Y+33	; 0x21
    14d4:	9a a1       	ldd	r25, Y+34	; 0x22
    14d6:	ab a1       	ldd	r26, Y+35	; 0x23
    14d8:	bc a1       	ldd	r27, Y+36	; 0x24
    14da:	bb 23       	and	r27, r27
    14dc:	94 f4       	brge	.+36     	; 0x1502 <LCD_displayInt+0x5c>
	{
		LCD_displayCharacter('-');
    14de:	8d e2       	ldi	r24, 0x2D	; 45
    14e0:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_displayCharacter>

		/*convert into a positive number*/
		int_num = -1 * int_num;
    14e4:	89 a1       	ldd	r24, Y+33	; 0x21
    14e6:	9a a1       	ldd	r25, Y+34	; 0x22
    14e8:	ab a1       	ldd	r26, Y+35	; 0x23
    14ea:	bc a1       	ldd	r27, Y+36	; 0x24
    14ec:	b0 95       	com	r27
    14ee:	a0 95       	com	r26
    14f0:	90 95       	com	r25
    14f2:	81 95       	neg	r24
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	af 4f       	sbci	r26, 0xFF	; 255
    14f8:	bf 4f       	sbci	r27, 0xFF	; 255
    14fa:	89 a3       	std	Y+33, r24	; 0x21
    14fc:	9a a3       	std	Y+34, r25	; 0x22
    14fe:	ab a3       	std	Y+35, r26	; 0x23
    1500:	bc a3       	std	Y+36, r27	; 0x24

	}
	/*convert the positive number (int_num) into a string (str_of_int)*/
	convertIntToString(int_num, str_of_int);
    1502:	89 a1       	ldd	r24, Y+33	; 0x21
    1504:	9a a1       	ldd	r25, Y+34	; 0x22
    1506:	ab a1       	ldd	r26, Y+35	; 0x23
    1508:	bc a1       	ldd	r27, Y+36	; 0x24
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	9e 01       	movw	r18, r28
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	a9 01       	movw	r20, r18
    1516:	0e 94 9a 0a 	call	0x1534	; 0x1534 <convertIntToString>

	/*display the number*/
	LCD_displayString(str_of_int);
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	0e 94 37 0a 	call	0x146e	; 0x146e <LCD_displayString>
}
    1522:	a4 96       	adiw	r28, 0x24	; 36
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <convertIntToString>:
 * 		int_num: a signed 32-bit integer number to be converted
 * 		*str_of_int_ptr: pointer to the string that represents the integer number -->>>>>>>
 * [Return]: -
 -----------------------------------------*/
void convertIntToString(uint32 int_num, uint8 *str_of_int_ptr)
{
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	e7 97       	sbiw	r28, 0x37	; 55
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	6d a7       	std	Y+45, r22	; 0x2d
    154e:	7e a7       	std	Y+46, r23	; 0x2e
    1550:	8f a7       	std	Y+47, r24	; 0x2f
    1552:	98 ab       	std	Y+48, r25	; 0x30
    1554:	5a ab       	std	Y+50, r21	; 0x32
    1556:	49 ab       	std	Y+49, r20	; 0x31
	/*temporary array that stores the string of int_num in reverse.
	 * the first item is NULL so that it is the last item stored in str_of_int to fit
	 *  LCD_displayString().
	 */
	uint8 temp[LCD_N_COL]={'\0'};
    1558:	80 e2       	ldi	r24, 0x20	; 32
    155a:	fe 01       	movw	r30, r28
    155c:	33 96       	adiw	r30, 0x03	; 3
    155e:	df 01       	movw	r26, r30
    1560:	48 2f       	mov	r20, r24
    1562:	1d 92       	st	X+, r1
    1564:	4a 95       	dec	r20
    1566:	e9 f7       	brne	.-6      	; 0x1562 <convertIntToString+0x2e>

	/*a reference array that stores the ASCII corresponding to each decimal digit*/
	uint8 ASCII_reference[10] = {'0','1','2', '3', '4', '5', '6', '7', '8', '9'};
    1568:	ce 01       	movw	r24, r28
    156a:	83 96       	adiw	r24, 0x23	; 35
    156c:	9c ab       	std	Y+52, r25	; 0x34
    156e:	8b ab       	std	Y+51, r24	; 0x33
    1570:	a2 ea       	ldi	r26, 0xA2	; 162
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	be ab       	std	Y+54, r27	; 0x36
    1576:	ad ab       	std	Y+53, r26	; 0x35
    1578:	ba e0       	ldi	r27, 0x0A	; 10
    157a:	bf ab       	std	Y+55, r27	; 0x37
    157c:	ed a9       	ldd	r30, Y+53	; 0x35
    157e:	fe a9       	ldd	r31, Y+54	; 0x36
    1580:	00 80       	ld	r0, Z
    1582:	4d a9       	ldd	r20, Y+53	; 0x35
    1584:	5e a9       	ldd	r21, Y+54	; 0x36
    1586:	4f 5f       	subi	r20, 0xFF	; 255
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	5e ab       	std	Y+54, r21	; 0x36
    158c:	4d ab       	std	Y+53, r20	; 0x35
    158e:	ab a9       	ldd	r26, Y+51	; 0x33
    1590:	bc a9       	ldd	r27, Y+52	; 0x34
    1592:	0c 92       	st	X, r0
    1594:	eb a9       	ldd	r30, Y+51	; 0x33
    1596:	fc a9       	ldd	r31, Y+52	; 0x34
    1598:	31 96       	adiw	r30, 0x01	; 1
    159a:	fc ab       	std	Y+52, r31	; 0x34
    159c:	eb ab       	std	Y+51, r30	; 0x33
    159e:	ff a9       	ldd	r31, Y+55	; 0x37
    15a0:	f1 50       	subi	r31, 0x01	; 1
    15a2:	ff ab       	std	Y+55, r31	; 0x37
    15a4:	4f a9       	ldd	r20, Y+55	; 0x37
    15a6:	44 23       	and	r20, r20
    15a8:	49 f7       	brne	.-46     	; 0x157c <convertIntToString+0x48>

	uint8 index = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	8a 83       	std	Y+2, r24	; 0x02

	if(int_num == 0)
    15ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b2:	af a5       	ldd	r26, Y+47	; 0x2f
    15b4:	b8 a9       	ldd	r27, Y+48	; 0x30
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	a1 05       	cpc	r26, r1
    15ba:	b1 05       	cpc	r27, r1
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <convertIntToString+0x8c>
    15be:	41 c0       	rjmp	.+130    	; 0x1642 <convertIntToString+0x10e>
	{
		temp[index] = ASCII_reference[0];
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4b a1       	ldd	r20, Y+35	; 0x23
    15c8:	ce 01       	movw	r24, r28
    15ca:	03 96       	adiw	r24, 0x03	; 3
    15cc:	fc 01       	movw	r30, r24
    15ce:	e2 0f       	add	r30, r18
    15d0:	f3 1f       	adc	r31, r19
    15d2:	40 83       	st	Z, r20
		index++;
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	8a 83       	std	Y+2, r24	; 0x02
    15da:	3b c0       	rjmp	.+118    	; 0x1652 <convertIntToString+0x11e>
	}
	else
	{
		while(int_num != 0)
		{
			temp[index] = ASCII_reference[int_num % 10];
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	08 2f       	mov	r16, r24
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15e6:	af a5       	ldd	r26, Y+47	; 0x2f
    15e8:	b8 a9       	ldd	r27, Y+48	; 0x30
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__udivmodsi4>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9e 01       	movw	r18, r28
    1600:	2d 5d       	subi	r18, 0xDD	; 221
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	f9 01       	movw	r30, r18
    1606:	e8 0f       	add	r30, r24
    1608:	f9 1f       	adc	r31, r25
    160a:	20 81       	ld	r18, Z
    160c:	ce 01       	movw	r24, r28
    160e:	03 96       	adiw	r24, 0x03	; 3
    1610:	fc 01       	movw	r30, r24
    1612:	e0 0f       	add	r30, r16
    1614:	f1 1f       	adc	r31, r17
    1616:	20 83       	st	Z, r18
			int_num /= 10;
    1618:	8d a5       	ldd	r24, Y+45	; 0x2d
    161a:	9e a5       	ldd	r25, Y+46	; 0x2e
    161c:	af a5       	ldd	r26, Y+47	; 0x2f
    161e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__udivmodsi4>
    1630:	da 01       	movw	r26, r20
    1632:	c9 01       	movw	r24, r18
    1634:	8d a7       	std	Y+45, r24	; 0x2d
    1636:	9e a7       	std	Y+46, r25	; 0x2e
    1638:	af a7       	std	Y+47, r26	; 0x2f
    163a:	b8 ab       	std	Y+48, r27	; 0x30
			index++;
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	8a 83       	std	Y+2, r24	; 0x02
		temp[index] = ASCII_reference[0];
		index++;
	}
	else
	{
		while(int_num != 0)
    1642:	8d a5       	ldd	r24, Y+45	; 0x2d
    1644:	9e a5       	ldd	r25, Y+46	; 0x2e
    1646:	af a5       	ldd	r26, Y+47	; 0x2f
    1648:	b8 a9       	ldd	r27, Y+48	; 0x30
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	a1 05       	cpc	r26, r1
    164e:	b1 05       	cpc	r27, r1
    1650:	29 f6       	brne	.-118    	; 0x15dc <convertIntToString+0xa8>
		}

	}

	/*store the converted number in str_of_int in the right order*/
	for (uint8 i = 0; i < index; i++)
    1652:	19 82       	std	Y+1, r1	; 0x01
    1654:	1f c0       	rjmp	.+62     	; 0x1694 <convertIntToString+0x160>
	{
		str_of_int_ptr[i] = temp[index - i -1];
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	89 a9       	ldd	r24, Y+49	; 0x31
    165e:	9a a9       	ldd	r25, Y+50	; 0x32
    1660:	dc 01       	movw	r26, r24
    1662:	a2 0f       	add	r26, r18
    1664:	b3 1f       	adc	r27, r19
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	f9 01       	movw	r30, r18
    1674:	e8 1b       	sub	r30, r24
    1676:	f9 0b       	sbc	r31, r25
    1678:	cf 01       	movw	r24, r30
    167a:	9c 01       	movw	r18, r24
    167c:	21 50       	subi	r18, 0x01	; 1
    167e:	30 40       	sbci	r19, 0x00	; 0
    1680:	ce 01       	movw	r24, r28
    1682:	03 96       	adiw	r24, 0x03	; 3
    1684:	fc 01       	movw	r30, r24
    1686:	e2 0f       	add	r30, r18
    1688:	f3 1f       	adc	r31, r19
    168a:	80 81       	ld	r24, Z
    168c:	8c 93       	st	X, r24
		}

	}

	/*store the converted number in str_of_int in the right order*/
	for (uint8 i = 0; i < index; i++)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	99 81       	ldd	r25, Y+1	; 0x01
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	98 17       	cp	r25, r24
    169a:	e8 f2       	brcs	.-70     	; 0x1656 <convertIntToString+0x122>
	{
		str_of_int_ptr[i] = temp[index - i -1];
	}
}
    169c:	e7 96       	adiw	r28, 0x37	; 55
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <LCD_init>:
 * [Description]: initializes the LCD
 * [Args]: -
 * [Return]: -
 -----------------------------------------*/
void LCD_init()
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	CTRL_PORT_DIR |= (1<<RS) | (1<<R_W) | (1<<EN);
    16ba:	a4 e3       	ldi	r26, 0x34	; 52
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	87 60       	ori	r24, 0x07	; 7
    16c6:	8c 93       	st	X, r24

#if N_BIT_INTERFACE == 8
	//set to o/p
	DATA_PORT_DIR = 0xFF;
    16c8:	ea e3       	ldi	r30, 0x3A	; 58
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	80 83       	st	Z, r24



	LCD_sendCommand(TWO_LINE_8BIT_MODE);
    16d0:	88 e3       	ldi	r24, 0x38	; 56
    16d2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
	LCD_sendCommand(0x02);
	LCD_sendCommand(TWO_LINE_4BIT_MODE);

#endif

	LCD_sendCommand(CLEAR_DISPLAY_CLEAR_DDRAM);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    16dc:	8c e0       	ldi	r24, 0x0C	; 12
    16de:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <LCD_clear>:
 * [Description]: clears the display
 * [Args]: -
 * [Return]: -
 -----------------------------------------*/
void LCD_clear()
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <LCD_goToRowCol>:
 * 		row: the desired row number, starting from 0
 * 		col: the desired column number, starting from 0
 * [Return]: -
 -----------------------------------------*/
void LCD_goToRowCol(uint8 row, uint8 col)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <LCD_goToRowCol+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <LCD_goToRowCol+0x8>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3c 83       	std	Y+4, r19	; 0x04
    171a:	2b 83       	std	Y+3, r18	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	31 f0       	breq	.+12     	; 0x1730 <LCD_goToRowCol+0x2e>
    1724:	2b 81       	ldd	r18, Y+3	; 0x03
    1726:	3c 81       	ldd	r19, Y+4	; 0x04
    1728:	21 30       	cpi	r18, 0x01	; 1
    172a:	31 05       	cpc	r19, r1
    172c:	31 f0       	breq	.+12     	; 0x173a <LCD_goToRowCol+0x38>
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <LCD_goToRowCol+0x40>
	{
	case 0:
		LCD_sendCommand( 0x80 + (FIRST_LINE_BASE_ADDRESS + col) );
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 58       	subi	r24, 0x80	; 128
    1734:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <LCD_goToRowCol+0x40>
		break;
	case 1:
		LCD_sendCommand( 0x80 + (SECOND_LINE_BASE_ADDRESS + col) );
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	80 54       	subi	r24, 0x40	; 64
    173e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_sendCommand>
		break;
	default:
		break;
	}
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <UART_init>:
 * [Args]:
 * 		config_ptr: pointer to the configuration set
 * [Return]: None
 -----------------------------------------*/
void UART_init(const Uart_ConfigType *config_ptr)
{
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <UART_init+0xa>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	 * - set the character size
	 * - set the baud rate
	 *********************************************/

	/*Enable the USART transmitter & receiver */
	SET_BIT(UCSRB, RXEN);
    1762:	aa e2       	ldi	r26, 0x2A	; 42
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ea e2       	ldi	r30, 0x2A	; 42
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 61       	ori	r24, 0x10	; 16
    176e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    1770:	aa e2       	ldi	r26, 0x2A	; 42
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ea e2       	ldi	r30, 0x2A	; 42
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 60       	ori	r24, 0x08	; 8
    177c:	8c 93       	st	X, r24

#ifdef DOUBLE_SPEED
	/*Enable double speed*/
	SET_BIT(UCSRA, U2X);
    177e:	ab e2       	ldi	r26, 0x2B	; 43
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	eb e2       	ldi	r30, 0x2B	; 43
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	82 60       	ori	r24, 0x02	; 2
    178a:	8c 93       	st	X, r24
#endif

	/*to access UCSRC, URSEL needs to be set*/
	SET_BIT(UCSRC, URSEL);
    178c:	a0 e4       	ldi	r26, 0x40	; 64
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e0 e4       	ldi	r30, 0x40	; 64
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	8c 93       	st	X, r24
	/*set the mode to synchronous or asynchronous*/
	UCSRC = (UCSRC & 0xBF) | (UART_MODE<<UMSEL);
    179a:	a0 e4       	ldi	r26, 0x40	; 64
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e0 e4       	ldi	r30, 0x40	; 64
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 7b       	andi	r24, 0xBF	; 191
    17a6:	8c 93       	st	X, r24
	/*~~~~~~~~~ frame ~~~~~~~*/
	UCSRC = (UCSRC & 0xCF) | (config_ptr->e_Uart_parityMode << UPM0);
    17a8:	a0 e4       	ldi	r26, 0x40	; 64
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e0 e4       	ldi	r30, 0x40	; 64
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	28 2f       	mov	r18, r24
    17b4:	2f 7c       	andi	r18, 0xCF	; 207
    17b6:	e9 81       	ldd	r30, Y+1	; 0x01
    17b8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ba:	80 81       	ld	r24, Z
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	82 95       	swap	r24
    17c2:	92 95       	swap	r25
    17c4:	90 7f       	andi	r25, 0xF0	; 240
    17c6:	98 27       	eor	r25, r24
    17c8:	80 7f       	andi	r24, 0xF0	; 240
    17ca:	98 27       	eor	r25, r24
    17cc:	82 2b       	or	r24, r18
    17ce:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (config_ptr->e_Uart_stopBit << USBS);
    17d0:	a0 e4       	ldi	r26, 0x40	; 64
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e0 e4       	ldi	r30, 0x40	; 64
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	28 2f       	mov	r18, r24
    17dc:	27 7f       	andi	r18, 0xF7	; 247
    17de:	e9 81       	ldd	r30, Y+1	; 0x01
    17e0:	fa 81       	ldd	r31, Y+2	; 0x02
    17e2:	81 81       	ldd	r24, Z+1	; 0x01
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	82 2b       	or	r24, r18
    17f6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((config_ptr->e_Uart_charSize & 0x03) << UCSZ0);
    17f8:	a0 e4       	ldi	r26, 0x40	; 64
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e0 e4       	ldi	r30, 0x40	; 64
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	28 2f       	mov	r18, r24
    1804:	29 7f       	andi	r18, 0xF9	; 249
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	83 70       	andi	r24, 0x03	; 3
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	82 2b       	or	r24, r18
    181a:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (config_ptr->e_Uart_charSize & 0x04);
    181c:	aa e2       	ldi	r26, 0x2A	; 42
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ea e2       	ldi	r30, 0x2A	; 42
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	98 2f       	mov	r25, r24
    1828:	9b 7f       	andi	r25, 0xFB	; 251
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	84 70       	andi	r24, 0x04	; 4
    1832:	89 2b       	or	r24, r25
    1834:	8c 93       	st	X, r24
	/*Clear URSEL to access UBRRH*/
	CLEAR_BIT(UBRRH, URSEL);
    1836:	a0 e4       	ldi	r26, 0x40	; 64
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e0 e4       	ldi	r30, 0x40	; 64
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8f 77       	andi	r24, 0x7F	; 127
    1842:	8c 93       	st	X, r24
	/*Baud rate*/
	UBRRH = BAUD_RATE_GENERATOR(config_ptr->Uart_baudRate) >> 8;
    1844:	00 e4       	ldi	r16, 0x40	; 64
    1846:	10 e0       	ldi	r17, 0x00	; 0
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	83 81       	ldd	r24, Z+3	; 0x03
    184e:	94 81       	ldd	r25, Z+4	; 0x04
    1850:	cc 01       	movw	r24, r24
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	aa 1f       	adc	r26, r26
    185c:	bb 1f       	adc	r27, r27
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	aa 1f       	adc	r26, r26
    1864:	bb 1f       	adc	r27, r27
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	9c 01       	movw	r18, r24
    1870:	ad 01       	movw	r20, r26
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	92 e1       	ldi	r25, 0x12	; 18
    1876:	aa e7       	ldi	r26, 0x7A	; 122
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__udivmodsi4>
    1882:	da 01       	movw	r26, r20
    1884:	c9 01       	movw	r24, r18
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	a1 09       	sbc	r26, r1
    188a:	b1 09       	sbc	r27, r1
    188c:	89 2f       	mov	r24, r25
    188e:	9a 2f       	mov	r25, r26
    1890:	ab 2f       	mov	r26, r27
    1892:	bb 27       	eor	r27, r27
    1894:	f8 01       	movw	r30, r16
    1896:	80 83       	st	Z, r24
	UBRRL = BAUD_RATE_GENERATOR(config_ptr->Uart_baudRate);
    1898:	09 e2       	ldi	r16, 0x29	; 41
    189a:	10 e0       	ldi	r17, 0x00	; 0
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	83 81       	ldd	r24, Z+3	; 0x03
    18a2:	94 81       	ldd	r25, Z+4	; 0x04
    18a4:	cc 01       	movw	r24, r24
    18a6:	a0 e0       	ldi	r26, 0x00	; 0
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	aa 1f       	adc	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	aa 1f       	adc	r26, r26
    18b8:	bb 1f       	adc	r27, r27
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	9c 01       	movw	r18, r24
    18c4:	ad 01       	movw	r20, r26
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	92 e1       	ldi	r25, 0x12	; 18
    18ca:	aa e7       	ldi	r26, 0x7A	; 122
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__udivmodsi4>
    18d6:	da 01       	movw	r26, r20
    18d8:	c9 01       	movw	r24, r18
    18da:	81 50       	subi	r24, 0x01	; 1
    18dc:	f8 01       	movw	r30, r16
    18de:	80 83       	st	Z, r24

}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret

000018ee <UART_sendByte>:
 * [Args]:
 * 		data: byte to be sent
 * [Return]: None
 -----------------------------------------*/
void UART_sendByte(uint8 data)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	89 83       	std	Y+1, r24	; 0x01
	/*wait until the transmit buffer is empty*/
	while( BIT_IS_CLEAR(UCSRA, UDRE));
    18fa:	eb e2       	ldi	r30, 0x2B	; 43
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	80 72       	andi	r24, 0x20	; 32
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	b9 f3       	breq	.-18     	; 0x18fa <UART_sendByte+0xc>

	/*start transmission*/
	UDR = data;
    190c:	ec e2       	ldi	r30, 0x2C	; 44
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	80 83       	st	Z, r24
}
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <UART_receiveByte>:
 * [Description]: receives a byte of data
 * [Args]: None
 * [Return]: the received byte
 -----------------------------------------*/
uint8 UART_receiveByte()
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	/*wait until the whole byte is received*/
	while( BIT_IS_CLEAR(UCSRA, RXC));
    1924:	eb e2       	ldi	r30, 0x2B	; 43
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 23       	and	r24, r24
    192c:	dc f7       	brge	.-10     	; 0x1924 <UART_receiveByte+0x8>

	/*read the buffer, clear the flag*/
	return UDR;
    192e:	ec e2       	ldi	r30, 0x2C	; 44
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <UART_receiveString>:
 * [Args]:
 * 		str_ptr: pointer to an array of characters, where the received string will be stored
 * [Return]: None
 -----------------------------------------*/
void UART_receiveString(uint8 *str_ptr)
{
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <UART_receiveString+0xa>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9b 83       	std	Y+3, r25	; 0x03
    194c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * the string will terminate with a special character '#' followed by the null terminator.
	 * the function loops until it detects the special character and replaces it with the null terminator
	 */
	uint8 index = 0;
    194e:	19 82       	std	Y+1, r1	; 0x01
	str_ptr[index] = UART_receiveByte();
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	8c 01       	movw	r16, r24
    195c:	02 0f       	add	r16, r18
    195e:	13 1f       	adc	r17, r19
    1960:	0e 94 8e 0c 	call	0x191c	; 0x191c <UART_receiveByte>
    1964:	f8 01       	movw	r30, r16
    1966:	80 83       	st	Z, r24
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <UART_receiveString+0x4e>
	while (str_ptr[index] != '#')
	{
		index++;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	89 83       	std	Y+1, r24	; 0x01
		str_ptr[index] = UART_receiveByte();
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	8c 01       	movw	r16, r24
    197c:	02 0f       	add	r16, r18
    197e:	13 1f       	adc	r17, r19
    1980:	0e 94 8e 0c 	call	0x191c	; 0x191c <UART_receiveByte>
    1984:	f8 01       	movw	r30, r16
    1986:	80 83       	st	Z, r24
	 * the string will terminate with a special character '#' followed by the null terminator.
	 * the function loops until it detects the special character and replaces it with the null terminator
	 */
	uint8 index = 0;
	str_ptr[index] = UART_receiveByte();
	while (str_ptr[index] != '#')
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	fc 01       	movw	r30, r24
    1994:	e2 0f       	add	r30, r18
    1996:	f3 1f       	adc	r31, r19
    1998:	80 81       	ld	r24, Z
    199a:	83 32       	cpi	r24, 0x23	; 35
    199c:	31 f7       	brne	.-52     	; 0x196a <UART_receiveString+0x30>
	{
		index++;
		str_ptr[index] = UART_receiveByte();
	}
	str_ptr[index] = '\0';
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	fc 01       	movw	r30, r24
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	10 82       	st	Z, r1
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <UART_sendString>:
 * [Args]:
 * 		str_ptr: pointer to the string that will be sent
 * [Return]: None
 -----------------------------------------*/
void UART_sendString(uint8 *str_ptr)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <UART_sendString+0x6>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = 0;
    19d0:	19 82       	std	Y+1, r1	; 0x01
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <UART_sendString+0x30>
	while(str_ptr[index] != '\0')
	{
		UART_sendByte(str_ptr[index]);
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	80 81       	ld	r24, Z
    19e6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_sendByte>
		index++;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	89 83       	std	Y+1, r24	; 0x01
 * [Return]: None
 -----------------------------------------*/
void UART_sendString(uint8 *str_ptr)
{
	uint8 index = 0;
	while(str_ptr[index] != '\0')
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	fc 01       	movw	r30, r24
    19fc:	e2 0f       	add	r30, r18
    19fe:	f3 1f       	adc	r31, r19
    1a00:	80 81       	ld	r24, Z
    1a02:	88 23       	and	r24, r24
    1a04:	39 f7       	brne	.-50     	; 0x19d4 <UART_sendString+0x14>
	{
		UART_sendByte(str_ptr[index]);
		index++;
	}
	/*append the special character and the null terminator, to fit UART_receiveString*/
	UART_sendByte('#');
    1a06:	83 e2       	ldi	r24, 0x23	; 35
    1a08:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_sendByte>
	UART_sendByte('\0');
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_sendByte>
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <setNewPass>:
uint8 password_counter = 0;
uint8 key = 0;
const Uart_ConfigType s_UartConfig = {PARITY_DISABLED, ONE_STOP_BIT, CHAR_8, 9600};

void setNewPass()
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	2e 97       	sbiw	r28, 0x0e	; 14
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
	LCD_goToRowCol(0,0);
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_goToRowCol>
	LCD_displayString("Please Enter New Pass:");
    1a3a:	80 e6       	ldi	r24, 0x60	; 96
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 37 0a 	call	0x146e	; 0x146e <LCD_displayString>
	LCD_goToRowCol(1,0);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_goToRowCol>
	LCD_displayString("-----");
    1a4a:	87 e7       	ldi	r24, 0x77	; 119
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 37 0a 	call	0x146e	; 0x146e <LCD_displayString>

	LCD_goToRowCol(1,0);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_goToRowCol>
    1a5a:	82 c0       	rjmp	.+260    	; 0x1b60 <setNewPass+0x142>
	while(password_counter < PASSWORD_LENGTH)
	{
		key = keypad_getPressedKey();
    1a5c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <keypad_getPressedKey>
    1a60:	80 93 bf 00 	sts	0x00BF, r24
		UART_sendByte(key);
    1a64:	80 91 bf 00 	lds	r24, 0x00BF
    1a68:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_sendByte>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a8 ec       	ldi	r26, 0xC8	; 200
    1a72:	b3 e4       	ldi	r27, 0x43	; 67
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a ef       	ldi	r20, 0xFA	; 250
    1a8a:	54 e4       	ldi	r21, 0x44	; 68
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <setNewPass+0xa0>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <setNewPass+0x11e>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <setNewPass+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <setNewPass+0x100>
    1b00:	88 ec       	ldi	r24, 0xC8	; 200
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <setNewPass+0xee>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <setNewPass+0xe2>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <setNewPass+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <setNewPass+0x12a>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		LCD_displayCharacter('*');
    1b50:	8a e2       	ldi	r24, 0x2A	; 42
    1b52:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_displayCharacter>
		password_counter++;
    1b56:	80 91 be 00 	lds	r24, 0x00BE
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	80 93 be 00 	sts	0x00BE, r24
	LCD_displayString("Please Enter New Pass:");
	LCD_goToRowCol(1,0);
	LCD_displayString("-----");

	LCD_goToRowCol(1,0);
	while(password_counter < PASSWORD_LENGTH)
    1b60:	80 91 be 00 	lds	r24, 0x00BE
    1b64:	85 30       	cpi	r24, 0x05	; 5
    1b66:	08 f4       	brcc	.+2      	; 0x1b6a <setNewPass+0x14c>
    1b68:	79 cf       	rjmp	.-270    	; 0x1a5c <setNewPass+0x3e>
		UART_sendByte(key);
		_delay_ms(400);
		LCD_displayCharacter('*');
		password_counter++;
	}
	LCD_goToRowCol(0,0);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_goToRowCol>
	LCD_displayString("Press '#' To Enter.         ");
    1b72:	8d e7       	ldi	r24, 0x7D	; 125
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 37 0a 	call	0x146e	; 0x146e <LCD_displayString>
	key = keypad_getPressedKey();
    1b7a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <keypad_getPressedKey>
    1b7e:	80 93 bf 00 	sts	0x00BF, r24
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <setNewPass+0x16e>
	while(key != '#')
	{
		key = keypad_getPressedKey();
    1b84:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <keypad_getPressedKey>
    1b88:	80 93 bf 00 	sts	0x00BF, r24
		password_counter++;
	}
	LCD_goToRowCol(0,0);
	LCD_displayString("Press '#' To Enter.         ");
	key = keypad_getPressedKey();
	while(key != '#')
    1b8c:	80 91 bf 00 	lds	r24, 0x00BF
    1b90:	83 32       	cpi	r24, 0x23	; 35
    1b92:	c1 f7       	brne	.-16     	; 0x1b84 <setNewPass+0x166>
	{
		key = keypad_getPressedKey();
	}
	//LCD_clear();
}
    1b94:	2e 96       	adiw	r28, 0x0e	; 14
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <confirmPass>:


/*Password Confirmation*/
void confirmPass()
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62

}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <main>:

int main()
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1bbc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_init>
	UART_init(&s_UartConfig);
    1bc0:	8c ea       	ldi	r24, 0xAC	; 172
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <UART_init>

	setNewPass();
    1bc8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <setNewPass>
	confirmPass();
    1bcc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <confirmPass>
    1bd0:	ff cf       	rjmp	.-2      	; 0x1bd0 <main+0x1c>

00001bd2 <keypad_getPressedKey>:
 * [DESCRIPTION]:
 * [Args]: -
 * [Return]: returns the number/character associated to the pressed key
 -----------------------------------------*/
uint8 keypad_getPressedKey()
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <keypad_getPressedKey+0x6>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
	uint8 col = 0;
    1bdc:	1a 82       	std	Y+2, r1	; 0x02
	uint8 row = 0;
    1bde:	19 82       	std	Y+1, r1	; 0x01
#elif (N_COL == 3)
	const uint8 keypad_buttons [N_BUTTONS] = {1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'};
#endif
	while (1)
	{
		for (col=0 ; col <N_COL; col++)
    1be0:	1a 82       	std	Y+2, r1	; 0x02
    1be2:	50 c0       	rjmp	.+160    	; 0x1c84 <keypad_getPressedKey+0xb2>
		{
			/*all row pins are always inputs.
			 * only one column is configured as o/p each iteration.
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	80 e1       	ldi	r24, 0x10	; 16
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <keypad_getPressedKey+0x26>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	2a 95       	dec	r18
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <keypad_getPressedKey+0x22>
    1bfc:	80 83       	st	Z, r24

			/*all row pins are connected to internal pull-up resistors.
			 * the selected column is enabled.
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	80 e1       	ldi	r24, 0x10	; 16
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <keypad_getPressedKey+0x42>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <keypad_getPressedKey+0x3e>
    1c18:	80 95       	com	r24
    1c1a:	80 83       	st	Z, r24


			for (row=0; row < N_ROW; row++)
    1c1c:	19 82       	std	Y+1, r1	; 0x01
    1c1e:	2c c0       	rjmp	.+88     	; 0x1c78 <keypad_getPressedKey+0xa6>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row ))
    1c20:	e6 e3       	ldi	r30, 0x36	; 54
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a9 01       	movw	r20, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <keypad_getPressedKey+0x66>
    1c34:	55 95       	asr	r21
    1c36:	47 95       	ror	r20
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <keypad_getPressedKey+0x62>
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	81 70       	andi	r24, 0x01	; 1
    1c40:	90 70       	andi	r25, 0x00	; 0
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	b1 f4       	brne	.+44     	; 0x1c72 <keypad_getPressedKey+0xa0>
				{
					return ( keypad_buttons[row*N_COL + col] );
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	c9 01       	movw	r24, r18
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	28 0f       	add	r18, r24
    1c54:	39 1f       	adc	r19, r25
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	82 0f       	add	r24, r18
    1c5e:	93 1f       	adc	r25, r19
    1c60:	fc 01       	movw	r30, r24
    1c62:	ef 54       	subi	r30, 0x4F	; 79
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
				}

			}
		}
	}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret
			 * the selected column is enabled.
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));


			for (row=0; row < N_ROW; row++)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	88 f2       	brcs	.-94     	; 0x1c20 <keypad_getPressedKey+0x4e>
#elif (N_COL == 3)
	const uint8 keypad_buttons [N_BUTTONS] = {1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'};
#endif
	while (1)
	{
		for (col=0 ; col <N_COL; col++)
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <keypad_getPressedKey+0xba>
    1c8a:	ac cf       	rjmp	.-168    	; 0x1be4 <keypad_getPressedKey+0x12>
    1c8c:	a9 cf       	rjmp	.-174    	; 0x1be0 <keypad_getPressedKey+0xe>

00001c8e <__udivmodsi4>:
    1c8e:	a1 e2       	ldi	r26, 0x21	; 33
    1c90:	1a 2e       	mov	r1, r26
    1c92:	aa 1b       	sub	r26, r26
    1c94:	bb 1b       	sub	r27, r27
    1c96:	fd 01       	movw	r30, r26
    1c98:	0d c0       	rjmp	.+26     	; 0x1cb4 <__udivmodsi4_ep>

00001c9a <__udivmodsi4_loop>:
    1c9a:	aa 1f       	adc	r26, r26
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	ee 1f       	adc	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	a2 17       	cp	r26, r18
    1ca4:	b3 07       	cpc	r27, r19
    1ca6:	e4 07       	cpc	r30, r20
    1ca8:	f5 07       	cpc	r31, r21
    1caa:	20 f0       	brcs	.+8      	; 0x1cb4 <__udivmodsi4_ep>
    1cac:	a2 1b       	sub	r26, r18
    1cae:	b3 0b       	sbc	r27, r19
    1cb0:	e4 0b       	sbc	r30, r20
    1cb2:	f5 0b       	sbc	r31, r21

00001cb4 <__udivmodsi4_ep>:
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	1a 94       	dec	r1
    1cbe:	69 f7       	brne	.-38     	; 0x1c9a <__udivmodsi4_loop>
    1cc0:	60 95       	com	r22
    1cc2:	70 95       	com	r23
    1cc4:	80 95       	com	r24
    1cc6:	90 95       	com	r25
    1cc8:	9b 01       	movw	r18, r22
    1cca:	ac 01       	movw	r20, r24
    1ccc:	bd 01       	movw	r22, r26
    1cce:	cf 01       	movw	r24, r30
    1cd0:	08 95       	ret

00001cd2 <__prologue_saves__>:
    1cd2:	2f 92       	push	r2
    1cd4:	3f 92       	push	r3
    1cd6:	4f 92       	push	r4
    1cd8:	5f 92       	push	r5
    1cda:	6f 92       	push	r6
    1cdc:	7f 92       	push	r7
    1cde:	8f 92       	push	r8
    1ce0:	9f 92       	push	r9
    1ce2:	af 92       	push	r10
    1ce4:	bf 92       	push	r11
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	ca 1b       	sub	r28, r26
    1cfc:	db 0b       	sbc	r29, r27
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	09 94       	ijmp

00001d0a <__epilogue_restores__>:
    1d0a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d0c:	39 88       	ldd	r3, Y+17	; 0x11
    1d0e:	48 88       	ldd	r4, Y+16	; 0x10
    1d10:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d12:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d14:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d16:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d18:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d1c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d1e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d20:	df 80       	ldd	r13, Y+7	; 0x07
    1d22:	ee 80       	ldd	r14, Y+6	; 0x06
    1d24:	fd 80       	ldd	r15, Y+5	; 0x05
    1d26:	0c 81       	ldd	r16, Y+4	; 0x04
    1d28:	1b 81       	ldd	r17, Y+3	; 0x03
    1d2a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d2c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d2e:	ce 0f       	add	r28, r30
    1d30:	d1 1d       	adc	r29, r1
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	ed 01       	movw	r28, r26
    1d3e:	08 95       	ret

00001d40 <_exit>:
    1d40:	f8 94       	cli

00001d42 <__stop_program>:
    1d42:	ff cf       	rjmp	.-2      	; 0x1d42 <__stop_program>
